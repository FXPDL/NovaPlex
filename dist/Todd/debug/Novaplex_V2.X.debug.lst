

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 28 22:34:05 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	idataBANK6,global,class=CODE,delta=2
    11                           	psect	idataBANK7,global,class=CODE,delta=2
    12                           	psect	idataBANK8,global,class=CODE,delta=2
    13                           	psect	idataBANK10,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x920,80
    86                           	dabs	1,0x8C6,42
    87                           	dabs	1,0x8A0,38
    88                           	dabs	1,0x820,80
    89                           	dabs	1,0x7A0,80
    90                           	dabs	1,0x720,80
    91                           	dabs	1,0x6A0,80
    92                           	dabs	1,0x620,80
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x56E,2
    95                           	dabs	1,0x236E,0,_delayArray
    96                           	dabs	1,0x2576,0,_mod5
    97                           	dabs	1,0x7E,2
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0095                     	;# 
   138  0096                     	;# 
   139  0097                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0110                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  011D                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  018F                     	;# 
   158  0190                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  020D                     	;# 
   192  020F                     	;# 
   193  0210                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0216                     	;# 
   206  0216                     	;# 
   207  0217                     	;# 
   208  0217                     	;# 
   209  0219                     	;# 
   210  021A                     	;# 
   211  021B                     	;# 
   212  021C                     	;# 
   213  021D                     	;# 
   214  021E                     	;# 
   215  021F                     	;# 
   216  028C                     	;# 
   217  028D                     	;# 
   218  0291                     	;# 
   219  0291                     	;# 
   220  0292                     	;# 
   221  0293                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029D                     	;# 
   227  029E                     	;# 
   228  029F                     	;# 
   229  030C                     	;# 
   230  030D                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0318                     	;# 
   236  0318                     	;# 
   237  0319                     	;# 
   238  031A                     	;# 
   239  031C                     	;# 
   240  031C                     	;# 
   241  031D                     	;# 
   242  031E                     	;# 
   243  038C                     	;# 
   244  038D                     	;# 
   245  0394                     	;# 
   246  0395                     	;# 
   247  0396                     	;# 
   248  040C                     	;# 
   249  040D                     	;# 
   250  0411                     	;# 
   251  0411                     	;# 
   252  0412                     	;# 
   253  0413                     	;# 
   254  0414                     	;# 
   255  0415                     	;# 
   256  0416                     	;# 
   257  0417                     	;# 
   258  0418                     	;# 
   259  0418                     	;# 
   260  0419                     	;# 
   261  041A                     	;# 
   262  041B                     	;# 
   263  041C                     	;# 
   264  041D                     	;# 
   265  041E                     	;# 
   266  048D                     	;# 
   267  0491                     	;# 
   268  0491                     	;# 
   269  0492                     	;# 
   270  0492                     	;# 
   271  0493                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0494                     	;# 
   275  0494                     	;# 
   276  0495                     	;# 
   277  0495                     	;# 
   278  0496                     	;# 
   279  0496                     	;# 
   280  0497                     	;# 
   281  0497                     	;# 
   282  0595                     	;# 
   283  0596                     	;# 
   284  0597                     	;# 
   285  059C                     	;# 
   286  059D                     	;# 
   287  059E                     	;# 
   288  0611                     	;# 
   289  0611                     	;# 
   290  0612                     	;# 
   291  0613                     	;# 
   292  0614                     	;# 
   293  0614                     	;# 
   294  0615                     	;# 
   295  0616                     	;# 
   296  0617                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  061A                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061D                     	;# 
   305  061D                     	;# 
   306  061E                     	;# 
   307  061F                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  000F                     	;# 
   335  0010                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009B                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0110                     	;# 
   373  0116                     	;# 
   374  0117                     	;# 
   375  011D                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  018F                     	;# 
   379  0190                     	;# 
   380  0191                     	;# 
   381  0191                     	;# 
   382  0192                     	;# 
   383  0193                     	;# 
   384  0193                     	;# 
   385  0194                     	;# 
   386  0195                     	;# 
   387  0196                     	;# 
   388  0197                     	;# 
   389  0199                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  019A                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019C                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019E                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019F                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  020D                     	;# 
   413  020F                     	;# 
   414  0210                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0219                     	;# 
   431  021A                     	;# 
   432  021B                     	;# 
   433  021C                     	;# 
   434  021D                     	;# 
   435  021E                     	;# 
   436  021F                     	;# 
   437  028C                     	;# 
   438  028D                     	;# 
   439  0291                     	;# 
   440  0291                     	;# 
   441  0292                     	;# 
   442  0293                     	;# 
   443  0298                     	;# 
   444  0298                     	;# 
   445  0299                     	;# 
   446  029A                     	;# 
   447  029D                     	;# 
   448  029E                     	;# 
   449  029F                     	;# 
   450  030C                     	;# 
   451  030D                     	;# 
   452  0311                     	;# 
   453  0311                     	;# 
   454  0312                     	;# 
   455  0313                     	;# 
   456  0318                     	;# 
   457  0318                     	;# 
   458  0319                     	;# 
   459  031A                     	;# 
   460  031C                     	;# 
   461  031C                     	;# 
   462  031D                     	;# 
   463  031E                     	;# 
   464  038C                     	;# 
   465  038D                     	;# 
   466  0394                     	;# 
   467  0395                     	;# 
   468  0396                     	;# 
   469  040C                     	;# 
   470  040D                     	;# 
   471  0411                     	;# 
   472  0411                     	;# 
   473  0412                     	;# 
   474  0413                     	;# 
   475  0414                     	;# 
   476  0415                     	;# 
   477  0416                     	;# 
   478  0417                     	;# 
   479  0418                     	;# 
   480  0418                     	;# 
   481  0419                     	;# 
   482  041A                     	;# 
   483  041B                     	;# 
   484  041C                     	;# 
   485  041D                     	;# 
   486  041E                     	;# 
   487  048D                     	;# 
   488  0491                     	;# 
   489  0491                     	;# 
   490  0492                     	;# 
   491  0492                     	;# 
   492  0493                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0494                     	;# 
   496  0494                     	;# 
   497  0495                     	;# 
   498  0495                     	;# 
   499  0496                     	;# 
   500  0496                     	;# 
   501  0497                     	;# 
   502  0497                     	;# 
   503  0595                     	;# 
   504  0596                     	;# 
   505  0597                     	;# 
   506  059C                     	;# 
   507  059D                     	;# 
   508  059E                     	;# 
   509  0611                     	;# 
   510  0611                     	;# 
   511  0612                     	;# 
   512  0613                     	;# 
   513  0614                     	;# 
   514  0614                     	;# 
   515  0615                     	;# 
   516  0616                     	;# 
   517  0617                     	;# 
   518  0617                     	;# 
   519  0618                     	;# 
   520  0619                     	;# 
   521  061A                     	;# 
   522  061A                     	;# 
   523  061B                     	;# 
   524  061C                     	;# 
   525  061D                     	;# 
   526  061D                     	;# 
   527  061E                     	;# 
   528  061F                     	;# 
   529  0FE4                     	;# 
   530  0FE5                     	;# 
   531  0FE6                     	;# 
   532  0FE7                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000F                     	;# 
   556  0010                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0013                     	;# 
   560  0014                     	;# 
   561  0015                     	;# 
   562  0016                     	;# 
   563  0016                     	;# 
   564  0017                     	;# 
   565  0018                     	;# 
   566  0019                     	;# 
   567  001A                     	;# 
   568  001B                     	;# 
   569  001C                     	;# 
   570  008C                     	;# 
   571  008D                     	;# 
   572  008E                     	;# 
   573  008F                     	;# 
   574  0090                     	;# 
   575  0091                     	;# 
   576  0092                     	;# 
   577  0093                     	;# 
   578  0094                     	;# 
   579  0095                     	;# 
   580  0096                     	;# 
   581  0097                     	;# 
   582  0099                     	;# 
   583  009A                     	;# 
   584  009B                     	;# 
   585  009B                     	;# 
   586  009C                     	;# 
   587  009D                     	;# 
   588  009E                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0110                     	;# 
   594  0116                     	;# 
   595  0117                     	;# 
   596  011D                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  018F                     	;# 
   600  0190                     	;# 
   601  0191                     	;# 
   602  0191                     	;# 
   603  0192                     	;# 
   604  0193                     	;# 
   605  0193                     	;# 
   606  0194                     	;# 
   607  0195                     	;# 
   608  0196                     	;# 
   609  0197                     	;# 
   610  0199                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  019A                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019C                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019D                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019E                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019F                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  020D                     	;# 
   634  020F                     	;# 
   635  0210                     	;# 
   636  0211                     	;# 
   637  0211                     	;# 
   638  0212                     	;# 
   639  0212                     	;# 
   640  0213                     	;# 
   641  0213                     	;# 
   642  0214                     	;# 
   643  0214                     	;# 
   644  0215                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0216                     	;# 
   648  0216                     	;# 
   649  0217                     	;# 
   650  0217                     	;# 
   651  0219                     	;# 
   652  021A                     	;# 
   653  021B                     	;# 
   654  021C                     	;# 
   655  021D                     	;# 
   656  021E                     	;# 
   657  021F                     	;# 
   658  028C                     	;# 
   659  028D                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0298                     	;# 
   665  0298                     	;# 
   666  0299                     	;# 
   667  029A                     	;# 
   668  029D                     	;# 
   669  029E                     	;# 
   670  029F                     	;# 
   671  030C                     	;# 
   672  030D                     	;# 
   673  0311                     	;# 
   674  0311                     	;# 
   675  0312                     	;# 
   676  0313                     	;# 
   677  0318                     	;# 
   678  0318                     	;# 
   679  0319                     	;# 
   680  031A                     	;# 
   681  031C                     	;# 
   682  031C                     	;# 
   683  031D                     	;# 
   684  031E                     	;# 
   685  038C                     	;# 
   686  038D                     	;# 
   687  0394                     	;# 
   688  0395                     	;# 
   689  0396                     	;# 
   690  040C                     	;# 
   691  040D                     	;# 
   692  0411                     	;# 
   693  0411                     	;# 
   694  0412                     	;# 
   695  0413                     	;# 
   696  0414                     	;# 
   697  0415                     	;# 
   698  0416                     	;# 
   699  0417                     	;# 
   700  0418                     	;# 
   701  0418                     	;# 
   702  0419                     	;# 
   703  041A                     	;# 
   704  041B                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  048D                     	;# 
   709  0491                     	;# 
   710  0491                     	;# 
   711  0492                     	;# 
   712  0492                     	;# 
   713  0493                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0494                     	;# 
   717  0494                     	;# 
   718  0495                     	;# 
   719  0495                     	;# 
   720  0496                     	;# 
   721  0496                     	;# 
   722  0497                     	;# 
   723  0497                     	;# 
   724  0595                     	;# 
   725  0596                     	;# 
   726  0597                     	;# 
   727  059C                     	;# 
   728  059D                     	;# 
   729  059E                     	;# 
   730  0611                     	;# 
   731  0611                     	;# 
   732  0612                     	;# 
   733  0613                     	;# 
   734  0614                     	;# 
   735  0614                     	;# 
   736  0615                     	;# 
   737  0616                     	;# 
   738  0617                     	;# 
   739  0617                     	;# 
   740  0618                     	;# 
   741  0619                     	;# 
   742  061A                     	;# 
   743  061A                     	;# 
   744  061B                     	;# 
   745  061C                     	;# 
   746  061D                     	;# 
   747  061D                     	;# 
   748  061E                     	;# 
   749  061F                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  000F                     	;# 
   777  0010                     	;# 
   778  0011                     	;# 
   779  0012                     	;# 
   780  0013                     	;# 
   781  0014                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0016                     	;# 
   785  0017                     	;# 
   786  0018                     	;# 
   787  0019                     	;# 
   788  001A                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  008F                     	;# 
   795  0090                     	;# 
   796  0091                     	;# 
   797  0092                     	;# 
   798  0093                     	;# 
   799  0094                     	;# 
   800  0095                     	;# 
   801  0096                     	;# 
   802  0097                     	;# 
   803  0099                     	;# 
   804  009A                     	;# 
   805  009B                     	;# 
   806  009B                     	;# 
   807  009C                     	;# 
   808  009D                     	;# 
   809  009E                     	;# 
   810  010C                     	;# 
   811  010D                     	;# 
   812  010E                     	;# 
   813  010F                     	;# 
   814  0110                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  011D                     	;# 
   818  018C                     	;# 
   819  018D                     	;# 
   820  018F                     	;# 
   821  0190                     	;# 
   822  0191                     	;# 
   823  0191                     	;# 
   824  0192                     	;# 
   825  0193                     	;# 
   826  0193                     	;# 
   827  0194                     	;# 
   828  0195                     	;# 
   829  0196                     	;# 
   830  0197                     	;# 
   831  0199                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019C                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019E                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019F                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  020D                     	;# 
   855  020F                     	;# 
   856  0210                     	;# 
   857  0211                     	;# 
   858  0211                     	;# 
   859  0212                     	;# 
   860  0212                     	;# 
   861  0213                     	;# 
   862  0213                     	;# 
   863  0214                     	;# 
   864  0214                     	;# 
   865  0215                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0216                     	;# 
   869  0216                     	;# 
   870  0217                     	;# 
   871  0217                     	;# 
   872  0219                     	;# 
   873  021A                     	;# 
   874  021B                     	;# 
   875  021C                     	;# 
   876  021D                     	;# 
   877  021E                     	;# 
   878  021F                     	;# 
   879  028C                     	;# 
   880  028D                     	;# 
   881  0291                     	;# 
   882  0291                     	;# 
   883  0292                     	;# 
   884  0293                     	;# 
   885  0298                     	;# 
   886  0298                     	;# 
   887  0299                     	;# 
   888  029A                     	;# 
   889  029D                     	;# 
   890  029E                     	;# 
   891  029F                     	;# 
   892  030C                     	;# 
   893  030D                     	;# 
   894  0311                     	;# 
   895  0311                     	;# 
   896  0312                     	;# 
   897  0313                     	;# 
   898  0318                     	;# 
   899  0318                     	;# 
   900  0319                     	;# 
   901  031A                     	;# 
   902  031C                     	;# 
   903  031C                     	;# 
   904  031D                     	;# 
   905  031E                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  040C                     	;# 
   912  040D                     	;# 
   913  0411                     	;# 
   914  0411                     	;# 
   915  0412                     	;# 
   916  0413                     	;# 
   917  0414                     	;# 
   918  0415                     	;# 
   919  0416                     	;# 
   920  0417                     	;# 
   921  0418                     	;# 
   922  0418                     	;# 
   923  0419                     	;# 
   924  041A                     	;# 
   925  041B                     	;# 
   926  041C                     	;# 
   927  041D                     	;# 
   928  041E                     	;# 
   929  048D                     	;# 
   930  0491                     	;# 
   931  0491                     	;# 
   932  0492                     	;# 
   933  0492                     	;# 
   934  0493                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0494                     	;# 
   938  0494                     	;# 
   939  0495                     	;# 
   940  0495                     	;# 
   941  0496                     	;# 
   942  0496                     	;# 
   943  0497                     	;# 
   944  0497                     	;# 
   945  0595                     	;# 
   946  0596                     	;# 
   947  0597                     	;# 
   948  059C                     	;# 
   949  059D                     	;# 
   950  059E                     	;# 
   951  0611                     	;# 
   952  0611                     	;# 
   953  0612                     	;# 
   954  0613                     	;# 
   955  0614                     	;# 
   956  0614                     	;# 
   957  0615                     	;# 
   958  0616                     	;# 
   959  0617                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061D                     	;# 
   968  061D                     	;# 
   969  061E                     	;# 
   970  061F                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  000F                     	;# 
   998  0010                     	;# 
   999  0011                     	;# 
  1000  0012                     	;# 
  1001  0013                     	;# 
  1002  0014                     	;# 
  1003  0015                     	;# 
  1004  0016                     	;# 
  1005  0016                     	;# 
  1006  0017                     	;# 
  1007  0018                     	;# 
  1008  0019                     	;# 
  1009  001A                     	;# 
  1010  001B                     	;# 
  1011  001C                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0094                     	;# 
  1021  0095                     	;# 
  1022  0096                     	;# 
  1023  0097                     	;# 
  1024  0099                     	;# 
  1025  009A                     	;# 
  1026  009B                     	;# 
  1027  009B                     	;# 
  1028  009C                     	;# 
  1029  009D                     	;# 
  1030  009E                     	;# 
  1031  010C                     	;# 
  1032  010D                     	;# 
  1033  010E                     	;# 
  1034  010F                     	;# 
  1035  0110                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  011D                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018F                     	;# 
  1042  0190                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  0199                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  019A                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019C                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019D                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019E                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019F                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  020D                     	;# 
  1076  020F                     	;# 
  1077  0210                     	;# 
  1078  0211                     	;# 
  1079  0211                     	;# 
  1080  0212                     	;# 
  1081  0212                     	;# 
  1082  0213                     	;# 
  1083  0213                     	;# 
  1084  0214                     	;# 
  1085  0214                     	;# 
  1086  0215                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0216                     	;# 
  1090  0216                     	;# 
  1091  0217                     	;# 
  1092  0217                     	;# 
  1093  0219                     	;# 
  1094  021A                     	;# 
  1095  021B                     	;# 
  1096  021C                     	;# 
  1097  021D                     	;# 
  1098  021E                     	;# 
  1099  021F                     	;# 
  1100  028C                     	;# 
  1101  028D                     	;# 
  1102  0291                     	;# 
  1103  0291                     	;# 
  1104  0292                     	;# 
  1105  0293                     	;# 
  1106  0298                     	;# 
  1107  0298                     	;# 
  1108  0299                     	;# 
  1109  029A                     	;# 
  1110  029D                     	;# 
  1111  029E                     	;# 
  1112  029F                     	;# 
  1113  030C                     	;# 
  1114  030D                     	;# 
  1115  0311                     	;# 
  1116  0311                     	;# 
  1117  0312                     	;# 
  1118  0313                     	;# 
  1119  0318                     	;# 
  1120  0318                     	;# 
  1121  0319                     	;# 
  1122  031A                     	;# 
  1123  031C                     	;# 
  1124  031C                     	;# 
  1125  031D                     	;# 
  1126  031E                     	;# 
  1127  038C                     	;# 
  1128  038D                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  040C                     	;# 
  1133  040D                     	;# 
  1134  0411                     	;# 
  1135  0411                     	;# 
  1136  0412                     	;# 
  1137  0413                     	;# 
  1138  0414                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  0418                     	;# 
  1143  0418                     	;# 
  1144  0419                     	;# 
  1145  041A                     	;# 
  1146  041B                     	;# 
  1147  041C                     	;# 
  1148  041D                     	;# 
  1149  041E                     	;# 
  1150  048D                     	;# 
  1151  0491                     	;# 
  1152  0491                     	;# 
  1153  0492                     	;# 
  1154  0492                     	;# 
  1155  0493                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0494                     	;# 
  1159  0494                     	;# 
  1160  0495                     	;# 
  1161  0495                     	;# 
  1162  0496                     	;# 
  1163  0496                     	;# 
  1164  0497                     	;# 
  1165  0497                     	;# 
  1166  0595                     	;# 
  1167  0596                     	;# 
  1168  0597                     	;# 
  1169  059C                     	;# 
  1170  059D                     	;# 
  1171  059E                     	;# 
  1172  0611                     	;# 
  1173  0611                     	;# 
  1174  0612                     	;# 
  1175  0613                     	;# 
  1176  0614                     	;# 
  1177  0614                     	;# 
  1178  0615                     	;# 
  1179  0616                     	;# 
  1180  0617                     	;# 
  1181  0617                     	;# 
  1182  0618                     	;# 
  1183  0619                     	;# 
  1184  061A                     	;# 
  1185  061A                     	;# 
  1186  061B                     	;# 
  1187  061C                     	;# 
  1188  061D                     	;# 
  1189  061D                     	;# 
  1190  061E                     	;# 
  1191  061F                     	;# 
  1192  0FE4                     	;# 
  1193  0FE5                     	;# 
  1194  0FE6                     	;# 
  1195  0FE7                     	;# 
  1196  0FE8                     	;# 
  1197  0FE9                     	;# 
  1198  0FEA                     	;# 
  1199  0FEB                     	;# 
  1200  0FED                     	;# 
  1201  0FEE                     	;# 
  1202  0FEF                     	;# 
  1203  0000                     	;# 
  1204  0001                     	;# 
  1205  0002                     	;# 
  1206  0003                     	;# 
  1207  0004                     	;# 
  1208  0005                     	;# 
  1209  0006                     	;# 
  1210  0007                     	;# 
  1211  0008                     	;# 
  1212  0009                     	;# 
  1213  000A                     	;# 
  1214  000B                     	;# 
  1215  000C                     	;# 
  1216  000D                     	;# 
  1217  000E                     	;# 
  1218  000F                     	;# 
  1219  0010                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0013                     	;# 
  1223  0014                     	;# 
  1224  0015                     	;# 
  1225  0016                     	;# 
  1226  0016                     	;# 
  1227  0017                     	;# 
  1228  0018                     	;# 
  1229  0019                     	;# 
  1230  001A                     	;# 
  1231  001B                     	;# 
  1232  001C                     	;# 
  1233  008C                     	;# 
  1234  008D                     	;# 
  1235  008E                     	;# 
  1236  008F                     	;# 
  1237  0090                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0099                     	;# 
  1246  009A                     	;# 
  1247  009B                     	;# 
  1248  009B                     	;# 
  1249  009C                     	;# 
  1250  009D                     	;# 
  1251  009E                     	;# 
  1252  010C                     	;# 
  1253  010D                     	;# 
  1254  010E                     	;# 
  1255  010F                     	;# 
  1256  0110                     	;# 
  1257  0116                     	;# 
  1258  0117                     	;# 
  1259  011D                     	;# 
  1260  018C                     	;# 
  1261  018D                     	;# 
  1262  018F                     	;# 
  1263  0190                     	;# 
  1264  0191                     	;# 
  1265  0191                     	;# 
  1266  0192                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0197                     	;# 
  1273  0199                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  019A                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019C                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019D                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019F                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  020D                     	;# 
  1297  020F                     	;# 
  1298  0210                     	;# 
  1299  0211                     	;# 
  1300  0211                     	;# 
  1301  0212                     	;# 
  1302  0212                     	;# 
  1303  0213                     	;# 
  1304  0213                     	;# 
  1305  0214                     	;# 
  1306  0214                     	;# 
  1307  0215                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0216                     	;# 
  1311  0216                     	;# 
  1312  0217                     	;# 
  1313  0217                     	;# 
  1314  0219                     	;# 
  1315  021A                     	;# 
  1316  021B                     	;# 
  1317  021C                     	;# 
  1318  021D                     	;# 
  1319  021E                     	;# 
  1320  021F                     	;# 
  1321  028C                     	;# 
  1322  028D                     	;# 
  1323  0291                     	;# 
  1324  0291                     	;# 
  1325  0292                     	;# 
  1326  0293                     	;# 
  1327  0298                     	;# 
  1328  0298                     	;# 
  1329  0299                     	;# 
  1330  029A                     	;# 
  1331  029D                     	;# 
  1332  029E                     	;# 
  1333  029F                     	;# 
  1334  030C                     	;# 
  1335  030D                     	;# 
  1336  0311                     	;# 
  1337  0311                     	;# 
  1338  0312                     	;# 
  1339  0313                     	;# 
  1340  0318                     	;# 
  1341  0318                     	;# 
  1342  0319                     	;# 
  1343  031A                     	;# 
  1344  031C                     	;# 
  1345  031C                     	;# 
  1346  031D                     	;# 
  1347  031E                     	;# 
  1348  038C                     	;# 
  1349  038D                     	;# 
  1350  0394                     	;# 
  1351  0395                     	;# 
  1352  0396                     	;# 
  1353  040C                     	;# 
  1354  040D                     	;# 
  1355  0411                     	;# 
  1356  0411                     	;# 
  1357  0412                     	;# 
  1358  0413                     	;# 
  1359  0414                     	;# 
  1360  0415                     	;# 
  1361  0416                     	;# 
  1362  0417                     	;# 
  1363  0418                     	;# 
  1364  0418                     	;# 
  1365  0419                     	;# 
  1366  041A                     	;# 
  1367  041B                     	;# 
  1368  041C                     	;# 
  1369  041D                     	;# 
  1370  041E                     	;# 
  1371  048D                     	;# 
  1372  0491                     	;# 
  1373  0491                     	;# 
  1374  0492                     	;# 
  1375  0492                     	;# 
  1376  0493                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0494                     	;# 
  1380  0494                     	;# 
  1381  0495                     	;# 
  1382  0495                     	;# 
  1383  0496                     	;# 
  1384  0496                     	;# 
  1385  0497                     	;# 
  1386  0497                     	;# 
  1387  0595                     	;# 
  1388  0596                     	;# 
  1389  0597                     	;# 
  1390  059C                     	;# 
  1391  059D                     	;# 
  1392  059E                     	;# 
  1393  0611                     	;# 
  1394  0611                     	;# 
  1395  0612                     	;# 
  1396  0613                     	;# 
  1397  0614                     	;# 
  1398  0614                     	;# 
  1399  0615                     	;# 
  1400  0616                     	;# 
  1401  0617                     	;# 
  1402  0617                     	;# 
  1403  0618                     	;# 
  1404  0619                     	;# 
  1405  061A                     	;# 
  1406  061A                     	;# 
  1407  061B                     	;# 
  1408  061C                     	;# 
  1409  061D                     	;# 
  1410  061D                     	;# 
  1411  061E                     	;# 
  1412  061F                     	;# 
  1413  0FE4                     	;# 
  1414  0FE5                     	;# 
  1415  0FE6                     	;# 
  1416  0FE7                     	;# 
  1417  0FE8                     	;# 
  1418  0FE9                     	;# 
  1419  0FEA                     	;# 
  1420  0FEB                     	;# 
  1421  0FED                     	;# 
  1422  0FEE                     	;# 
  1423  0FEF                     	;# 
  1424  0000                     	;# 
  1425  0001                     	;# 
  1426  0002                     	;# 
  1427  0003                     	;# 
  1428  0004                     	;# 
  1429  0005                     	;# 
  1430  0006                     	;# 
  1431  0007                     	;# 
  1432  0008                     	;# 
  1433  0009                     	;# 
  1434  000A                     	;# 
  1435  000B                     	;# 
  1436  000C                     	;# 
  1437  000D                     	;# 
  1438  000E                     	;# 
  1439  000F                     	;# 
  1440  0010                     	;# 
  1441  0011                     	;# 
  1442  0012                     	;# 
  1443  0013                     	;# 
  1444  0014                     	;# 
  1445  0015                     	;# 
  1446  0016                     	;# 
  1447  0016                     	;# 
  1448  0017                     	;# 
  1449  0018                     	;# 
  1450  0019                     	;# 
  1451  001A                     	;# 
  1452  001B                     	;# 
  1453  001C                     	;# 
  1454  008C                     	;# 
  1455  008D                     	;# 
  1456  008E                     	;# 
  1457  008F                     	;# 
  1458  0090                     	;# 
  1459  0091                     	;# 
  1460  0092                     	;# 
  1461  0093                     	;# 
  1462  0094                     	;# 
  1463  0095                     	;# 
  1464  0096                     	;# 
  1465  0097                     	;# 
  1466  0099                     	;# 
  1467  009A                     	;# 
  1468  009B                     	;# 
  1469  009B                     	;# 
  1470  009C                     	;# 
  1471  009D                     	;# 
  1472  009E                     	;# 
  1473  010C                     	;# 
  1474  010D                     	;# 
  1475  010E                     	;# 
  1476  010F                     	;# 
  1477  0110                     	;# 
  1478  0116                     	;# 
  1479  0117                     	;# 
  1480  011D                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018F                     	;# 
  1484  0190                     	;# 
  1485  0191                     	;# 
  1486  0191                     	;# 
  1487  0192                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0197                     	;# 
  1494  0199                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  019A                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019C                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019D                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019F                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  020D                     	;# 
  1518  020F                     	;# 
  1519  0210                     	;# 
  1520  0211                     	;# 
  1521  0211                     	;# 
  1522  0212                     	;# 
  1523  0212                     	;# 
  1524  0213                     	;# 
  1525  0213                     	;# 
  1526  0214                     	;# 
  1527  0214                     	;# 
  1528  0215                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0216                     	;# 
  1532  0216                     	;# 
  1533  0217                     	;# 
  1534  0217                     	;# 
  1535  0219                     	;# 
  1536  021A                     	;# 
  1537  021B                     	;# 
  1538  021C                     	;# 
  1539  021D                     	;# 
  1540  021E                     	;# 
  1541  021F                     	;# 
  1542  028C                     	;# 
  1543  028D                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0298                     	;# 
  1549  0298                     	;# 
  1550  0299                     	;# 
  1551  029A                     	;# 
  1552  029D                     	;# 
  1553  029E                     	;# 
  1554  029F                     	;# 
  1555  030C                     	;# 
  1556  030D                     	;# 
  1557  0311                     	;# 
  1558  0311                     	;# 
  1559  0312                     	;# 
  1560  0313                     	;# 
  1561  0318                     	;# 
  1562  0318                     	;# 
  1563  0319                     	;# 
  1564  031A                     	;# 
  1565  031C                     	;# 
  1566  031C                     	;# 
  1567  031D                     	;# 
  1568  031E                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  0394                     	;# 
  1572  0395                     	;# 
  1573  0396                     	;# 
  1574  040C                     	;# 
  1575  040D                     	;# 
  1576  0411                     	;# 
  1577  0411                     	;# 
  1578  0412                     	;# 
  1579  0413                     	;# 
  1580  0414                     	;# 
  1581  0415                     	;# 
  1582  0416                     	;# 
  1583  0417                     	;# 
  1584  0418                     	;# 
  1585  0418                     	;# 
  1586  0419                     	;# 
  1587  041A                     	;# 
  1588  041B                     	;# 
  1589  041C                     	;# 
  1590  041D                     	;# 
  1591  041E                     	;# 
  1592  048D                     	;# 
  1593  0491                     	;# 
  1594  0491                     	;# 
  1595  0492                     	;# 
  1596  0492                     	;# 
  1597  0493                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0494                     	;# 
  1601  0494                     	;# 
  1602  0495                     	;# 
  1603  0495                     	;# 
  1604  0496                     	;# 
  1605  0496                     	;# 
  1606  0497                     	;# 
  1607  0497                     	;# 
  1608  0595                     	;# 
  1609  0596                     	;# 
  1610  0597                     	;# 
  1611  059C                     	;# 
  1612  059D                     	;# 
  1613  059E                     	;# 
  1614  0611                     	;# 
  1615  0611                     	;# 
  1616  0612                     	;# 
  1617  0613                     	;# 
  1618  0614                     	;# 
  1619  0614                     	;# 
  1620  0615                     	;# 
  1621  0616                     	;# 
  1622  0617                     	;# 
  1623  0617                     	;# 
  1624  0618                     	;# 
  1625  0619                     	;# 
  1626  061A                     	;# 
  1627  061A                     	;# 
  1628  061B                     	;# 
  1629  061C                     	;# 
  1630  061D                     	;# 
  1631  061D                     	;# 
  1632  061E                     	;# 
  1633  061F                     	;# 
  1634  0FE4                     	;# 
  1635  0FE5                     	;# 
  1636  0FE6                     	;# 
  1637  0FE7                     	;# 
  1638  0FE8                     	;# 
  1639  0FE9                     	;# 
  1640  0FEA                     	;# 
  1641  0FEB                     	;# 
  1642  0FED                     	;# 
  1643  0FEE                     	;# 
  1644  0FEF                     	;# 
  1645  0000                     	;# 
  1646  0001                     	;# 
  1647  0002                     	;# 
  1648  0003                     	;# 
  1649  0004                     	;# 
  1650  0005                     	;# 
  1651  0006                     	;# 
  1652  0007                     	;# 
  1653  0008                     	;# 
  1654  0009                     	;# 
  1655  000A                     	;# 
  1656  000B                     	;# 
  1657  000C                     	;# 
  1658  000D                     	;# 
  1659  000E                     	;# 
  1660  000F                     	;# 
  1661  0010                     	;# 
  1662  0011                     	;# 
  1663  0012                     	;# 
  1664  0013                     	;# 
  1665  0014                     	;# 
  1666  0015                     	;# 
  1667  0016                     	;# 
  1668  0016                     	;# 
  1669  0017                     	;# 
  1670  0018                     	;# 
  1671  0019                     	;# 
  1672  001A                     	;# 
  1673  001B                     	;# 
  1674  001C                     	;# 
  1675  008C                     	;# 
  1676  008D                     	;# 
  1677  008E                     	;# 
  1678  008F                     	;# 
  1679  0090                     	;# 
  1680  0091                     	;# 
  1681  0092                     	;# 
  1682  0093                     	;# 
  1683  0094                     	;# 
  1684  0095                     	;# 
  1685  0096                     	;# 
  1686  0097                     	;# 
  1687  0099                     	;# 
  1688  009A                     	;# 
  1689  009B                     	;# 
  1690  009B                     	;# 
  1691  009C                     	;# 
  1692  009D                     	;# 
  1693  009E                     	;# 
  1694  010C                     	;# 
  1695  010D                     	;# 
  1696  010E                     	;# 
  1697  010F                     	;# 
  1698  0110                     	;# 
  1699  0116                     	;# 
  1700  0117                     	;# 
  1701  011D                     	;# 
  1702  018C                     	;# 
  1703  018D                     	;# 
  1704  018F                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0193                     	;# 
  1710  0193                     	;# 
  1711  0194                     	;# 
  1712  0195                     	;# 
  1713  0196                     	;# 
  1714  0197                     	;# 
  1715  0199                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  019A                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019C                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019D                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019F                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  020D                     	;# 
  1739  020F                     	;# 
  1740  0210                     	;# 
  1741  0211                     	;# 
  1742  0211                     	;# 
  1743  0212                     	;# 
  1744  0212                     	;# 
  1745  0213                     	;# 
  1746  0213                     	;# 
  1747  0214                     	;# 
  1748  0214                     	;# 
  1749  0215                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0216                     	;# 
  1753  0216                     	;# 
  1754  0217                     	;# 
  1755  0217                     	;# 
  1756  0219                     	;# 
  1757  021A                     	;# 
  1758  021B                     	;# 
  1759  021C                     	;# 
  1760  021D                     	;# 
  1761  021E                     	;# 
  1762  021F                     	;# 
  1763  028C                     	;# 
  1764  028D                     	;# 
  1765  0291                     	;# 
  1766  0291                     	;# 
  1767  0292                     	;# 
  1768  0293                     	;# 
  1769  0298                     	;# 
  1770  0298                     	;# 
  1771  0299                     	;# 
  1772  029A                     	;# 
  1773  029D                     	;# 
  1774  029E                     	;# 
  1775  029F                     	;# 
  1776  030C                     	;# 
  1777  030D                     	;# 
  1778  0311                     	;# 
  1779  0311                     	;# 
  1780  0312                     	;# 
  1781  0313                     	;# 
  1782  0318                     	;# 
  1783  0318                     	;# 
  1784  0319                     	;# 
  1785  031A                     	;# 
  1786  031C                     	;# 
  1787  031C                     	;# 
  1788  031D                     	;# 
  1789  031E                     	;# 
  1790  038C                     	;# 
  1791  038D                     	;# 
  1792  0394                     	;# 
  1793  0395                     	;# 
  1794  0396                     	;# 
  1795  040C                     	;# 
  1796  040D                     	;# 
  1797  0411                     	;# 
  1798  0411                     	;# 
  1799  0412                     	;# 
  1800  0413                     	;# 
  1801  0414                     	;# 
  1802  0415                     	;# 
  1803  0416                     	;# 
  1804  0417                     	;# 
  1805  0418                     	;# 
  1806  0418                     	;# 
  1807  0419                     	;# 
  1808  041A                     	;# 
  1809  041B                     	;# 
  1810  041C                     	;# 
  1811  041D                     	;# 
  1812  041E                     	;# 
  1813  048D                     	;# 
  1814  0491                     	;# 
  1815  0491                     	;# 
  1816  0492                     	;# 
  1817  0492                     	;# 
  1818  0493                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0494                     	;# 
  1822  0494                     	;# 
  1823  0495                     	;# 
  1824  0495                     	;# 
  1825  0496                     	;# 
  1826  0496                     	;# 
  1827  0497                     	;# 
  1828  0497                     	;# 
  1829  0595                     	;# 
  1830  0596                     	;# 
  1831  0597                     	;# 
  1832  059C                     	;# 
  1833  059D                     	;# 
  1834  059E                     	;# 
  1835  0611                     	;# 
  1836  0611                     	;# 
  1837  0612                     	;# 
  1838  0613                     	;# 
  1839  0614                     	;# 
  1840  0614                     	;# 
  1841  0615                     	;# 
  1842  0616                     	;# 
  1843  0617                     	;# 
  1844  0617                     	;# 
  1845  0618                     	;# 
  1846  0619                     	;# 
  1847  061A                     	;# 
  1848  061A                     	;# 
  1849  061B                     	;# 
  1850  061C                     	;# 
  1851  061D                     	;# 
  1852  061D                     	;# 
  1853  061E                     	;# 
  1854  061F                     	;# 
  1855  0FE4                     	;# 
  1856  0FE5                     	;# 
  1857  0FE6                     	;# 
  1858  0FE7                     	;# 
  1859  0FE8                     	;# 
  1860  0FE9                     	;# 
  1861  0FEA                     	;# 
  1862  0FEB                     	;# 
  1863  0FED                     	;# 
  1864  0FEE                     	;# 
  1865  0FEF                     	;# 
  1866  0000                     	;# 
  1867  0001                     	;# 
  1868  0002                     	;# 
  1869  0003                     	;# 
  1870  0004                     	;# 
  1871  0005                     	;# 
  1872  0006                     	;# 
  1873  0007                     	;# 
  1874  0008                     	;# 
  1875  0009                     	;# 
  1876  000A                     	;# 
  1877  000B                     	;# 
  1878  000C                     	;# 
  1879  000D                     	;# 
  1880  000E                     	;# 
  1881  000F                     	;# 
  1882  0010                     	;# 
  1883  0011                     	;# 
  1884  0012                     	;# 
  1885  0013                     	;# 
  1886  0014                     	;# 
  1887  0015                     	;# 
  1888  0016                     	;# 
  1889  0016                     	;# 
  1890  0017                     	;# 
  1891  0018                     	;# 
  1892  0019                     	;# 
  1893  001A                     	;# 
  1894  001B                     	;# 
  1895  001C                     	;# 
  1896  008C                     	;# 
  1897  008D                     	;# 
  1898  008E                     	;# 
  1899  008F                     	;# 
  1900  0090                     	;# 
  1901  0091                     	;# 
  1902  0092                     	;# 
  1903  0093                     	;# 
  1904  0094                     	;# 
  1905  0095                     	;# 
  1906  0096                     	;# 
  1907  0097                     	;# 
  1908  0099                     	;# 
  1909  009A                     	;# 
  1910  009B                     	;# 
  1911  009B                     	;# 
  1912  009C                     	;# 
  1913  009D                     	;# 
  1914  009E                     	;# 
  1915  010C                     	;# 
  1916  010D                     	;# 
  1917  010E                     	;# 
  1918  010F                     	;# 
  1919  0110                     	;# 
  1920  0116                     	;# 
  1921  0117                     	;# 
  1922  011D                     	;# 
  1923  018C                     	;# 
  1924  018D                     	;# 
  1925  018F                     	;# 
  1926  0190                     	;# 
  1927  0191                     	;# 
  1928  0191                     	;# 
  1929  0192                     	;# 
  1930  0193                     	;# 
  1931  0193                     	;# 
  1932  0194                     	;# 
  1933  0195                     	;# 
  1934  0196                     	;# 
  1935  0197                     	;# 
  1936  0199                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  019A                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019C                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019D                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019F                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  020D                     	;# 
  1960  020F                     	;# 
  1961  0210                     	;# 
  1962  0211                     	;# 
  1963  0211                     	;# 
  1964  0212                     	;# 
  1965  0212                     	;# 
  1966  0213                     	;# 
  1967  0213                     	;# 
  1968  0214                     	;# 
  1969  0214                     	;# 
  1970  0215                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0216                     	;# 
  1974  0216                     	;# 
  1975  0217                     	;# 
  1976  0217                     	;# 
  1977  0219                     	;# 
  1978  021A                     	;# 
  1979  021B                     	;# 
  1980  021C                     	;# 
  1981  021D                     	;# 
  1982  021E                     	;# 
  1983  021F                     	;# 
  1984  028C                     	;# 
  1985  028D                     	;# 
  1986  0291                     	;# 
  1987  0291                     	;# 
  1988  0292                     	;# 
  1989  0293                     	;# 
  1990  0298                     	;# 
  1991  0298                     	;# 
  1992  0299                     	;# 
  1993  029A                     	;# 
  1994  029D                     	;# 
  1995  029E                     	;# 
  1996  029F                     	;# 
  1997  030C                     	;# 
  1998  030D                     	;# 
  1999  0311                     	;# 
  2000  0311                     	;# 
  2001  0312                     	;# 
  2002  0313                     	;# 
  2003  0318                     	;# 
  2004  0318                     	;# 
  2005  0319                     	;# 
  2006  031A                     	;# 
  2007  031C                     	;# 
  2008  031C                     	;# 
  2009  031D                     	;# 
  2010  031E                     	;# 
  2011  038C                     	;# 
  2012  038D                     	;# 
  2013  0394                     	;# 
  2014  0395                     	;# 
  2015  0396                     	;# 
  2016  040C                     	;# 
  2017  040D                     	;# 
  2018  0411                     	;# 
  2019  0411                     	;# 
  2020  0412                     	;# 
  2021  0413                     	;# 
  2022  0414                     	;# 
  2023  0415                     	;# 
  2024  0416                     	;# 
  2025  0417                     	;# 
  2026  0418                     	;# 
  2027  0418                     	;# 
  2028  0419                     	;# 
  2029  041A                     	;# 
  2030  041B                     	;# 
  2031  041C                     	;# 
  2032  041D                     	;# 
  2033  041E                     	;# 
  2034  048D                     	;# 
  2035  0491                     	;# 
  2036  0491                     	;# 
  2037  0492                     	;# 
  2038  0492                     	;# 
  2039  0493                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0494                     	;# 
  2043  0494                     	;# 
  2044  0495                     	;# 
  2045  0495                     	;# 
  2046  0496                     	;# 
  2047  0496                     	;# 
  2048  0497                     	;# 
  2049  0497                     	;# 
  2050  0595                     	;# 
  2051  0596                     	;# 
  2052  0597                     	;# 
  2053  059C                     	;# 
  2054  059D                     	;# 
  2055  059E                     	;# 
  2056  0611                     	;# 
  2057  0611                     	;# 
  2058  0612                     	;# 
  2059  0613                     	;# 
  2060  0614                     	;# 
  2061  0614                     	;# 
  2062  0615                     	;# 
  2063  0616                     	;# 
  2064  0617                     	;# 
  2065  0617                     	;# 
  2066  0618                     	;# 
  2067  0619                     	;# 
  2068  061A                     	;# 
  2069  061A                     	;# 
  2070  061B                     	;# 
  2071  061C                     	;# 
  2072  061D                     	;# 
  2073  061D                     	;# 
  2074  061E                     	;# 
  2075  061F                     	;# 
  2076  0FE4                     	;# 
  2077  0FE5                     	;# 
  2078  0FE6                     	;# 
  2079  0FE7                     	;# 
  2080  0FE8                     	;# 
  2081  0FE9                     	;# 
  2082  0FEA                     	;# 
  2083  0FEB                     	;# 
  2084  0FED                     	;# 
  2085  0FEE                     	;# 
  2086  0FEF                     	;# 
  2087  0000                     	;# 
  2088  0001                     	;# 
  2089  0002                     	;# 
  2090  0003                     	;# 
  2091  0004                     	;# 
  2092  0005                     	;# 
  2093  0006                     	;# 
  2094  0007                     	;# 
  2095  0008                     	;# 
  2096  0009                     	;# 
  2097  000A                     	;# 
  2098  000B                     	;# 
  2099  000C                     	;# 
  2100  000D                     	;# 
  2101  000E                     	;# 
  2102  000F                     	;# 
  2103  0010                     	;# 
  2104  0011                     	;# 
  2105  0012                     	;# 
  2106  0013                     	;# 
  2107  0014                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  008C                     	;# 
  2118  008D                     	;# 
  2119  008E                     	;# 
  2120  008F                     	;# 
  2121  0090                     	;# 
  2122  0091                     	;# 
  2123  0092                     	;# 
  2124  0093                     	;# 
  2125  0094                     	;# 
  2126  0095                     	;# 
  2127  0096                     	;# 
  2128  0097                     	;# 
  2129  0099                     	;# 
  2130  009A                     	;# 
  2131  009B                     	;# 
  2132  009B                     	;# 
  2133  009C                     	;# 
  2134  009D                     	;# 
  2135  009E                     	;# 
  2136  010C                     	;# 
  2137  010D                     	;# 
  2138  010E                     	;# 
  2139  010F                     	;# 
  2140  0110                     	;# 
  2141  0116                     	;# 
  2142  0117                     	;# 
  2143  011D                     	;# 
  2144  018C                     	;# 
  2145  018D                     	;# 
  2146  018F                     	;# 
  2147  0190                     	;# 
  2148  0191                     	;# 
  2149  0191                     	;# 
  2150  0192                     	;# 
  2151  0193                     	;# 
  2152  0193                     	;# 
  2153  0194                     	;# 
  2154  0195                     	;# 
  2155  0196                     	;# 
  2156  0197                     	;# 
  2157  0199                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  019A                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019C                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019D                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019F                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  020D                     	;# 
  2181  020F                     	;# 
  2182  0210                     	;# 
  2183  0211                     	;# 
  2184  0211                     	;# 
  2185  0212                     	;# 
  2186  0212                     	;# 
  2187  0213                     	;# 
  2188  0213                     	;# 
  2189  0214                     	;# 
  2190  0214                     	;# 
  2191  0215                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0216                     	;# 
  2195  0216                     	;# 
  2196  0217                     	;# 
  2197  0217                     	;# 
  2198  0219                     	;# 
  2199  021A                     	;# 
  2200  021B                     	;# 
  2201  021C                     	;# 
  2202  021D                     	;# 
  2203  021E                     	;# 
  2204  021F                     	;# 
  2205  028C                     	;# 
  2206  028D                     	;# 
  2207  0291                     	;# 
  2208  0291                     	;# 
  2209  0292                     	;# 
  2210  0293                     	;# 
  2211  0298                     	;# 
  2212  0298                     	;# 
  2213  0299                     	;# 
  2214  029A                     	;# 
  2215  029D                     	;# 
  2216  029E                     	;# 
  2217  029F                     	;# 
  2218  030C                     	;# 
  2219  030D                     	;# 
  2220  0311                     	;# 
  2221  0311                     	;# 
  2222  0312                     	;# 
  2223  0313                     	;# 
  2224  0318                     	;# 
  2225  0318                     	;# 
  2226  0319                     	;# 
  2227  031A                     	;# 
  2228  031C                     	;# 
  2229  031C                     	;# 
  2230  031D                     	;# 
  2231  031E                     	;# 
  2232  038C                     	;# 
  2233  038D                     	;# 
  2234  0394                     	;# 
  2235  0395                     	;# 
  2236  0396                     	;# 
  2237  040C                     	;# 
  2238  040D                     	;# 
  2239  0411                     	;# 
  2240  0411                     	;# 
  2241  0412                     	;# 
  2242  0413                     	;# 
  2243  0414                     	;# 
  2244  0415                     	;# 
  2245  0416                     	;# 
  2246  0417                     	;# 
  2247  0418                     	;# 
  2248  0418                     	;# 
  2249  0419                     	;# 
  2250  041A                     	;# 
  2251  041B                     	;# 
  2252  041C                     	;# 
  2253  041D                     	;# 
  2254  041E                     	;# 
  2255  048D                     	;# 
  2256  0491                     	;# 
  2257  0491                     	;# 
  2258  0492                     	;# 
  2259  0492                     	;# 
  2260  0493                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0494                     	;# 
  2264  0494                     	;# 
  2265  0495                     	;# 
  2266  0495                     	;# 
  2267  0496                     	;# 
  2268  0496                     	;# 
  2269  0497                     	;# 
  2270  0497                     	;# 
  2271  0595                     	;# 
  2272  0596                     	;# 
  2273  0597                     	;# 
  2274  059C                     	;# 
  2275  059D                     	;# 
  2276  059E                     	;# 
  2277  0611                     	;# 
  2278  0611                     	;# 
  2279  0612                     	;# 
  2280  0613                     	;# 
  2281  0614                     	;# 
  2282  0614                     	;# 
  2283  0615                     	;# 
  2284  0616                     	;# 
  2285  0617                     	;# 
  2286  0617                     	;# 
  2287  0618                     	;# 
  2288  0619                     	;# 
  2289  061A                     	;# 
  2290  061A                     	;# 
  2291  061B                     	;# 
  2292  061C                     	;# 
  2293  061D                     	;# 
  2294  061D                     	;# 
  2295  061E                     	;# 
  2296  061F                     	;# 
  2297  0FE4                     	;# 
  2298  0FE5                     	;# 
  2299  0FE6                     	;# 
  2300  0FE7                     	;# 
  2301  0FE8                     	;# 
  2302  0FE9                     	;# 
  2303  0FEA                     	;# 
  2304  0FEB                     	;# 
  2305  0FED                     	;# 
  2306  0FEE                     	;# 
  2307  0FEF                     	;# 
  2308  0000                     	;# 
  2309  0001                     	;# 
  2310  0002                     	;# 
  2311  0003                     	;# 
  2312  0004                     	;# 
  2313  0005                     	;# 
  2314  0006                     	;# 
  2315  0007                     	;# 
  2316  0008                     	;# 
  2317  0009                     	;# 
  2318  000A                     	;# 
  2319  000B                     	;# 
  2320  000C                     	;# 
  2321  000D                     	;# 
  2322  000E                     	;# 
  2323  000F                     	;# 
  2324  0010                     	;# 
  2325  0011                     	;# 
  2326  0012                     	;# 
  2327  0013                     	;# 
  2328  0014                     	;# 
  2329  0015                     	;# 
  2330  0016                     	;# 
  2331  0016                     	;# 
  2332  0017                     	;# 
  2333  0018                     	;# 
  2334  0019                     	;# 
  2335  001A                     	;# 
  2336  001B                     	;# 
  2337  001C                     	;# 
  2338  008C                     	;# 
  2339  008D                     	;# 
  2340  008E                     	;# 
  2341  008F                     	;# 
  2342  0090                     	;# 
  2343  0091                     	;# 
  2344  0092                     	;# 
  2345  0093                     	;# 
  2346  0094                     	;# 
  2347  0095                     	;# 
  2348  0096                     	;# 
  2349  0097                     	;# 
  2350  0099                     	;# 
  2351  009A                     	;# 
  2352  009B                     	;# 
  2353  009B                     	;# 
  2354  009C                     	;# 
  2355  009D                     	;# 
  2356  009E                     	;# 
  2357  010C                     	;# 
  2358  010D                     	;# 
  2359  010E                     	;# 
  2360  010F                     	;# 
  2361  0110                     	;# 
  2362  0116                     	;# 
  2363  0117                     	;# 
  2364  011D                     	;# 
  2365  018C                     	;# 
  2366  018D                     	;# 
  2367  018F                     	;# 
  2368  0190                     	;# 
  2369  0191                     	;# 
  2370  0191                     	;# 
  2371  0192                     	;# 
  2372  0193                     	;# 
  2373  0193                     	;# 
  2374  0194                     	;# 
  2375  0195                     	;# 
  2376  0196                     	;# 
  2377  0197                     	;# 
  2378  0199                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  019A                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019C                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019D                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019F                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  020D                     	;# 
  2402  020F                     	;# 
  2403  0210                     	;# 
  2404  0211                     	;# 
  2405  0211                     	;# 
  2406  0212                     	;# 
  2407  0212                     	;# 
  2408  0213                     	;# 
  2409  0213                     	;# 
  2410  0214                     	;# 
  2411  0214                     	;# 
  2412  0215                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0216                     	;# 
  2416  0216                     	;# 
  2417  0217                     	;# 
  2418  0217                     	;# 
  2419  0219                     	;# 
  2420  021A                     	;# 
  2421  021B                     	;# 
  2422  021C                     	;# 
  2423  021D                     	;# 
  2424  021E                     	;# 
  2425  021F                     	;# 
  2426  028C                     	;# 
  2427  028D                     	;# 
  2428  0291                     	;# 
  2429  0291                     	;# 
  2430  0292                     	;# 
  2431  0293                     	;# 
  2432  0298                     	;# 
  2433  0298                     	;# 
  2434  0299                     	;# 
  2435  029A                     	;# 
  2436  029D                     	;# 
  2437  029E                     	;# 
  2438  029F                     	;# 
  2439  030C                     	;# 
  2440  030D                     	;# 
  2441  0311                     	;# 
  2442  0311                     	;# 
  2443  0312                     	;# 
  2444  0313                     	;# 
  2445  0318                     	;# 
  2446  0318                     	;# 
  2447  0319                     	;# 
  2448  031A                     	;# 
  2449  031C                     	;# 
  2450  031C                     	;# 
  2451  031D                     	;# 
  2452  031E                     	;# 
  2453  038C                     	;# 
  2454  038D                     	;# 
  2455  0394                     	;# 
  2456  0395                     	;# 
  2457  0396                     	;# 
  2458  040C                     	;# 
  2459  040D                     	;# 
  2460  0411                     	;# 
  2461  0411                     	;# 
  2462  0412                     	;# 
  2463  0413                     	;# 
  2464  0414                     	;# 
  2465  0415                     	;# 
  2466  0416                     	;# 
  2467  0417                     	;# 
  2468  0418                     	;# 
  2469  0418                     	;# 
  2470  0419                     	;# 
  2471  041A                     	;# 
  2472  041B                     	;# 
  2473  041C                     	;# 
  2474  041D                     	;# 
  2475  041E                     	;# 
  2476  048D                     	;# 
  2477  0491                     	;# 
  2478  0491                     	;# 
  2479  0492                     	;# 
  2480  0492                     	;# 
  2481  0493                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0494                     	;# 
  2485  0494                     	;# 
  2486  0495                     	;# 
  2487  0495                     	;# 
  2488  0496                     	;# 
  2489  0496                     	;# 
  2490  0497                     	;# 
  2491  0497                     	;# 
  2492  0595                     	;# 
  2493  0596                     	;# 
  2494  0597                     	;# 
  2495  059C                     	;# 
  2496  059D                     	;# 
  2497  059E                     	;# 
  2498  0611                     	;# 
  2499  0611                     	;# 
  2500  0612                     	;# 
  2501  0613                     	;# 
  2502  0614                     	;# 
  2503  0614                     	;# 
  2504  0615                     	;# 
  2505  0616                     	;# 
  2506  0617                     	;# 
  2507  0617                     	;# 
  2508  0618                     	;# 
  2509  0619                     	;# 
  2510  061A                     	;# 
  2511  061A                     	;# 
  2512  061B                     	;# 
  2513  061C                     	;# 
  2514  061D                     	;# 
  2515  061D                     	;# 
  2516  061E                     	;# 
  2517  061F                     	;# 
  2518  0FE4                     	;# 
  2519  0FE5                     	;# 
  2520  0FE6                     	;# 
  2521  0FE7                     	;# 
  2522  0FE8                     	;# 
  2523  0FE9                     	;# 
  2524  0FEA                     	;# 
  2525  0FEB                     	;# 
  2526  0FED                     	;# 
  2527  0FEE                     	;# 
  2528  0FEF                     	;# 
  2529  0000                     	;# 
  2530  0001                     	;# 
  2531  0002                     	;# 
  2532  0003                     	;# 
  2533  0004                     	;# 
  2534  0005                     	;# 
  2535  0006                     	;# 
  2536  0007                     	;# 
  2537  0008                     	;# 
  2538  0009                     	;# 
  2539  000A                     	;# 
  2540  000B                     	;# 
  2541  000C                     	;# 
  2542  000D                     	;# 
  2543  000E                     	;# 
  2544  000F                     	;# 
  2545  0010                     	;# 
  2546  0011                     	;# 
  2547  0012                     	;# 
  2548  0013                     	;# 
  2549  0014                     	;# 
  2550  0015                     	;# 
  2551  0016                     	;# 
  2552  0016                     	;# 
  2553  0017                     	;# 
  2554  0018                     	;# 
  2555  0019                     	;# 
  2556  001A                     	;# 
  2557  001B                     	;# 
  2558  001C                     	;# 
  2559  008C                     	;# 
  2560  008D                     	;# 
  2561  008E                     	;# 
  2562  008F                     	;# 
  2563  0090                     	;# 
  2564  0091                     	;# 
  2565  0092                     	;# 
  2566  0093                     	;# 
  2567  0094                     	;# 
  2568  0095                     	;# 
  2569  0096                     	;# 
  2570  0097                     	;# 
  2571  0099                     	;# 
  2572  009A                     	;# 
  2573  009B                     	;# 
  2574  009B                     	;# 
  2575  009C                     	;# 
  2576  009D                     	;# 
  2577  009E                     	;# 
  2578  010C                     	;# 
  2579  010D                     	;# 
  2580  010E                     	;# 
  2581  010F                     	;# 
  2582  0110                     	;# 
  2583  0116                     	;# 
  2584  0117                     	;# 
  2585  011D                     	;# 
  2586  018C                     	;# 
  2587  018D                     	;# 
  2588  018F                     	;# 
  2589  0190                     	;# 
  2590  0191                     	;# 
  2591  0191                     	;# 
  2592  0192                     	;# 
  2593  0193                     	;# 
  2594  0193                     	;# 
  2595  0194                     	;# 
  2596  0195                     	;# 
  2597  0196                     	;# 
  2598  0197                     	;# 
  2599  0199                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  019A                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019C                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019D                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019E                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019F                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  020D                     	;# 
  2623  020F                     	;# 
  2624  0210                     	;# 
  2625  0211                     	;# 
  2626  0211                     	;# 
  2627  0212                     	;# 
  2628  0212                     	;# 
  2629  0213                     	;# 
  2630  0213                     	;# 
  2631  0214                     	;# 
  2632  0214                     	;# 
  2633  0215                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0216                     	;# 
  2637  0216                     	;# 
  2638  0217                     	;# 
  2639  0217                     	;# 
  2640  0219                     	;# 
  2641  021A                     	;# 
  2642  021B                     	;# 
  2643  021C                     	;# 
  2644  021D                     	;# 
  2645  021E                     	;# 
  2646  021F                     	;# 
  2647  028C                     	;# 
  2648  028D                     	;# 
  2649  0291                     	;# 
  2650  0291                     	;# 
  2651  0292                     	;# 
  2652  0293                     	;# 
  2653  0298                     	;# 
  2654  0298                     	;# 
  2655  0299                     	;# 
  2656  029A                     	;# 
  2657  029D                     	;# 
  2658  029E                     	;# 
  2659  029F                     	;# 
  2660  030C                     	;# 
  2661  030D                     	;# 
  2662  0311                     	;# 
  2663  0311                     	;# 
  2664  0312                     	;# 
  2665  0313                     	;# 
  2666  0318                     	;# 
  2667  0318                     	;# 
  2668  0319                     	;# 
  2669  031A                     	;# 
  2670  031C                     	;# 
  2671  031C                     	;# 
  2672  031D                     	;# 
  2673  031E                     	;# 
  2674  038C                     	;# 
  2675  038D                     	;# 
  2676  0394                     	;# 
  2677  0395                     	;# 
  2678  0396                     	;# 
  2679  040C                     	;# 
  2680  040D                     	;# 
  2681  0411                     	;# 
  2682  0411                     	;# 
  2683  0412                     	;# 
  2684  0413                     	;# 
  2685  0414                     	;# 
  2686  0415                     	;# 
  2687  0416                     	;# 
  2688  0417                     	;# 
  2689  0418                     	;# 
  2690  0418                     	;# 
  2691  0419                     	;# 
  2692  041A                     	;# 
  2693  041B                     	;# 
  2694  041C                     	;# 
  2695  041D                     	;# 
  2696  041E                     	;# 
  2697  048D                     	;# 
  2698  0491                     	;# 
  2699  0491                     	;# 
  2700  0492                     	;# 
  2701  0492                     	;# 
  2702  0493                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0494                     	;# 
  2706  0494                     	;# 
  2707  0495                     	;# 
  2708  0495                     	;# 
  2709  0496                     	;# 
  2710  0496                     	;# 
  2711  0497                     	;# 
  2712  0497                     	;# 
  2713  0595                     	;# 
  2714  0596                     	;# 
  2715  0597                     	;# 
  2716  059C                     	;# 
  2717  059D                     	;# 
  2718  059E                     	;# 
  2719  0611                     	;# 
  2720  0611                     	;# 
  2721  0612                     	;# 
  2722  0613                     	;# 
  2723  0614                     	;# 
  2724  0614                     	;# 
  2725  0615                     	;# 
  2726  0616                     	;# 
  2727  0617                     	;# 
  2728  0617                     	;# 
  2729  0618                     	;# 
  2730  0619                     	;# 
  2731  061A                     	;# 
  2732  061A                     	;# 
  2733  061B                     	;# 
  2734  061C                     	;# 
  2735  061D                     	;# 
  2736  061D                     	;# 
  2737  061E                     	;# 
  2738  061F                     	;# 
  2739  0FE4                     	;# 
  2740  0FE5                     	;# 
  2741  0FE6                     	;# 
  2742  0FE7                     	;# 
  2743  0FE8                     	;# 
  2744  0FE9                     	;# 
  2745  0FEA                     	;# 
  2746  0FEB                     	;# 
  2747  0FED                     	;# 
  2748  0FEE                     	;# 
  2749  0FEF                     	;_delayArray
  2750                           
  2751                           	psect	idataCOMMON
  2752  07FF                     __pidataCOMMON:	
  2753                           
  2754                           ;initializer for _switchBypass_state
  2755  07FF  34FF               	retlw	255
  2756                           
  2757                           	psect	idataBANK0
  2758  0002                     __pidataBANK0:	
  2759                           
  2760                           ;initializer for _feedback_state
  2761  0002  34FF               	retlw	255
  2762                           
  2763                           ;initializer for _longTap_state
  2764  0003  34FF               	retlw	255
  2765                           
  2766                           	psect	idataBANK1
  2767  1D84                     __pidataBANK1:	
  2768                           
  2769                           ;initializer for _baseline_delay_time
  2770  1D84  34D0               	retlw	208
  2771  1D85  3407               	retlw	7
  2772  1D86  3400               	retlw	0
  2773  1D87  3400               	retlw	0
  2774                           
  2775                           ;initializer for _delay_time
  2776  1D88  34D0               	retlw	208
  2777  1D89  3407               	retlw	7
  2778  1D8A  3400               	retlw	0
  2779  1D8B  3400               	retlw	0
  2780                           
  2781                           ;initializer for _bottom_push_state
  2782  1D8C  3406               	retlw	6
  2783  1D8D  3400               	retlw	0
  2784                           
  2785                           ;initializer for _long_press_limit
  2786  1D8E  34E8               	retlw	232
  2787  1D8F  3403               	retlw	3
  2788                           
  2789                           ;initializer for _top_push_state
  2790  1D90  3406               	retlw	6
  2791  1D91  3400               	retlw	0
  2792                           
  2793                           ;initializer for _blink_rate
  2794  1D92  3414               	retlw	20
  2795                           
  2796                           ;initializer for _num_taps
  2797  1D93  3404               	retlw	4
  2798                           
  2799                           	psect	idataBANK2
  2800  1DEA                     __pidataBANK2:	
  2801                           
  2802                           ;initializer for _blink_delay
  2803  1DEA  3464               	retlw	100
  2804  1DEB  3400               	retlw	0
  2805                           
  2806                           ;initializer for _delay_time_changed
  2807  1DEC  3401               	retlw	1
  2808  1DED  3400               	retlw	0
  2809                           
  2810                           ;initializer for _knob1_prev
  2811  1DEE  34D0               	retlw	208
  2812  1DEF  3407               	retlw	7
  2813                           
  2814                           ;initializer for _knob2_prev
  2815  1DF0  34D0               	retlw	208
  2816  1DF1  3407               	retlw	7
  2817                           
  2818                           ;initializer for _knob3_prev
  2819  1DF2  34D0               	retlw	208
  2820  1DF3  3407               	retlw	7
  2821                           
  2822                           ;initializer for _knob4_prev
  2823  1DF4  34D0               	retlw	208
  2824  1DF5  3407               	retlw	7
  2825                           
  2826                           ;initializer for _knob5_prev
  2827  1DF6  34D0               	retlw	208
  2828  1DF7  3407               	retlw	7
  2829                           
  2830                           ;initializer for _mod_delay_time
  2831  1DF8  34D0               	retlw	208
  2832  1DF9  3407               	retlw	7
  2833                           
  2834                           ;initializer for _switchBypass_up
  2835  1DFA  3401               	retlw	1
  2836  1DFB  3400               	retlw	0
  2837                           
  2838                           ;initializer for _tap_iteration
  2839  1DFC  3401               	retlw	1
  2840  1DFD  3400               	retlw	0
  2841                           
  2842                           ;initializer for _blink_state
  2843  1DFE  3401               	retlw	1
  2844                           
  2845                           ;initializer for _currentBypassState
  2846  1DFF  34FF               	retlw	255
  2847                           
  2848                           ;initializer for _switchTap_state
  2849  1E00  34FF               	retlw	255
  2850                           
  2851                           	psect	idataBANK4
  2852  10A0                     __pidataBANK4:	
  2853                           
  2854                           ;initializer for _mod2
  2855  10A0  3400               	retlw	0
  2856  10A1  3400               	retlw	0
  2857  10A2  340D               	retlw	13
  2858  10A3  3400               	retlw	0
  2859  10A4  341B               	retlw	27
  2860  10A5  3400               	retlw	0
  2861  10A6  3428               	retlw	40
  2862  10A7  3400               	retlw	0
  2863  10A8  3435               	retlw	53
  2864  10A9  3400               	retlw	0
  2865  10AA  3443               	retlw	67
  2866  10AB  3400               	retlw	0
  2867  10AC  3450               	retlw	80
  2868  10AD  3400               	retlw	0
  2869  10AE  345D               	retlw	93
  2870  10AF  3400               	retlw	0
  2871  10B0  345D               	retlw	93
  2872  10B1  3400               	retlw	0
  2873  10B2  3450               	retlw	80
  2874  10B3  3400               	retlw	0
  2875  10B4  3443               	retlw	67
  2876  10B5  3400               	retlw	0
  2877  10B6  3435               	retlw	53
  2878  10B7  3400               	retlw	0
  2879  10B8  3428               	retlw	40
  2880  10B9  3400               	retlw	0
  2881  10BA  341B               	retlw	27
  2882  10BB  3400               	retlw	0
  2883  10BC  340D               	retlw	13
  2884  10BD  3400               	retlw	0
  2885  10BE  3400               	retlw	0
  2886  10BF  3400               	retlw	0
  2887  10C0  34F3               	retlw	243
  2888  10C1  34FF               	retlw	255
  2889  10C2  34E5               	retlw	229
  2890  10C3  34FF               	retlw	255
  2891  10C4  34D8               	retlw	216
  2892  10C5  34FF               	retlw	255
  2893  10C6  34CB               	retlw	203
  2894  10C7  34FF               	retlw	255
  2895  10C8  34BD               	retlw	189
  2896  10C9  34FF               	retlw	255
  2897  10CA  34B0               	retlw	176
  2898  10CB  34FF               	retlw	255
  2899  10CC  34A3               	retlw	163
  2900  10CD  34FF               	retlw	255
  2901  10CE  34A3               	retlw	163
  2902  10CF  34FF               	retlw	255
  2903  10D0  34B0               	retlw	176
  2904  10D1  34FF               	retlw	255
  2905  10D2  34BD               	retlw	189
  2906  10D3  34FF               	retlw	255
  2907  10D4  34CB               	retlw	203
  2908  10D5  34FF               	retlw	255
  2909  10D6  34D8               	retlw	216
  2910  10D7  34FF               	retlw	255
  2911  10D8  34E5               	retlw	229
  2912  10D9  34FF               	retlw	255
  2913  10DA  34F3               	retlw	243
  2914  10DB  34FF               	retlw	255
  2915  10DC  3400               	retlw	0
  2916  10DD  3400               	retlw	0
  2917                           
  2918                           	psect	idataBANK5
  2919  1062                     __pidataBANK5:	
  2920                           
  2921                           ;initializer for _mod3
  2922  1062  3400               	retlw	0
  2923  1063  3400               	retlw	0
  2924  1064  3407               	retlw	7
  2925  1065  3400               	retlw	0
  2926  1066  340D               	retlw	13
  2927  1067  3400               	retlw	0
  2928  1068  3414               	retlw	20
  2929  1069  3400               	retlw	0
  2930  106A  341B               	retlw	27
  2931  106B  3400               	retlw	0
  2932  106C  3421               	retlw	33
  2933  106D  3400               	retlw	0
  2934  106E  3428               	retlw	40
  2935  106F  3400               	retlw	0
  2936  1070  342F               	retlw	47
  2937  1071  3400               	retlw	0
  2938  1072  3435               	retlw	53
  2939  1073  3400               	retlw	0
  2940  1074  343C               	retlw	60
  2941  1075  3400               	retlw	0
  2942  1076  3443               	retlw	67
  2943  1077  3400               	retlw	0
  2944  1078  3449               	retlw	73
  2945  1079  3400               	retlw	0
  2946  107A  3450               	retlw	80
  2947  107B  3400               	retlw	0
  2948  107C  3457               	retlw	87
  2949  107D  3400               	retlw	0
  2950  107E  345D               	retlw	93
  2951  107F  3400               	retlw	0
  2952  1080  349C               	retlw	156
  2953  1081  34FF               	retlw	255
  2954  1082  34A3               	retlw	163
  2955  1083  34FF               	retlw	255
  2956  1084  34A9               	retlw	169
  2957  1085  34FF               	retlw	255
  2958  1086  34B0               	retlw	176
  2959  1087  34FF               	retlw	255
  2960  1088  34B7               	retlw	183
  2961  1089  34FF               	retlw	255
  2962  108A  34BD               	retlw	189
  2963  108B  34FF               	retlw	255
  2964  108C  34C4               	retlw	196
  2965  108D  34FF               	retlw	255
  2966  108E  34CB               	retlw	203
  2967  108F  34FF               	retlw	255
  2968  1090  34D1               	retlw	209
  2969  1091  34FF               	retlw	255
  2970  1092  34D8               	retlw	216
  2971  1093  34FF               	retlw	255
  2972  1094  34DF               	retlw	223
  2973  1095  34FF               	retlw	255
  2974  1096  34E5               	retlw	229
  2975  1097  34FF               	retlw	255
  2976  1098  34EC               	retlw	236
  2977  1099  34FF               	retlw	255
  2978  109A  34F3               	retlw	243
  2979  109B  34FF               	retlw	255
  2980  109C  34F9               	retlw	249
  2981  109D  34FF               	retlw	255
  2982  109E  3400               	retlw	0
  2983  109F  3400               	retlw	0
  2984                           
  2985                           	psect	idataBANK6
  2986  1024                     __pidataBANK6:	
  2987                           
  2988                           ;initializer for _mod4
  2989  1024  3464               	retlw	100
  2990  1025  3400               	retlw	0
  2991  1026  3464               	retlw	100
  2992  1027  3400               	retlw	0
  2993  1028  3464               	retlw	100
  2994  1029  3400               	retlw	0
  2995  102A  3464               	retlw	100
  2996  102B  3400               	retlw	0
  2997  102C  3464               	retlw	100
  2998  102D  3400               	retlw	0
  2999  102E  3464               	retlw	100
  3000  102F  3400               	retlw	0
  3001  1030  3464               	retlw	100
  3002  1031  3400               	retlw	0
  3003  1032  3464               	retlw	100
  3004  1033  3400               	retlw	0
  3005  1034  3464               	retlw	100
  3006  1035  3400               	retlw	0
  3007  1036  3464               	retlw	100
  3008  1037  3400               	retlw	0
  3009  1038  3464               	retlw	100
  3010  1039  3400               	retlw	0
  3011  103A  3464               	retlw	100
  3012  103B  3400               	retlw	0
  3013  103C  3464               	retlw	100
  3014  103D  3400               	retlw	0
  3015  103E  3464               	retlw	100
  3016  103F  3400               	retlw	0
  3017  1040  3464               	retlw	100
  3018  1041  3400               	retlw	0
  3019  1042  349C               	retlw	156
  3020  1043  34FF               	retlw	255
  3021  1044  349C               	retlw	156
  3022  1045  34FF               	retlw	255
  3023  1046  349C               	retlw	156
  3024  1047  34FF               	retlw	255
  3025  1048  349C               	retlw	156
  3026  1049  34FF               	retlw	255
  3027  104A  349C               	retlw	156
  3028  104B  34FF               	retlw	255
  3029  104C  349C               	retlw	156
  3030  104D  34FF               	retlw	255
  3031  104E  349C               	retlw	156
  3032  104F  34FF               	retlw	255
  3033  1050  349C               	retlw	156
  3034  1051  34FF               	retlw	255
  3035  1052  349C               	retlw	156
  3036  1053  34FF               	retlw	255
  3037  1054  349C               	retlw	156
  3038  1055  34FF               	retlw	255
  3039  1056  349C               	retlw	156
  3040  1057  34FF               	retlw	255
  3041  1058  349C               	retlw	156
  3042  1059  34FF               	retlw	255
  3043  105A  349C               	retlw	156
  3044  105B  34FF               	retlw	255
  3045  105C  349C               	retlw	156
  3046  105D  34FF               	retlw	255
  3047  105E  349C               	retlw	156
  3048  105F  34FF               	retlw	255
  3049  1060  3464               	retlw	100
  3050  1061  3400               	retlw	0
  3051                           
  3052                           	psect	idataBANK7
  3053  1354                     __pidataBANK7:	
  3054                           
  3055                           ;initializer for _B25k
  3056  1354  34FF               	retlw	255
  3057  1355  3400               	retlw	0
  3058  1356  34FF               	retlw	255
  3059  1357  3400               	retlw	0
  3060  1358  34FF               	retlw	255
  3061  1359  3400               	retlw	0
  3062  135A  34DF               	retlw	223
  3063  135B  3400               	retlw	0
  3064  135C  34AE               	retlw	174
  3065  135D  3400               	retlw	0
  3066  135E  348E               	retlw	142
  3067  135F  3400               	retlw	0
  3068  1360  3478               	retlw	120
  3069  1361  3400               	retlw	0
  3070  1362  3467               	retlw	103
  3071  1363  3400               	retlw	0
  3072  1364  345B               	retlw	91
  3073  1365  3400               	retlw	0
  3074  1366  3450               	retlw	80
  3075  1367  3400               	retlw	0
  3076  1368  3448               	retlw	72
  3077  1369  3400               	retlw	0
  3078  136A  3442               	retlw	66
  3079  136B  3400               	retlw	0
  3080  136C  343C               	retlw	60
  3081  136D  3400               	retlw	0
  3082  136E  3437               	retlw	55
  3083  136F  3400               	retlw	0
  3084  1370  3433               	retlw	51
  3085  1371  3400               	retlw	0
  3086  1372  3430               	retlw	48
  3087  1373  3400               	retlw	0
  3088  1374  342D               	retlw	45
  3089  1375  3400               	retlw	0
  3090  1376  342A               	retlw	42
  3091  1377  3400               	retlw	0
  3092  1378  3427               	retlw	39
  3093  1379  3400               	retlw	0
  3094  137A  3425               	retlw	37
  3095  137B  3400               	retlw	0
  3096  137C  3423               	retlw	35
  3097  137D  3400               	retlw	0
  3098  137E  3421               	retlw	33
  3099  137F  3400               	retlw	0
  3100  1380  3420               	retlw	32
  3101  1381  3400               	retlw	0
  3102  1382  341E               	retlw	30
  3103  1383  3400               	retlw	0
  3104  1384  341D               	retlw	29
  3105  1385  3400               	retlw	0
  3106  1386  341C               	retlw	28
  3107  1387  3400               	retlw	0
  3108  1388  341B               	retlw	27
  3109  1389  3400               	retlw	0
  3110  138A  341A               	retlw	26
  3111  138B  3400               	retlw	0
  3112  138C  3419               	retlw	25
  3113  138D  3400               	retlw	0
  3114  138E  3418               	retlw	24
  3115  138F  3400               	retlw	0
  3116  1390  3417               	retlw	23
  3117  1391  3400               	retlw	0
  3118  1392  3416               	retlw	22
  3119  1393  3400               	retlw	0
  3120  1394  3415               	retlw	21
  3121  1395  3400               	retlw	0
  3122  1396  3415               	retlw	21
  3123  1397  3400               	retlw	0
  3124  1398  3414               	retlw	20
  3125  1399  3400               	retlw	0
  3126  139A  3413               	retlw	19
  3127  139B  3400               	retlw	0
  3128  139C  340F               	retlw	15
  3129  139D  3400               	retlw	0
  3130  139E  340B               	retlw	11
  3131  139F  3400               	retlw	0
  3132  13A0  3407               	retlw	7
  3133  13A1  3400               	retlw	0
  3134  13A2  3407               	retlw	7
  3135  13A3  3400               	retlw	0
  3136                           
  3137                           	psect	idataBANK8
  3138  1304                     __pidataBANK8:	
  3139                           
  3140                           ;initializer for _iB25k
  3141  1304  3407               	retlw	7
  3142  1305  3400               	retlw	0
  3143  1306  3407               	retlw	7
  3144  1307  3400               	retlw	0
  3145  1308  340B               	retlw	11
  3146  1309  3400               	retlw	0
  3147  130A  340F               	retlw	15
  3148  130B  3400               	retlw	0
  3149  130C  3413               	retlw	19
  3150  130D  3400               	retlw	0
  3151  130E  3414               	retlw	20
  3152  130F  3400               	retlw	0
  3153  1310  3415               	retlw	21
  3154  1311  3400               	retlw	0
  3155  1312  3415               	retlw	21
  3156  1313  3400               	retlw	0
  3157  1314  3416               	retlw	22
  3158  1315  3400               	retlw	0
  3159  1316  3417               	retlw	23
  3160  1317  3400               	retlw	0
  3161  1318  3418               	retlw	24
  3162  1319  3400               	retlw	0
  3163  131A  3419               	retlw	25
  3164  131B  3400               	retlw	0
  3165  131C  341A               	retlw	26
  3166  131D  3400               	retlw	0
  3167  131E  341B               	retlw	27
  3168  131F  3400               	retlw	0
  3169  1320  341C               	retlw	28
  3170  1321  3400               	retlw	0
  3171  1322  341D               	retlw	29
  3172  1323  3400               	retlw	0
  3173  1324  341E               	retlw	30
  3174  1325  3400               	retlw	0
  3175  1326  3420               	retlw	32
  3176  1327  3400               	retlw	0
  3177  1328  3421               	retlw	33
  3178  1329  3400               	retlw	0
  3179  132A  3423               	retlw	35
  3180  132B  3400               	retlw	0
  3181  132C  3425               	retlw	37
  3182  132D  3400               	retlw	0
  3183  132E  3427               	retlw	39
  3184  132F  3400               	retlw	0
  3185  1330  342A               	retlw	42
  3186  1331  3400               	retlw	0
  3187  1332  342D               	retlw	45
  3188  1333  3400               	retlw	0
  3189  1334  3430               	retlw	48
  3190  1335  3400               	retlw	0
  3191  1336  3433               	retlw	51
  3192  1337  3400               	retlw	0
  3193  1338  3437               	retlw	55
  3194  1339  3400               	retlw	0
  3195  133A  343C               	retlw	60
  3196  133B  3400               	retlw	0
  3197  133C  3442               	retlw	66
  3198  133D  3400               	retlw	0
  3199  133E  3448               	retlw	72
  3200  133F  3400               	retlw	0
  3201  1340  3450               	retlw	80
  3202  1341  3400               	retlw	0
  3203  1342  345B               	retlw	91
  3204  1343  3400               	retlw	0
  3205  1344  3467               	retlw	103
  3206  1345  3400               	retlw	0
  3207  1346  3478               	retlw	120
  3208  1347  3400               	retlw	0
  3209  1348  348E               	retlw	142
  3210  1349  3400               	retlw	0
  3211  134A  34AE               	retlw	174
  3212  134B  3400               	retlw	0
  3213  134C  34DF               	retlw	223
  3214  134D  3400               	retlw	0
  3215  134E  34FF               	retlw	255
  3216  134F  3400               	retlw	0
  3217  1350  34FF               	retlw	255
  3218  1351  3400               	retlw	0
  3219  1352  34FF               	retlw	255
  3220  1353  3400               	retlw	0
  3221                           
  3222                           	psect	idataBANK10
  3223  1FC2                     __pidataBANK10:	
  3224                           
  3225                           ;initializer for _mod1
  3226  1FC2  3400               	retlw	0
  3227  1FC3  3400               	retlw	0
  3228  1FC4  3415               	retlw	21
  3229  1FC5  3400               	retlw	0
  3230  1FC6  3429               	retlw	41
  3231  1FC7  3400               	retlw	0
  3232  1FC8  343B               	retlw	59
  3233  1FC9  3400               	retlw	0
  3234  1FCA  344A               	retlw	74
  3235  1FCB  3400               	retlw	0
  3236  1FCC  3457               	retlw	87
  3237  1FCD  3400               	retlw	0
  3238  1FCE  345F               	retlw	95
  3239  1FCF  3400               	retlw	0
  3240  1FD0  3463               	retlw	99
  3241  1FD1  3400               	retlw	0
  3242  1FD2  3463               	retlw	99
  3243  1FD3  3400               	retlw	0
  3244  1FD4  345F               	retlw	95
  3245  1FD5  3400               	retlw	0
  3246  1FD6  3457               	retlw	87
  3247  1FD7  3400               	retlw	0
  3248  1FD8  344A               	retlw	74
  3249  1FD9  3400               	retlw	0
  3250  1FDA  343B               	retlw	59
  3251  1FDB  3400               	retlw	0
  3252  1FDC  3429               	retlw	41
  3253  1FDD  3400               	retlw	0
  3254  1FDE  3415               	retlw	21
  3255  1FDF  3400               	retlw	0
  3256  1FE0  3400               	retlw	0
  3257  1FE1  3400               	retlw	0
  3258  1FE2  34EB               	retlw	235
  3259  1FE3  34FF               	retlw	255
  3260  1FE4  34D7               	retlw	215
  3261  1FE5  34FF               	retlw	255
  3262  1FE6  34C5               	retlw	197
  3263  1FE7  34FF               	retlw	255
  3264  1FE8  34B6               	retlw	182
  3265  1FE9  34FF               	retlw	255
  3266  1FEA  34A9               	retlw	169
  3267  1FEB  34FF               	retlw	255
  3268  1FEC  34A1               	retlw	161
  3269  1FED  34FF               	retlw	255
  3270  1FEE  349D               	retlw	157
  3271  1FEF  34FF               	retlw	255
  3272  1FF0  349D               	retlw	157
  3273  1FF1  34FF               	retlw	255
  3274  1FF2  34A1               	retlw	161
  3275  1FF3  34FF               	retlw	255
  3276  1FF4  34A9               	retlw	169
  3277  1FF5  34FF               	retlw	255
  3278  1FF6  34B6               	retlw	182
  3279  1FF7  34FF               	retlw	255
  3280  1FF8  34C5               	retlw	197
  3281  1FF9  34FF               	retlw	255
  3282  1FFA  34D7               	retlw	215
  3283  1FFB  34FF               	retlw	255
  3284  1FFC  34EB               	retlw	235
  3285  1FFD  34FF               	retlw	255
  3286  1FFE  3400               	retlw	0
  3287  1FFF  3400               	retlw	0
  3288                           
  3289                           	psect	idataBIGRAM
  3290  02AC                     __pidataBIGRAM:	
  3291                           
  3292                           ;initializer for _delayArray
  3293  02AC  3422               	retlw	34
  3294  02AD  3408               	retlw	8
  3295  02AE  34FC               	retlw	252
  3296  02AF  3407               	retlw	7
  3297  02B0  34D8               	retlw	216
  3298  02B1  3407               	retlw	7
  3299  02B2  34B5               	retlw	181
  3300  02B3  3407               	retlw	7
  3301  02B4  3493               	retlw	147
  3302  02B5  3407               	retlw	7
  3303  02B6  3472               	retlw	114
  3304  02B7  3407               	retlw	7
  3305  02B8  3452               	retlw	82
  3306  02B9  3407               	retlw	7
  3307  02BA  3434               	retlw	52
  3308  02BB  3407               	retlw	7
  3309  02BC  3416               	retlw	22
  3310  02BD  3407               	retlw	7
  3311  02BE  34F9               	retlw	249
  3312  02BF  3406               	retlw	6
  3313  02C0  34DD               	retlw	221
  3314  02C1  3406               	retlw	6
  3315  02C2  34C2               	retlw	194
  3316  02C3  3406               	retlw	6
  3317  02C4  34A8               	retlw	168
  3318  02C5  3406               	retlw	6
  3319  02C6  348F               	retlw	143
  3320  02C7  3406               	retlw	6
  3321  02C8  3476               	retlw	118
  3322  02C9  3406               	retlw	6
  3323  02CA  345E               	retlw	94
  3324  02CB  3406               	retlw	6
  3325  02CC  3447               	retlw	71
  3326  02CD  3406               	retlw	6
  3327  02CE  3430               	retlw	48
  3328  02CF  3406               	retlw	6
  3329  02D0  341A               	retlw	26
  3330  02D1  3406               	retlw	6
  3331  02D2  3405               	retlw	5
  3332  02D3  3406               	retlw	6
  3333  02D4  34F0               	retlw	240
  3334  02D5  3405               	retlw	5
  3335  02D6  34DC               	retlw	220
  3336  02D7  3405               	retlw	5
  3337  02D8  34C8               	retlw	200
  3338  02D9  3405               	retlw	5
  3339  02DA  34B5               	retlw	181
  3340  02DB  3405               	retlw	5
  3341  02DC  34A3               	retlw	163
  3342  02DD  3405               	retlw	5
  3343  02DE  3490               	retlw	144
  3344  02DF  3405               	retlw	5
  3345  02E0  347F               	retlw	127
  3346  02E1  3405               	retlw	5
  3347  02E2  346D               	retlw	109
  3348  02E3  3405               	retlw	5
  3349  02E4  345C               	retlw	92
  3350  02E5  3405               	retlw	5
  3351  02E6  344C               	retlw	76
  3352  02E7  3405               	retlw	5
  3353  02E8  343C               	retlw	60
  3354  02E9  3405               	retlw	5
  3355  02EA  342C               	retlw	44
  3356  02EB  3405               	retlw	5
  3357  02EC  341D               	retlw	29
  3358  02ED  3405               	retlw	5
  3359  02EE  340E               	retlw	14
  3360  02EF  3405               	retlw	5
  3361  02F0  34FF               	retlw	255
  3362  02F1  3404               	retlw	4
  3363  02F2  34F1               	retlw	241
  3364  02F3  3404               	retlw	4
  3365  02F4  34E2               	retlw	226
  3366  02F5  3404               	retlw	4
  3367  02F6  34D5               	retlw	213
  3368  02F7  3404               	retlw	4
  3369  02F8  34C7               	retlw	199
  3370  02F9  3404               	retlw	4
  3371  02FA  34BA               	retlw	186
  3372  02FB  3404               	retlw	4
  3373  02FC  34AD               	retlw	173
  3374  02FD  3404               	retlw	4
  3375  02FE  34A1               	retlw	161
  3376  02FF  3404               	retlw	4
  3377  0300  3494               	retlw	148
  3378  0301  3404               	retlw	4
  3379  0302  3488               	retlw	136
  3380  0303  3404               	retlw	4
  3381  0304  347D               	retlw	125
  3382  0305  3404               	retlw	4
  3383  0306  3471               	retlw	113
  3384  0307  3404               	retlw	4
  3385  0308  3466               	retlw	102
  3386  0309  3404               	retlw	4
  3387  030A  345A               	retlw	90
  3388  030B  3404               	retlw	4
  3389  030C  3450               	retlw	80
  3390  030D  3404               	retlw	4
  3391  030E  3445               	retlw	69
  3392  030F  3404               	retlw	4
  3393  0310  343A               	retlw	58
  3394  0311  3404               	retlw	4
  3395  0312  3430               	retlw	48
  3396  0313  3404               	retlw	4
  3397  0314  3426               	retlw	38
  3398  0315  3404               	retlw	4
  3399  0316  341C               	retlw	28
  3400  0317  3404               	retlw	4
  3401  0318  3412               	retlw	18
  3402  0319  3404               	retlw	4
  3403  031A  3409               	retlw	9
  3404  031B  3404               	retlw	4
  3405  031C  34FF               	retlw	255
  3406  031D  3403               	retlw	3
  3407  031E  34F6               	retlw	246
  3408  031F  3403               	retlw	3
  3409  0320  34ED               	retlw	237
  3410  0321  3403               	retlw	3
  3411  0322  34E4               	retlw	228
  3412  0323  3403               	retlw	3
  3413  0324  34DC               	retlw	220
  3414  0325  3403               	retlw	3
  3415  0326  34D3               	retlw	211
  3416  0327  3403               	retlw	3
  3417  0328  34CB               	retlw	203
  3418  0329  3403               	retlw	3
  3419  032A  34C2               	retlw	194
  3420  032B  3403               	retlw	3
  3421  032C  34BA               	retlw	186
  3422  032D  3403               	retlw	3
  3423  032E  34B2               	retlw	178
  3424  032F  3403               	retlw	3
  3425  0330  34AA               	retlw	170
  3426  0331  3403               	retlw	3
  3427  0332  34A2               	retlw	162
  3428  0333  3403               	retlw	3
  3429  0334  349B               	retlw	155
  3430  0335  3403               	retlw	3
  3431  0336  3493               	retlw	147
  3432  0337  3403               	retlw	3
  3433  0338  348C               	retlw	140
  3434  0339  3403               	retlw	3
  3435  033A  3485               	retlw	133
  3436  033B  3403               	retlw	3
  3437  033C  347E               	retlw	126
  3438  033D  3403               	retlw	3
  3439  033E  3477               	retlw	119
  3440  033F  3403               	retlw	3
  3441  0340  3470               	retlw	112
  3442  0341  3403               	retlw	3
  3443  0342  3469               	retlw	105
  3444  0343  3403               	retlw	3
  3445  0344  3462               	retlw	98
  3446  0345  3403               	retlw	3
  3447  0346  345C               	retlw	92
  3448  0347  3403               	retlw	3
  3449  0348  3455               	retlw	85
  3450  0349  3403               	retlw	3
  3451  034A  344F               	retlw	79
  3452  034B  3403               	retlw	3
  3453  034C  3448               	retlw	72
  3454  034D  3403               	retlw	3
  3455  034E  3442               	retlw	66
  3456  034F  3403               	retlw	3
  3457  0350  343C               	retlw	60
  3458  0351  3403               	retlw	3
  3459  0352  3436               	retlw	54
  3460  0353  3403               	retlw	3
  3461  0354  3430               	retlw	48
  3462  0355  3403               	retlw	3
  3463  0356  342A               	retlw	42
  3464  0357  3403               	retlw	3
  3465  0358  3424               	retlw	36
  3466  0359  3403               	retlw	3
  3467  035A  341F               	retlw	31
  3468  035B  3403               	retlw	3
  3469  035C  3419               	retlw	25
  3470  035D  3403               	retlw	3
  3471  035E  3413               	retlw	19
  3472  035F  3403               	retlw	3
  3473  0360  340E               	retlw	14
  3474  0361  3403               	retlw	3
  3475  0362  3409               	retlw	9
  3476  0363  3403               	retlw	3
  3477  0364  3403               	retlw	3
  3478  0365  3403               	retlw	3
  3479  0366  34FE               	retlw	254
  3480  0367  3402               	retlw	2
  3481  0368  34F9               	retlw	249
  3482  0369  3402               	retlw	2
  3483  036A  34F4               	retlw	244
  3484  036B  3402               	retlw	2
  3485  036C  34EF               	retlw	239
  3486  036D  3402               	retlw	2
  3487  036E  34EA               	retlw	234
  3488  036F  3402               	retlw	2
  3489  0370  34E5               	retlw	229
  3490  0371  3402               	retlw	2
  3491  0372  34E0               	retlw	224
  3492  0373  3402               	retlw	2
  3493  0374  34DB               	retlw	219
  3494  0375  3402               	retlw	2
  3495  0376  34D7               	retlw	215
  3496  0377  3402               	retlw	2
  3497  0378  34D2               	retlw	210
  3498  0379  3402               	retlw	2
  3499  037A  34CD               	retlw	205
  3500  037B  3402               	retlw	2
  3501  037C  34C9               	retlw	201
  3502  037D  3402               	retlw	2
  3503  037E  34C4               	retlw	196
  3504  037F  3402               	retlw	2
  3505  0380  34C0               	retlw	192
  3506  0381  3402               	retlw	2
  3507  0382  34BC               	retlw	188
  3508  0383  3402               	retlw	2
  3509  0384  34B7               	retlw	183
  3510  0385  3402               	retlw	2
  3511  0386  34B3               	retlw	179
  3512  0387  3402               	retlw	2
  3513  0388  34AF               	retlw	175
  3514  0389  3402               	retlw	2
  3515  038A  34AB               	retlw	171
  3516  038B  3402               	retlw	2
  3517  038C  34A6               	retlw	166
  3518  038D  3402               	retlw	2
  3519  038E  34A2               	retlw	162
  3520  038F  3402               	retlw	2
  3521  0390  349E               	retlw	158
  3522  0391  3402               	retlw	2
  3523  0392  349A               	retlw	154
  3524  0393  3402               	retlw	2
  3525  0394  3497               	retlw	151
  3526  0395  3402               	retlw	2
  3527  0396  3493               	retlw	147
  3528  0397  3402               	retlw	2
  3529  0398  348F               	retlw	143
  3530  0399  3402               	retlw	2
  3531  039A  348B               	retlw	139
  3532  039B  3402               	retlw	2
  3533  039C  3487               	retlw	135
  3534  039D  3402               	retlw	2
  3535  039E  3484               	retlw	132
  3536  039F  3402               	retlw	2
  3537  03A0  3480               	retlw	128
  3538  03A1  3402               	retlw	2
  3539  03A2  347C               	retlw	124
  3540  03A3  3402               	retlw	2
  3541  03A4  3479               	retlw	121
  3542  03A5  3402               	retlw	2
  3543  03A6  3475               	retlw	117
  3544  03A7  3402               	retlw	2
  3545  03A8  3472               	retlw	114
  3546  03A9  3402               	retlw	2
  3547  03AA  346E               	retlw	110
  3548  03AB  3402               	retlw	2
  3549  03AC  346B               	retlw	107
  3550  03AD  3402               	retlw	2
  3551  03AE  3467               	retlw	103
  3552  03AF  3402               	retlw	2
  3553  03B0  3464               	retlw	100
  3554  03B1  3402               	retlw	2
  3555  03B2  3461               	retlw	97
  3556  03B3  3402               	retlw	2
  3557  03B4  345E               	retlw	94
  3558  03B5  3402               	retlw	2
  3559  03B6  345A               	retlw	90
  3560  03B7  3402               	retlw	2
  3561  03B8  3457               	retlw	87
  3562  03B9  3402               	retlw	2
  3563  03BA  3454               	retlw	84
  3564  03BB  3402               	retlw	2
  3565  03BC  3451               	retlw	81
  3566  03BD  3402               	retlw	2
  3567  03BE  344E               	retlw	78
  3568  03BF  3402               	retlw	2
  3569  03C0  344B               	retlw	75
  3570  03C1  3402               	retlw	2
  3571  03C2  3448               	retlw	72
  3572  03C3  3402               	retlw	2
  3573  03C4  3445               	retlw	69
  3574  03C5  3402               	retlw	2
  3575  03C6  3442               	retlw	66
  3576  03C7  3402               	retlw	2
  3577  03C8  343F               	retlw	63
  3578  03C9  3402               	retlw	2
  3579  03CA  343C               	retlw	60
  3580  03CB  3402               	retlw	2
  3581  03CC  3439               	retlw	57
  3582  03CD  3402               	retlw	2
  3583  03CE  3436               	retlw	54
  3584  03CF  3402               	retlw	2
  3585  03D0  3433               	retlw	51
  3586  03D1  3402               	retlw	2
  3587  03D2  3430               	retlw	48
  3588  03D3  3402               	retlw	2
  3589  03D4  342E               	retlw	46
  3590  03D5  3402               	retlw	2
  3591  03D6  342B               	retlw	43
  3592  03D7  3402               	retlw	2
  3593  03D8  3428               	retlw	40
  3594  03D9  3402               	retlw	2
  3595  03DA  3425               	retlw	37
  3596  03DB  3402               	retlw	2
  3597  03DC  3423               	retlw	35
  3598  03DD  3402               	retlw	2
  3599  03DE  3420               	retlw	32
  3600  03DF  3402               	retlw	2
  3601  03E0  341E               	retlw	30
  3602  03E1  3402               	retlw	2
  3603  03E2  341B               	retlw	27
  3604  03E3  3402               	retlw	2
  3605  03E4  3418               	retlw	24
  3606  03E5  3402               	retlw	2
  3607  03E6  3416               	retlw	22
  3608  03E7  3402               	retlw	2
  3609  03E8  3413               	retlw	19
  3610  03E9  3402               	retlw	2
  3611  03EA  3411               	retlw	17
  3612  03EB  3402               	retlw	2
  3613  03EC  340E               	retlw	14
  3614  03ED  3402               	retlw	2
  3615  03EE  340C               	retlw	12
  3616  03EF  3402               	retlw	2
  3617  03F0  340A               	retlw	10
  3618  03F1  3402               	retlw	2
  3619  03F2  3407               	retlw	7
  3620  03F3  3402               	retlw	2
  3621  03F4  3405               	retlw	5
  3622  03F5  3402               	retlw	2
  3623  03F6  3402               	retlw	2
  3624  03F7  3402               	retlw	2
  3625  03F8  3400               	retlw	0
  3626  03F9  3402               	retlw	2
  3627  03FA  34FE               	retlw	254
  3628  03FB  3401               	retlw	1
  3629  03FC  34FB               	retlw	251
  3630  03FD  3401               	retlw	1
  3631  03FE  34F9               	retlw	249
  3632  03FF  3401               	retlw	1
  3633  0400  34F7               	retlw	247
  3634  0401  3401               	retlw	1
  3635  0402  34F5               	retlw	245
  3636  0403  3401               	retlw	1
  3637  0404  34F2               	retlw	242
  3638  0405  3401               	retlw	1
  3639  0406  34F0               	retlw	240
  3640  0407  3401               	retlw	1
  3641  0408  34EE               	retlw	238
  3642  0409  3401               	retlw	1
  3643  040A  34EC               	retlw	236
  3644  040B  3401               	retlw	1
  3645  040C  34EA               	retlw	234
  3646  040D  3401               	retlw	1
  3647  040E  34E8               	retlw	232
  3648  040F  3401               	retlw	1
  3649  0410  34E6               	retlw	230
  3650  0411  3401               	retlw	1
  3651  0412  34E3               	retlw	227
  3652  0413  3401               	retlw	1
  3653  0414  34E1               	retlw	225
  3654  0415  3401               	retlw	1
  3655  0416  34DF               	retlw	223
  3656  0417  3401               	retlw	1
  3657  0418  34DD               	retlw	221
  3658  0419  3401               	retlw	1
  3659  041A  34DB               	retlw	219
  3660  041B  3401               	retlw	1
  3661  041C  34D9               	retlw	217
  3662  041D  3401               	retlw	1
  3663  041E  34D7               	retlw	215
  3664  041F  3401               	retlw	1
  3665  0420  34D5               	retlw	213
  3666  0421  3401               	retlw	1
  3667  0422  34D3               	retlw	211
  3668  0423  3401               	retlw	1
  3669  0424  34D2               	retlw	210
  3670  0425  3401               	retlw	1
  3671  0426  34D0               	retlw	208
  3672  0427  3401               	retlw	1
  3673  0428  34CE               	retlw	206
  3674  0429  3401               	retlw	1
  3675  042A  34CC               	retlw	204
  3676  042B  3401               	retlw	1
  3677  042C  34CA               	retlw	202
  3678  042D  3401               	retlw	1
  3679  042E  34C8               	retlw	200
  3680  042F  3401               	retlw	1
  3681  0430  34C6               	retlw	198
  3682  0431  3401               	retlw	1
  3683  0432  34C4               	retlw	196
  3684  0433  3401               	retlw	1
  3685  0434  34C3               	retlw	195
  3686  0435  3401               	retlw	1
  3687  0436  34C1               	retlw	193
  3688  0437  3401               	retlw	1
  3689  0438  34BF               	retlw	191
  3690  0439  3401               	retlw	1
  3691  043A  34BD               	retlw	189
  3692  043B  3401               	retlw	1
  3693  043C  34BC               	retlw	188
  3694  043D  3401               	retlw	1
  3695  043E  34BA               	retlw	186
  3696  043F  3401               	retlw	1
  3697  0440  34B8               	retlw	184
  3698  0441  3401               	retlw	1
  3699  0442  34B6               	retlw	182
  3700  0443  3401               	retlw	1
  3701  0444  34B5               	retlw	181
  3702  0445  3401               	retlw	1
  3703  0446  34B3               	retlw	179
  3704  0447  3401               	retlw	1
  3705  0448  34B1               	retlw	177
  3706  0449  3401               	retlw	1
  3707  044A  34B0               	retlw	176
  3708  044B  3401               	retlw	1
  3709  044C  34AE               	retlw	174
  3710  044D  3401               	retlw	1
  3711  044E  34AC               	retlw	172
  3712  044F  3401               	retlw	1
  3713  0450  34AB               	retlw	171
  3714  0451  3401               	retlw	1
  3715  0452  34A9               	retlw	169
  3716  0453  3401               	retlw	1
  3717  0454  34A8               	retlw	168
  3718  0455  3401               	retlw	1
  3719  0456  34A6               	retlw	166
  3720  0457  3401               	retlw	1
  3721  0458  34A4               	retlw	164
  3722  0459  3401               	retlw	1
  3723  045A  34A3               	retlw	163
  3724  045B  3401               	retlw	1
  3725  045C  34A1               	retlw	161
  3726  045D  3401               	retlw	1
  3727  045E  34A0               	retlw	160
  3728  045F  3401               	retlw	1
  3729  0460  349E               	retlw	158
  3730  0461  3401               	retlw	1
  3731  0462  349D               	retlw	157
  3732  0463  3401               	retlw	1
  3733  0464  349B               	retlw	155
  3734  0465  3401               	retlw	1
  3735  0466  349A               	retlw	154
  3736  0467  3401               	retlw	1
  3737  0468  3498               	retlw	152
  3738  0469  3401               	retlw	1
  3739  046A  3497               	retlw	151
  3740  046B  3401               	retlw	1
  3741  046C  3495               	retlw	149
  3742  046D  3401               	retlw	1
  3743  046E  3494               	retlw	148
  3744  046F  3401               	retlw	1
  3745  0470  3492               	retlw	146
  3746  0471  3401               	retlw	1
  3747  0472  3491               	retlw	145
  3748  0473  3401               	retlw	1
  3749  0474  3490               	retlw	144
  3750  0475  3401               	retlw	1
  3751  0476  348E               	retlw	142
  3752  0477  3401               	retlw	1
  3753  0478  348D               	retlw	141
  3754  0479  3401               	retlw	1
  3755  047A  348B               	retlw	139
  3756  047B  3401               	retlw	1
  3757  047C  348A               	retlw	138
  3758  047D  3401               	retlw	1
  3759  047E  3489               	retlw	137
  3760  047F  3401               	retlw	1
  3761  0480  3487               	retlw	135
  3762  0481  3401               	retlw	1
  3763  0482  3486               	retlw	134
  3764  0483  3401               	retlw	1
  3765  0484  3485               	retlw	133
  3766  0485  3401               	retlw	1
  3767  0486  3483               	retlw	131
  3768  0487  3401               	retlw	1
  3769  0488  3482               	retlw	130
  3770  0489  3401               	retlw	1
  3771  048A  3481               	retlw	129
  3772  048B  3401               	retlw	1
  3773  048C  347F               	retlw	127
  3774  048D  3401               	retlw	1
  3775  048E  347E               	retlw	126
  3776  048F  3401               	retlw	1
  3777  0490  347D               	retlw	125
  3778  0491  3401               	retlw	1
  3779  0492  347B               	retlw	123
  3780  0493  3401               	retlw	1
  3781  0494  347A               	retlw	122
  3782  0495  3401               	retlw	1
  3783  0496  3479               	retlw	121
  3784  0497  3401               	retlw	1
  3785  0498  3478               	retlw	120
  3786  0499  3401               	retlw	1
  3787  049A  3476               	retlw	118
  3788  049B  3401               	retlw	1
  3789  049C  3475               	retlw	117
  3790  049D  3401               	retlw	1
  3791  049E  3474               	retlw	116
  3792  049F  3401               	retlw	1
  3793  04A0  3473               	retlw	115
  3794  04A1  3401               	retlw	1
  3795  04A2  3471               	retlw	113
  3796  04A3  3401               	retlw	1
  3797  04A4  3470               	retlw	112
  3798  04A5  3401               	retlw	1
  3799  04A6  346F               	retlw	111
  3800  04A7  3401               	retlw	1
  3801  04A8  346E               	retlw	110
  3802  04A9  3401               	retlw	1
  3803  04AA  3400               	retlw	0
  3804  04AB  3400               	retlw	0
  3805  04AC  3400               	retlw	0
  3806  04AD  3400               	retlw	0
  3807  04AE  3400               	retlw	0
  3808  04AF  3400               	retlw	0
  3809  04B0  3400               	retlw	0
  3810  04B1  3400               	retlw	0
  3811  04B2  3400               	retlw	0
  3812  04B3  3400               	retlw	0
  3813                           
  3814                           ;initializer for _mod5
  3815  04B4  3400               	retlw	0
  3816  04B5  3400               	retlw	0
  3817  04B6  340A               	retlw	10
  3818  04B7  3400               	retlw	0
  3819  04B8  3414               	retlw	20
  3820  04B9  3400               	retlw	0
  3821  04BA  341E               	retlw	30
  3822  04BB  3400               	retlw	0
  3823  04BC  3428               	retlw	40
  3824  04BD  3400               	retlw	0
  3825  04BE  3432               	retlw	50
  3826  04BF  3400               	retlw	0
  3827  04C0  343A               	retlw	58
  3828  04C1  3400               	retlw	0
  3829  04C2  3442               	retlw	66
  3830  04C3  3400               	retlw	0
  3831  04C4  344A               	retlw	74
  3832  04C5  3400               	retlw	0
  3833  04C6  3450               	retlw	80
  3834  04C7  3400               	retlw	0
  3835  04C8  3456               	retlw	86
  3836  04C9  3400               	retlw	0
  3837  04CA  345B               	retlw	91
  3838  04CB  3400               	retlw	0
  3839  04CC  345F               	retlw	95
  3840  04CD  3400               	retlw	0
  3841  04CE  3461               	retlw	97
  3842  04CF  3400               	retlw	0
  3843  04D0  3463               	retlw	99
  3844  04D1  3400               	retlw	0
  3845  04D2  3464               	retlw	100
  3846  04D3  3400               	retlw	0
  3847  04D4  3463               	retlw	99
  3848  04D5  3400               	retlw	0
  3849  04D6  3461               	retlw	97
  3850  04D7  3400               	retlw	0
  3851  04D8  345F               	retlw	95
  3852  04D9  3400               	retlw	0
  3853  04DA  345B               	retlw	91
  3854  04DB  3400               	retlw	0
  3855  04DC  3456               	retlw	86
  3856  04DD  3400               	retlw	0
  3857  04DE  3450               	retlw	80
  3858  04DF  3400               	retlw	0
  3859  04E0  344A               	retlw	74
  3860  04E1  3400               	retlw	0
  3861  04E2  3442               	retlw	66
  3862  04E3  3400               	retlw	0
  3863  04E4  343A               	retlw	58
  3864  04E5  3400               	retlw	0
  3865  04E6  3432               	retlw	50
  3866  04E7  3400               	retlw	0
  3867  04E8  3428               	retlw	40
  3868  04E9  3400               	retlw	0
  3869  04EA  341E               	retlw	30
  3870  04EB  3400               	retlw	0
  3871  04EC  3414               	retlw	20
  3872  04ED  3400               	retlw	0
  3873  04EE  340A               	retlw	10
  3874  04EF  3400               	retlw	0
  3875  04F0  3400               	retlw	0
  3876  04F1  3400               	retlw	0
  3877  04F2  34F6               	retlw	246
  3878  04F3  34FF               	retlw	255
  3879  04F4  34EC               	retlw	236
  3880  04F5  34FF               	retlw	255
  3881  04F6  34E2               	retlw	226
  3882  04F7  34FF               	retlw	255
  3883  04F8  34D8               	retlw	216
  3884  04F9  34FF               	retlw	255
  3885  04FA  34CE               	retlw	206
  3886  04FB  34FF               	retlw	255
  3887  04FC  34C6               	retlw	198
  3888  04FD  34FF               	retlw	255
  3889  04FE  34BE               	retlw	190
  3890  04FF  34FF               	retlw	255
  3891  0500  34B6               	retlw	182
  3892  0501  34FF               	retlw	255
  3893  0502  34B0               	retlw	176
  3894  0503  34FF               	retlw	255
  3895  0504  34AA               	retlw	170
  3896  0505  34FF               	retlw	255
  3897  0506  34A5               	retlw	165
  3898  0507  34FF               	retlw	255
  3899  0508  34A1               	retlw	161
  3900  0509  34FF               	retlw	255
  3901  050A  349F               	retlw	159
  3902  050B  34FF               	retlw	255
  3903  050C  349D               	retlw	157
  3904  050D  34FF               	retlw	255
  3905  050E  349C               	retlw	156
  3906  050F  34FF               	retlw	255
  3907  0510  349D               	retlw	157
  3908  0511  34FF               	retlw	255
  3909  0512  349F               	retlw	159
  3910  0513  34FF               	retlw	255
  3911  0514  34A1               	retlw	161
  3912  0515  34FF               	retlw	255
  3913  0516  34A5               	retlw	165
  3914  0517  34FF               	retlw	255
  3915  0518  34AA               	retlw	170
  3916  0519  34FF               	retlw	255
  3917  051A  34B0               	retlw	176
  3918  051B  34FF               	retlw	255
  3919  051C  34B6               	retlw	182
  3920  051D  34FF               	retlw	255
  3921  051E  34BE               	retlw	190
  3922  051F  34FF               	retlw	255
  3923  0520  34C6               	retlw	198
  3924  0521  34FF               	retlw	255
  3925  0522  34CE               	retlw	206
  3926  0523  34FF               	retlw	255
  3927  0524  34D8               	retlw	216
  3928  0525  34FF               	retlw	255
  3929  0526  34E2               	retlw	226
  3930  0527  34FF               	retlw	255
  3931  0528  34EC               	retlw	236
  3932  0529  34FF               	retlw	255
  3933  052A  34F6               	retlw	246
  3934  052B  34FF               	retlw	255
  3935  052C  3400               	retlw	0
  3936  052D  3400               	retlw	0
  3937  000B                     _INTCONbits	set	11
  3938  000E                     _PORTCbits	set	14
  3939  000F                     _PORTDbits	set	15
  3940  0010                     _PORTEbits	set	16
  3941  001B                     _PR2	set	27
  3942  001C                     _T2CONbits	set	28
  3943  009D                     _ADCON0bits	set	157
  3944  009E                     _ADCON1bits	set	158
  3945  009C                     _ADRESH	set	156
  3946  009B                     _ADRESL	set	155
  3947  0095                     _OPTION_REGbits	set	149
  3948  0099                     _OSCCONbits	set	153
  3949  008D                     _TRISBbits	set	141
  3950  008E                     _TRISCbits	set	142
  3951  008F                     _TRISDbits	set	143
  3952  0090                     _TRISEbits	set	144
  3953  011D                     _APFCONbits	set	285
  3954  010D                     _LATBbits	set	269
  3955  010F                     _LATDbits	set	271
  3956  0190                     _ANSELEbits	set	400
  3957  0192                     _PMADRH	set	402
  3958  0191                     _PMADRL	set	401
  3959  0195                     _PMCON1bits	set	405
  3960  0196                     _PMCON2	set	406
  3961  0194                     _PMDATH	set	404
  3962  0193                     _PMDATL	set	403
  3963  0291                     _CCPR1	set	657
  3964  0298                     _CCPR2	set	664
  3965  0293                     _CCP1CONbits	set	659
  3966  029A                     _CCP2CONbits	set	666
  3967  029D                     _CCPTMRS0	set	669
  3968  029E                     _CCPTMRS1	set	670
  3969  029F                     _CCPTMRS2	set	671
  3970  0311                     _CCPR3	set	785
  3971  0318                     _CCPR4	set	792
  3972  031C                     _CCPR5	set	796
  3973  0313                     _CCP3CONbits	set	787
  3974  031A                     _CCP4CONbits	set	794
  3975  031E                     _CCP5CONbits	set	798
  3976  030C                     _TRISFbits	set	780
  3977  030D                     _TRISGbits	set	781
  3978  038C                     _LATFbits	set	908
  3979  038D                     _LATGbits	set	909
  3980  040C                     _ANSELFbits	set	1036
  3981  061A                     _CCPR9	set	1562
  3982  061F                     _CCP10CONbits	set	1567
  3983  0613                     _CCP6CONbits	set	1555
  3984  0616                     _CCP7CONbits	set	1558
  3985  0619                     _CCP8CONbits	set	1561
  3986  061C                     _CCP9CONbits	set	1564
  3987                           
  3988                           ; #config settings
  3989  0000                     
  3990                           	psect	cinit
  3991  01F2                     start_initialization:	
  3992  01F2                     __initialization:		;BIGRAM
  3993                           
  3994                           ; Clear objects allocated to BANK0
  3995  01F2  01EB               	clrf	__pbssBANK0& (0+127)
  3996                           
  3997                           ; Clear objects allocated to BANK1
  3998  01F3  30C9               	movlw	low __pbssBANK1
  3999  01F4  0084               	movwf	4
  4000  01F5  3000               	movlw	high __pbssBANK1
  4001  01F6  0085               	movwf	5
  4002  01F7  3011               	movlw	17
  4003  01F8  00FE               	movwf	btemp
  4004  01F9  3000               	movlw	0
  4005  01FA  00FF               	movwf	btemp+1
  4006  01FB  319D  2569  3181   	fcall	clear_ram0
  4007                           
  4008                           ; Clear objects allocated to BANK2
  4009  01FE  3020               	movlw	low __pbssBANK2
  4010  01FF  0084               	movwf	4
  4011  0200  3001               	movlw	high __pbssBANK2
  4012  0201  0085               	movwf	5
  4013  0202  3038               	movlw	56
  4014  0203  00FE               	movwf	btemp
  4015  0204  3000               	movlw	0
  4016  0205  00FF               	movwf	btemp+1
  4017  0206  319D  2569  3181   	fcall	clear_ram0
  4018                           
  4019                           ; Clear objects allocated to BANK3
  4020  0209  30A0               	movlw	low __pbssBANK3
  4021  020A  0084               	movwf	4
  4022  020B  3001               	movlw	high __pbssBANK3
  4023  020C  0085               	movwf	5
  4024  020D  304C               	movlw	76
  4025  020E  00FE               	movwf	btemp
  4026  020F  3000               	movlw	0
  4027  0210  00FF               	movwf	btemp+1
  4028  0211  319D  2569  3181   	fcall	clear_ram0
  4029                           
  4030                           ; Clear objects allocated to BANK9
  4031  0214  30A0               	movlw	low __pbssBANK9
  4032  0215  0084               	movwf	4
  4033  0216  3004               	movlw	high __pbssBANK9
  4034  0217  0085               	movwf	5
  4035  0218  3040               	movlw	64
  4036  0219  00FE               	movwf	btemp
  4037  021A  3000               	movlw	0
  4038  021B  00FF               	movwf	btemp+1
  4039  021C  319D  2569  3181   	fcall	clear_ram0
  4040                           
  4041                           ; Initialize objects allocated to BIGRAM
  4042  021F  30AC               	movlw	low __pidataBIGRAM
  4043  0220  0084               	movwf	4
  4044  0221  3082               	movlw	(high __pidataBIGRAM)| (0+128)
  4045  0222  0085               	movwf	5
  4046  0223  306E               	movlw	low (0+9070)
  4047  0224  0086               	movwf	6
  4048  0225  3023               	movlw	high (0+9070)
  4049  0226  0087               	movwf	7
  4050  0227  3002               	movlw	2
  4051  0228  00FF               	movwf	btemp+1
  4052  0229  3082               	movlw	130
  4053  022A  319D  255D  3181   	fcall	init_ram
  4054                           
  4055                           ; Initialize objects allocated to COMMON
  4056  022D  3187  27FF  3181   	fcall	__pidataCOMMON	;fetch initializer
  4057  0230  00FD               	movwf	__pdataCOMMON& (0+127)
  4058                           
  4059                           ; Initialize objects allocated to BANK0
  4060  0231  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
  4061  0234  00E9               	movwf	__pdataBANK0& (0+127)
  4062  0235  3180  2003  3181   	fcall	__pidataBANK0+1	;fetch initializer
  4063  0238  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  4064                           
  4065                           ; Initialize objects allocated to BANK1
  4066  0239  3084               	movlw	low __pidataBANK1
  4067  023A  0084               	movwf	4
  4068  023B  309D               	movlw	(high __pidataBANK1)| (0+128)
  4069  023C  0085               	movwf	5
  4070  023D  30DA               	movlw	low __pdataBANK1
  4071  023E  0086               	movwf	6
  4072  023F  3000               	movlw	high __pdataBANK1
  4073  0240  0087               	movwf	7
  4074  0241  3000               	movlw	0
  4075  0242  00FF               	movwf	btemp+1
  4076  0243  3010               	movlw	16
  4077  0244  319D  255D  3181   	fcall	init_ram
  4078                           
  4079                           ; Initialize objects allocated to BANK2
  4080  0247  30EA               	movlw	low __pidataBANK2
  4081  0248  0084               	movwf	4
  4082  0249  309D               	movlw	(high __pidataBANK2)| (0+128)
  4083  024A  0085               	movwf	5
  4084  024B  3058               	movlw	low __pdataBANK2
  4085  024C  0086               	movwf	6
  4086  024D  3001               	movlw	high __pdataBANK2
  4087  024E  0087               	movwf	7
  4088  024F  3000               	movlw	0
  4089  0250  00FF               	movwf	btemp+1
  4090  0251  3017               	movlw	23
  4091  0252  319D  255D  3181   	fcall	init_ram
  4092                           
  4093                           ; Initialize objects allocated to BANK4
  4094  0255  30A0               	movlw	low __pidataBANK4
  4095  0256  0084               	movwf	4
  4096  0257  3090               	movlw	(high __pidataBANK4)| (0+128)
  4097  0258  0085               	movwf	5
  4098  0259  3020               	movlw	low __pdataBANK4
  4099  025A  0086               	movwf	6
  4100  025B  3002               	movlw	high __pdataBANK4
  4101  025C  0087               	movwf	7
  4102  025D  3000               	movlw	0
  4103  025E  00FF               	movwf	btemp+1
  4104  025F  303E               	movlw	62
  4105  0260  319D  255D  3181   	fcall	init_ram
  4106                           
  4107                           ; Initialize objects allocated to BANK5
  4108  0263  3062               	movlw	low __pidataBANK5
  4109  0264  0084               	movwf	4
  4110  0265  3090               	movlw	(high __pidataBANK5)| (0+128)
  4111  0266  0085               	movwf	5
  4112  0267  30A0               	movlw	low __pdataBANK5
  4113  0268  0086               	movwf	6
  4114  0269  3002               	movlw	high __pdataBANK5
  4115  026A  0087               	movwf	7
  4116  026B  3000               	movlw	0
  4117  026C  00FF               	movwf	btemp+1
  4118  026D  303E               	movlw	62
  4119  026E  319D  255D  3181   	fcall	init_ram
  4120                           
  4121                           ; Initialize objects allocated to BANK6
  4122  0271  3024               	movlw	low __pidataBANK6
  4123  0272  0084               	movwf	4
  4124  0273  3090               	movlw	(high __pidataBANK6)| (0+128)
  4125  0274  0085               	movwf	5
  4126  0275  3020               	movlw	low __pdataBANK6
  4127  0276  0086               	movwf	6
  4128  0277  3003               	movlw	high __pdataBANK6
  4129  0278  0087               	movwf	7
  4130  0279  3000               	movlw	0
  4131  027A  00FF               	movwf	btemp+1
  4132  027B  303E               	movlw	62
  4133  027C  319D  255D  3181   	fcall	init_ram
  4134                           
  4135                           ; Initialize objects allocated to BANK7
  4136  027F  3054               	movlw	low __pidataBANK7
  4137  0280  0084               	movwf	4
  4138  0281  3093               	movlw	(high __pidataBANK7)| (0+128)
  4139  0282  0085               	movwf	5
  4140  0283  30A0               	movlw	low __pdataBANK7
  4141  0284  0086               	movwf	6
  4142  0285  3003               	movlw	high __pdataBANK7
  4143  0286  0087               	movwf	7
  4144  0287  3000               	movlw	0
  4145  0288  00FF               	movwf	btemp+1
  4146  0289  3050               	movlw	80
  4147  028A  319D  255D  3181   	fcall	init_ram
  4148                           
  4149                           ; Initialize objects allocated to BANK8
  4150  028D  3004               	movlw	low __pidataBANK8
  4151  028E  0084               	movwf	4
  4152  028F  3093               	movlw	(high __pidataBANK8)| (0+128)
  4153  0290  0085               	movwf	5
  4154  0291  3020               	movlw	low __pdataBANK8
  4155  0292  0086               	movwf	6
  4156  0293  3004               	movlw	high __pdataBANK8
  4157  0294  0087               	movwf	7
  4158  0295  3000               	movlw	0
  4159  0296  00FF               	movwf	btemp+1
  4160  0297  3050               	movlw	80
  4161  0298  319D  255D  3181   	fcall	init_ram
  4162                           
  4163                           ; Initialize objects allocated to BANK10
  4164  029B  30C2               	movlw	low __pidataBANK10
  4165  029C  0084               	movwf	4
  4166  029D  309F               	movlw	(high __pidataBANK10)| (0+128)
  4167  029E  0085               	movwf	5
  4168  029F  3020               	movlw	low __pdataBANK10
  4169  02A0  0086               	movwf	6
  4170  02A1  3005               	movlw	high __pdataBANK10
  4171  02A2  0087               	movwf	7
  4172  02A3  3000               	movlw	0
  4173  02A4  00FF               	movwf	btemp+1
  4174  02A5  303E               	movlw	62
  4175  02A6  319D  255D         	fcall	init_ram
  4176  02A8                     end_of_initialization:	
  4177                           ;End of C runtime variable initialization code
  4178                           
  4179  02A8                     __end_of__initialization:	
  4180  02A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4181  02A9  0020               	movlb	0
  4182  02AA  318A  2A40         	ljmp	_main	;jump to C main() function
  4183                           
  4184                           	psect	dataCOMMON
  4185  007D                     __pdataCOMMON:	
  4186  007D                     _switchBypass_state:	
  4187  007D                     	ds	1
  4188                           
  4189                           	psect	bssBANK0
  4190  006B                     __pbssBANK0:	
  4191  006B                     _doubleTap_state:	
  4192  006B                     	ds	1
  4193                           
  4194                           	psect	dataBANK0
  4195  0069                     __pdataBANK0:	
  4196  0069                     _feedback_state:	
  4197  0069                     	ds	1
  4198  006A                     _longTap_state:	
  4199  006A                     	ds	1
  4200                           
  4201                           	psect	bssBANK1
  4202  00C9                     __pbssBANK1:	
  4203  00C9                     _sub_timer:	
  4204  00C9                     	ds	4
  4205  00CD                     _tap_timer:	
  4206  00CD                     	ds	4
  4207  00D1                     _timer:	
  4208  00D1                     	ds	4
  4209  00D5                     _mod_counter:	
  4210  00D5                     	ds	2
  4211  00D7                     _feedback_start:	
  4212  00D7                     	ds	1
  4213  00D8                     _suspend_blink:	
  4214  00D8                     	ds	1
  4215  00D9                     _switchTap_pressed:	
  4216  00D9                     	ds	1
  4217                           
  4218                           	psect	dataBANK1
  4219  00DA                     __pdataBANK1:	
  4220  00DA                     _baseline_delay_time:	
  4221  00DA                     	ds	4
  4222  00DE                     _delay_time:	
  4223  00DE                     	ds	4
  4224  00E2                     _bottom_push_state:	
  4225  00E2                     	ds	2
  4226  00E4                     _long_press_limit:	
  4227  00E4                     	ds	2
  4228  00E6                     _top_push_state:	
  4229  00E6                     	ds	2
  4230  00E8                     _blink_rate:	
  4231  00E8                     	ds	1
  4232  00E9                     _num_taps:	
  4233  00E9                     	ds	1
  4234                           
  4235                           	psect	bssBANK2
  4236  0120                     __pbssBANK2:	
  4237  0120                     _ledState:	
  4238  0120                     	ds	4
  4239  0124                     _mod_timer:	
  4240  0124                     	ds	4
  4241  0128                     _adjust_sub_delay:	
  4242  0128                     	ds	2
  4243  012A                     _adjusted_pot_value:	
  4244  012A                     	ds	2
  4245  012C                     _debounce_bypass:	
  4246  012C                     	ds	2
  4247  012E                     _debounce_count:	
  4248  012E                     	ds	2
  4249  0130                     _debounce_mode1:	
  4250  0130                     	ds	2
  4251  0132                     _debounce_mode2:	
  4252  0132                     	ds	2
  4253  0134                     _delay_counter:	
  4254  0134                     	ds	2
  4255  0136                     _delayfound:	
  4256  0136                     	ds	2
  4257  0138                     _feedback_timer:	
  4258  0138                     	ds	2
  4259  013A                     _knob_1_pos:	
  4260  013A                     	ds	2
  4261  013C                     _knob_2_pos:	
  4262  013C                     	ds	2
  4263  013E                     _knob_3_pos:	
  4264  013E                     	ds	2
  4265  0140                     _knob_4_pos:	
  4266  0140                     	ds	2
  4267  0142                     _knob_5_pos:	
  4268  0142                     	ds	2
  4269  0144                     _longTap_timer:	
  4270  0144                     	ds	2
  4271  0146                     _mod_value:	
  4272  0146                     	ds	2
  4273  0148                     _reset_sub_delay:	
  4274  0148                     	ds	2
  4275  014A                     _switchBypass_pressed:	
  4276  014A                     	ds	2
  4277  014C                     _switchBypass_toggle:	
  4278  014C                     	ds	2
  4279  014E                     _bottomTactile_pressed:	
  4280  014E                     	ds	1
  4281  014F                     _bypass_turning_on:	
  4282  014F                     	ds	1
  4283  0150                     _iCnt:	
  4284  0150                     	ds	1
  4285  0151                     _longTap_start:	
  4286  0151                     	ds	1
  4287  0152                     _mode1_state:	
  4288  0152                     	ds	1
  4289  0153                     _mode2_state:	
  4290  0153                     	ds	1
  4291  0154                     _preset_blink:	
  4292  0154                     	ds	1
  4293  0155                     _preset_programmning_on:	
  4294  0155                     	ds	1
  4295  0156                     _switchTap_down:	
  4296  0156                     	ds	1
  4297  0157                     _topTactile_pressed:	
  4298  0157                     	ds	1
  4299                           
  4300                           	psect	dataBANK2
  4301  0158                     __pdataBANK2:	
  4302  0158                     _blink_delay:	
  4303  0158                     	ds	2
  4304  015A                     _delay_time_changed:	
  4305  015A                     	ds	2
  4306  015C                     _knob1_prev:	
  4307  015C                     	ds	2
  4308  015E                     _knob2_prev:	
  4309  015E                     	ds	2
  4310  0160                     _knob3_prev:	
  4311  0160                     	ds	2
  4312  0162                     _knob4_prev:	
  4313  0162                     	ds	2
  4314  0164                     _knob5_prev:	
  4315  0164                     	ds	2
  4316  0166                     _mod_delay_time:	
  4317  0166                     	ds	2
  4318  0168                     _switchBypass_up:	
  4319  0168                     	ds	2
  4320  016A                     _tap_iteration:	
  4321  016A                     	ds	2
  4322  016C                     _blink_state:	
  4323  016C                     	ds	1
  4324  016D                     _currentBypassState:	
  4325  016D                     	ds	1
  4326  016E                     _switchTap_state:	
  4327  016E                     	ds	1
  4328                           
  4329                           	psect	bssBANK3
  4330  01A0                     __pbssBANK3:	
  4331  01A0                     _tap:	
  4332  01A0                     	ds	44
  4333  01CC                     _tap_history:	
  4334  01CC                     	ds	20
  4335  01E0                     _tap_total:	
  4336  01E0                     	ds	4
  4337  01E4                     _test_timer:	
  4338  01E4                     	ds	4
  4339  01E8                     _SPI_Value:	
  4340  01E8                     	ds	2
  4341  01EA                     _mod_delay_time_bak:	
  4342  01EA                     	ds	2
  4343                           
  4344                           	psect	dataBANK4
  4345  0220                     __pdataBANK4:	
  4346  0220                     _mod2:	
  4347  0220                     	ds	62
  4348                           
  4349                           	psect	dataBANK5
  4350  02A0                     __pdataBANK5:	
  4351  02A0                     _mod3:	
  4352  02A0                     	ds	62
  4353                           
  4354                           	psect	dataBANK6
  4355  0320                     __pdataBANK6:	
  4356  0320                     _mod4:	
  4357  0320                     	ds	62
  4358                           
  4359                           	psect	dataBANK7
  4360  03A0                     __pdataBANK7:	
  4361  03A0                     _B25k:	
  4362  03A0                     	ds	80
  4363                           
  4364                           	psect	dataBANK8
  4365  0420                     __pdataBANK8:	
  4366  0420                     _iB25k:	
  4367  0420                     	ds	80
  4368                           
  4369                           	psect	bssBANK9
  4370  04A0                     __pbssBANK9:	
  4371  04A0                     _myBuf:	
  4372  04A0                     	ds	64
  4373                           
  4374                           	psect	dataBANK10
  4375  0520                     __pdataBANK10:	
  4376  0520                     _mod1:	
  4377  0520                     	ds	62
  4378                           
  4379                           	psect	clrtext
  4380  1D69                     clear_ram0:	
  4381                           ;	Called with FSR0 containing the base address, and
  4382                           ;	btemp/btemp+1 has the size to clear
  4383                           
  4384  1D69  0064               	clrwdt	;clear the watchdog before getting into this loop
  4385  1D6A                     clrloop0:	
  4386  1D6A  0180               	clrf	0	;clear RAM location pointed to by FSR
  4387  1D6B  3101               	addfsr 0,1
  4388  1D6C  3001               	movlw	1
  4389  1D6D  02FE               	subwf	126,f
  4390  1D6E  3000               	movlw	0
  4391  1D6F  3BFF               	subwfb	127,f
  4392  1D70  087F               	movf	127,w
  4393  1D71  047E               	iorwf	126,w
  4394  1D72  1903               	btfsc	3,2
  4395  1D73  3400               	retlw	0	;all done for this memory range, return
  4396  1D74  2D6A               	goto	clrloop0	;have we reached the end yet?
  4397                           
  4398                           	psect	inittext
  4399  1D5D                     init_ram:	
  4400  1D5D  00FE               	movwf	126
  4401  1D5E                     initloop:	
  4402  1D5E  0012               	moviw fsr0++
  4403  1D5F  001E               	movwi fsr1++
  4404  1D60  3001               	movlw	1
  4405  1D61  02FE               	subwf	126,f
  4406  1D62  3000               	movlw	0
  4407  1D63  3BFF               	subwfb	127,f
  4408  1D64  087F               	movf	127,w
  4409  1D65  047E               	iorwf	126,w
  4410  1D66  1903               	btfsc	3,2
  4411  1D67  3400               	retlw	0
  4412  1D68  2D5E               	goto	initloop
  4413                           
  4414                           	psect	cstackBANK4
  4415  025E                     __pcstackBANK4:	
  4416  025E                     main@tmpX:	
  4417                           
  4418                           ; 4 bytes @ 0x0
  4419  025E                     	ds	4
  4420  0262                     main@xxx:	
  4421                           
  4422                           ; 2 bytes @ 0x4
  4423  0262                     	ds	2
  4424  0264                     main@i:	
  4425                           
  4426                           ; 2 bytes @ 0x6
  4427  0264                     	ds	2
  4428  0266                     main@i_407:	
  4429                           
  4430                           ; 2 bytes @ 0x8
  4431  0266                     	ds	2
  4432                           
  4433                           	psect	cstackBANK1
  4434  00A0                     __pcstackBANK1:	
  4435  00A0                     ?___fttol:	
  4436  00A0                     ___fttol@f1:	
  4437                           ; 4 bytes @ 0x0
  4438                           
  4439                           
  4440                           ; 3 bytes @ 0x0
  4441  00A0                     	ds	4
  4442  00A4                     ??___fttol:	
  4443                           
  4444                           ; 1 bytes @ 0x4
  4445  00A4                     	ds	4
  4446  00A8                     ___fttol@sign1:	
  4447                           
  4448                           ; 1 bytes @ 0x8
  4449  00A8                     	ds	1
  4450  00A9                     ___fttol@lval:	
  4451                           
  4452                           ; 4 bytes @ 0x9
  4453  00A9                     	ds	4
  4454  00AD                     ___fttol@exp1:	
  4455                           
  4456                           ; 1 bytes @ 0xD
  4457  00AD                     	ds	1
  4458  00AE                     ?_set_subdivision:	
  4459  00AE                     set_subdivision@x:	
  4460                           ; 2 bytes @ 0xE
  4461                           
  4462                           
  4463                           ; 2 bytes @ 0xE
  4464  00AE                     	ds	2
  4465  00B0                     set_subdivision@y:	
  4466                           
  4467                           ; 2 bytes @ 0x10
  4468  00B0                     	ds	2
  4469  00B2                     ??_set_subdivision:	
  4470                           
  4471                           ; 1 bytes @ 0x12
  4472  00B2                     	ds	3
  4473  00B5                     set_subdivision@tmpX:	
  4474                           
  4475                           ; 2 bytes @ 0x15
  4476  00B5                     	ds	2
  4477  00B7                     set_subdivision@scalar:	
  4478                           
  4479                           ; 3 bytes @ 0x17
  4480  00B7                     	ds	3
  4481  00BA                     ??_main:	
  4482                           
  4483                           ; 1 bytes @ 0x1A
  4484  00BA                     	ds	15
  4485                           
  4486                           	psect	cstackCOMMON
  4487  0070                     __pcstackCOMMON:	
  4488  0070                     ?_ConfigureOscillator:	
  4489  0070                     ?_InitApp:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0070                     ?_InitializeTaps:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0070                     ?_initSwitchBypass:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0070                     ?_ReadSavedSettings:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0070                     ?_read_bottom_tactile:	
  4502                           ; 1 bytes @ 0x0
  4503                           
  4504  0070                     ?_read_top_tactile:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0070                     ?_update_mode:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0070                     ?_showBootSequence:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  0070                     ?_updateSwitchBypass:	
  4514                           ; 1 bytes @ 0x0
  4515                           
  4516  0070                     ?_updateSwitchTap:	
  4517                           ; 1 bytes @ 0x0
  4518                           
  4519  0070                     ?_init_adc:	
  4520                           ; 1 bytes @ 0x0
  4521                           
  4522  0070                     ?_init_pwm:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     ?_init_timer2:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     ?_init_timer0:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     ?_getCurrentLEDState:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     ?_star_tactiles:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     ?_solidring_tactiles:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     ?_restoreLEDState:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     ?_isr:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     ?_main:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     ?i1_set_leds_top:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     i1set_leds_top@x:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555                           
  4556                           ; 2 bytes @ 0x0
  4557  0070                     	ds	2
  4558  0072                     i1set_leds_top@ledState:	
  4559                           
  4560                           ; 2 bytes @ 0x2
  4561  0072                     	ds	2
  4562  0074                     ??_isr:	
  4563  0074                     ??i1_set_leds_top:	
  4564                           ; 1 bytes @ 0x4
  4565                           
  4566                           
  4567                           ; 1 bytes @ 0x4
  4568  0074                     	ds	9
  4569                           
  4570                           	psect	cstackBANK0
  4571  0020                     __pcstackBANK0:	
  4572  0020                     isr@tmpSubDelay:	
  4573                           
  4574                           ; 2 bytes @ 0x0
  4575  0020                     	ds	2
  4576  0022                     ?_set_leds_top:	
  4577  0022                     ??_ConfigureOscillator:	
  4578                           ; 1 bytes @ 0x2
  4579                           
  4580  0022                     ??_InitApp:	
  4581                           ; 1 bytes @ 0x2
  4582                           
  4583  0022                     ??_InitializeTaps:	
  4584                           ; 1 bytes @ 0x2
  4585                           
  4586  0022                     ??_update_mode:	
  4587                           ; 1 bytes @ 0x2
  4588                           
  4589  0022                     ??_init_adc:	
  4590                           ; 1 bytes @ 0x2
  4591                           
  4592  0022                     ??_init_pwm:	
  4593                           ; 1 bytes @ 0x2
  4594                           
  4595  0022                     ??_init_timer2:	
  4596                           ; 1 bytes @ 0x2
  4597                           
  4598  0022                     ??_init_timer0:	
  4599                           ; 1 bytes @ 0x2
  4600                           
  4601  0022                     ?_set_leds_bottom:	
  4602                           ; 1 bytes @ 0x2
  4603                           
  4604  0022                     ??_getCurrentLEDState:	
  4605                           ; 1 bytes @ 0x2
  4606                           
  4607  0022                     ??_restoreLEDState:	
  4608                           ; 1 bytes @ 0x2
  4609                           
  4610  0022                     ?_setFeedbackState:	
  4611                           ; 1 bytes @ 0x2
  4612                           
  4613  0022                     ?_setLongTapState:	
  4614                           ; 1 bytes @ 0x2
  4615                           
  4616  0022                     ?_updateSwitchBypassState:	
  4617                           ; 1 bytes @ 0x2
  4618                           
  4619  0022                     ?_adc_convert:	
  4620                           ; 1 bytes @ 0x2
  4621                           
  4622  0022                     ?_FLASH_ReadWord:	
  4623                           ; 2 bytes @ 0x2
  4624                           
  4625  0022                     ?_getSwitchBypassState:	
  4626                           ; 2 bytes @ 0x2
  4627                           
  4628  0022                     ?___awdiv:	
  4629                           ; 2 bytes @ 0x2
  4630                           
  4631  0022                     ?___ftpack:	
  4632                           ; 2 bytes @ 0x2
  4633                           
  4634  0022                     ?___ftneg:	
  4635                           ; 3 bytes @ 0x2
  4636                           
  4637  0022                     ?___lmul:	
  4638                           ; 3 bytes @ 0x2
  4639                           
  4640  0022                     FLASH_ReadWord@flashAddr:	
  4641                           ; 4 bytes @ 0x2
  4642                           
  4643  0022                     set_leds_top@x:	
  4644                           ; 2 bytes @ 0x2
  4645                           
  4646  0022                     set_leds_bottom@x:	
  4647                           ; 2 bytes @ 0x2
  4648                           
  4649  0022                     updateSwitchBypassState@state:	
  4650                           ; 2 bytes @ 0x2
  4651                           
  4652  0022                     setFeedbackState@f_state:	
  4653                           ; 2 bytes @ 0x2
  4654                           
  4655  0022                     setLongTapState@f_state:	
  4656                           ; 2 bytes @ 0x2
  4657                           
  4658  0022                     ___awdiv@divisor:	
  4659                           ; 2 bytes @ 0x2
  4660                           
  4661  0022                     ___ftpack@arg:	
  4662                           ; 2 bytes @ 0x2
  4663                           
  4664  0022                     ___ftneg@f1:	
  4665                           ; 3 bytes @ 0x2
  4666                           
  4667  0022                     ___lmul@multiplier:	
  4668                           ; 3 bytes @ 0x2
  4669                           
  4670                           
  4671                           ; 4 bytes @ 0x2
  4672  0022                     	ds	1
  4673  0023                     InitializeTaps@itap:	
  4674                           
  4675                           ; 2 bytes @ 0x3
  4676  0023                     	ds	1
  4677  0024                     ??_adc_convert:	
  4678  0024                     ??_FLASH_ReadWord:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  0024                     ??_set_leds_bottom:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  0024                     ??_setFeedbackState:	
  4685                           ; 1 bytes @ 0x4
  4686                           
  4687  0024                     ??_setLongTapState:	
  4688                           ; 1 bytes @ 0x4
  4689                           
  4690  0024                     ??_updateSwitchBypassState:	
  4691                           ; 1 bytes @ 0x4
  4692                           
  4693  0024                     ??_getSwitchBypassState:	
  4694                           ; 1 bytes @ 0x4
  4695                           
  4696  0024                     FLASH_ReadWord@GIEBitValue:	
  4697                           ; 1 bytes @ 0x4
  4698                           
  4699  0024                     set_leds_top@ledState:	
  4700                           ; 1 bytes @ 0x4
  4701                           
  4702  0024                     ___awdiv@dividend:	
  4703                           ; 2 bytes @ 0x4
  4704                           
  4705                           
  4706                           ; 2 bytes @ 0x4
  4707  0024                     	ds	1
  4708  0025                     ??___ftneg:	
  4709  0025                     adc_convert@channel:	
  4710                           ; 1 bytes @ 0x5
  4711                           
  4712  0025                     ___ftpack@exp:	
  4713                           ; 1 bytes @ 0x5
  4714                           
  4715                           
  4716                           ; 1 bytes @ 0x5
  4717  0025                     	ds	1
  4718  0026                     ??_set_leds_top:	
  4719  0026                     ??_ReadSavedSettings:	
  4720                           ; 1 bytes @ 0x6
  4721                           
  4722  0026                     ??___awdiv:	
  4723                           ; 1 bytes @ 0x6
  4724                           
  4725  0026                     ___ftpack@sign:	
  4726                           ; 1 bytes @ 0x6
  4727                           
  4728  0026                     ___lmul@multiplicand:	
  4729                           ; 1 bytes @ 0x6
  4730                           
  4731                           
  4732                           ; 4 bytes @ 0x6
  4733  0026                     	ds	1
  4734  0027                     ??___ftpack:	
  4735  0027                     ___awdiv@counter:	
  4736                           ; 1 bytes @ 0x7
  4737                           
  4738                           
  4739                           ; 1 bytes @ 0x7
  4740  0027                     	ds	1
  4741  0028                     ___awdiv@sign:	
  4742                           
  4743                           ; 1 bytes @ 0x8
  4744  0028                     	ds	1
  4745  0029                     ___awdiv@quotient:	
  4746                           
  4747                           ; 2 bytes @ 0x9
  4748  0029                     	ds	1
  4749  002A                     ??___lmul:	
  4750  002A                     ?___altoft:	
  4751                           ; 1 bytes @ 0xA
  4752                           
  4753  002A                     ?___awtoft:	
  4754                           ; 3 bytes @ 0xA
  4755                           
  4756  002A                     ?___ftadd:	
  4757                           ; 3 bytes @ 0xA
  4758                           
  4759  002A                     ___awtoft@c:	
  4760                           ; 3 bytes @ 0xA
  4761                           
  4762  002A                     ___ftadd@f1:	
  4763                           ; 2 bytes @ 0xA
  4764                           
  4765  002A                     ___lmul@product:	
  4766                           ; 3 bytes @ 0xA
  4767                           
  4768  002A                     ___altoft@c:	
  4769                           ; 4 bytes @ 0xA
  4770                           
  4771                           
  4772                           ; 4 bytes @ 0xA
  4773  002A                     	ds	3
  4774  002D                     ??___awtoft:	
  4775  002D                     ___ftadd@f2:	
  4776                           ; 1 bytes @ 0xD
  4777                           
  4778                           
  4779                           ; 3 bytes @ 0xD
  4780  002D                     	ds	1
  4781  002E                     ?_wait_ms:	
  4782  002E                     ??___altoft:	
  4783                           ; 1 bytes @ 0xE
  4784                           
  4785  002E                     ?___aldiv:	
  4786                           ; 1 bytes @ 0xE
  4787                           
  4788  002E                     wait_ms@timeSec:	
  4789                           ; 4 bytes @ 0xE
  4790                           
  4791  002E                     ___aldiv@divisor:	
  4792                           ; 2 bytes @ 0xE
  4793                           
  4794                           
  4795                           ; 4 bytes @ 0xE
  4796  002E                     	ds	1
  4797  002F                     ___awtoft@sign:	
  4798                           
  4799                           ; 1 bytes @ 0xF
  4800  002F                     	ds	1
  4801  0030                     ??_wait_ms:	
  4802  0030                     ??___ftadd:	
  4803                           ; 1 bytes @ 0x10
  4804                           
  4805  0030                     ___altoft@exp:	
  4806                           ; 1 bytes @ 0x10
  4807                           
  4808  0030                     wait_ms@timemsl:	
  4809                           ; 1 bytes @ 0x10
  4810                           
  4811                           
  4812                           ; 4 bytes @ 0x10
  4813  0030                     	ds	1
  4814  0031                     ___altoft@sign:	
  4815                           
  4816                           ; 1 bytes @ 0x11
  4817  0031                     	ds	1
  4818  0032                     ___aldiv@dividend:	
  4819                           
  4820                           ; 4 bytes @ 0x12
  4821  0032                     	ds	2
  4822  0034                     ??_read_bottom_tactile:	
  4823  0034                     ??_read_top_tactile:	
  4824                           ; 1 bytes @ 0x14
  4825                           
  4826  0034                     ??_star_tactiles:	
  4827                           ; 1 bytes @ 0x14
  4828                           
  4829  0034                     ??_solidring_tactiles:	
  4830                           ; 1 bytes @ 0x14
  4831                           
  4832  0034                     ?_setSwitchBypassState:	
  4833                           ; 1 bytes @ 0x14
  4834                           
  4835  0034                     ?_setDoublePressState:	
  4836                           ; 1 bytes @ 0x14
  4837                           
  4838  0034                     ___ftadd@sign:	
  4839                           ; 1 bytes @ 0x14
  4840                           
  4841  0034                     setSwitchBypassState@f_state:	
  4842                           ; 1 bytes @ 0x14
  4843                           
  4844  0034                     setDoublePressState@f_state:	
  4845                           ; 2 bytes @ 0x14
  4846                           
  4847                           
  4848                           ; 2 bytes @ 0x14
  4849  0034                     	ds	1
  4850  0035                     ___ftadd@exp2:	
  4851                           
  4852                           ; 1 bytes @ 0x15
  4853  0035                     	ds	1
  4854  0036                     ??_setSwitchBypassState:	
  4855  0036                     ??_setDoublePressState:	
  4856                           ; 1 bytes @ 0x16
  4857                           
  4858  0036                     ??___aldiv:	
  4859                           ; 1 bytes @ 0x16
  4860                           
  4861  0036                     star_tactiles@reverse:	
  4862                           ; 1 bytes @ 0x16
  4863                           
  4864  0036                     solidring_tactiles@ring_delay:	
  4865                           ; 1 bytes @ 0x16
  4866                           
  4867  0036                     ___ftadd@exp1:	
  4868                           ; 1 bytes @ 0x16
  4869                           
  4870                           
  4871                           ; 1 bytes @ 0x16
  4872  0036                     	ds	1
  4873  0037                     ?___ftmul:	
  4874  0037                     ___aldiv@counter:	
  4875                           ; 3 bytes @ 0x17
  4876                           
  4877  0037                     star_tactiles@iLed:	
  4878                           ; 1 bytes @ 0x17
  4879                           
  4880  0037                     ___ftmul@f1:	
  4881                           ; 2 bytes @ 0x17
  4882                           
  4883                           
  4884                           ; 3 bytes @ 0x17
  4885  0037                     	ds	1
  4886  0038                     ??_initSwitchBypass:	
  4887  0038                     ??_updateSwitchBypass:	
  4888                           ; 1 bytes @ 0x18
  4889                           
  4890  0038                     ___aldiv@sign:	
  4891                           ; 1 bytes @ 0x18
  4892                           
  4893  0038                     initSwitchBypass@initState:	
  4894                           ; 1 bytes @ 0x18
  4895                           
  4896                           
  4897                           ; 2 bytes @ 0x18
  4898  0038                     	ds	1
  4899  0039                     star_tactiles@iLed_1458:	
  4900  0039                     ___aldiv@quotient:	
  4901                           ; 2 bytes @ 0x19
  4902                           
  4903                           
  4904                           ; 4 bytes @ 0x19
  4905  0039                     	ds	1
  4906  003A                     ___ftmul@f2:	
  4907                           
  4908                           ; 3 bytes @ 0x1A
  4909  003A                     	ds	1
  4910  003B                     ??_showBootSequence:	
  4911                           
  4912                           ; 1 bytes @ 0x1B
  4913  003B                     	ds	2
  4914  003D                     ??_updateSwitchTap:	
  4915  003D                     ??___ftmul:	
  4916                           ; 1 bytes @ 0x1D
  4917                           
  4918  003D                     ?_modulation:	
  4919                           ; 1 bytes @ 0x1D
  4920                           
  4921  003D                     modulation@x:	
  4922                           ; 4 bytes @ 0x1D
  4923                           
  4924                           
  4925                           ; 4 bytes @ 0x1D
  4926  003D                     	ds	4
  4927  0041                     ___ftmul@exp:	
  4928  0041                     modulation@y:	
  4929                           ; 1 bytes @ 0x21
  4930                           
  4931                           
  4932                           ; 4 bytes @ 0x21
  4933  0041                     	ds	1
  4934  0042                     ___ftmul@f3_as_product:	
  4935                           
  4936                           ; 3 bytes @ 0x22
  4937  0042                     	ds	1
  4938  0043                     updateSwitchTap@tapCntDivisor:	
  4939                           
  4940                           ; 2 bytes @ 0x23
  4941  0043                     	ds	2
  4942  0045                     ??_modulation:	
  4943  0045                     updateSwitchTap@iCnt:	
  4944                           ; 1 bytes @ 0x25
  4945                           
  4946  0045                     ___ftmul@cntr:	
  4947                           ; 1 bytes @ 0x25
  4948                           
  4949                           
  4950                           ; 1 bytes @ 0x25
  4951  0045                     	ds	1
  4952  0046                     ___ftmul@sign:	
  4953                           
  4954                           ; 1 bytes @ 0x26
  4955  0046                     	ds	1
  4956  0047                     ?___ftdiv:	
  4957  0047                     ___ftdiv@f2:	
  4958                           ; 3 bytes @ 0x27
  4959                           
  4960                           
  4961                           ; 3 bytes @ 0x27
  4962  0047                     	ds	3
  4963  004A                     ___ftdiv@f1:	
  4964                           
  4965                           ; 3 bytes @ 0x2A
  4966  004A                     	ds	3
  4967  004D                     ??___ftdiv:	
  4968                           
  4969                           ; 1 bytes @ 0x2D
  4970  004D                     	ds	4
  4971  0051                     ___ftdiv@cntr:	
  4972                           
  4973                           ; 1 bytes @ 0x31
  4974  0051                     	ds	1
  4975  0052                     ___ftdiv@f3:	
  4976                           
  4977                           ; 3 bytes @ 0x32
  4978  0052                     	ds	3
  4979  0055                     ___ftdiv@exp:	
  4980                           
  4981                           ; 1 bytes @ 0x35
  4982  0055                     	ds	1
  4983  0056                     ___ftdiv@sign:	
  4984                           
  4985                           ; 1 bytes @ 0x36
  4986  0056                     	ds	1
  4987  0057                     ?_map:	
  4988  0057                     map@x:	
  4989                           ; 3 bytes @ 0x37
  4990                           
  4991                           
  4992                           ; 3 bytes @ 0x37
  4993  0057                     	ds	3
  4994  005A                     map@in_min:	
  4995                           
  4996                           ; 3 bytes @ 0x3A
  4997  005A                     	ds	3
  4998  005D                     map@in_max:	
  4999                           
  5000                           ; 3 bytes @ 0x3D
  5001  005D                     	ds	3
  5002  0060                     map@out_min:	
  5003                           
  5004                           ; 3 bytes @ 0x40
  5005  0060                     	ds	3
  5006  0063                     map@out_max:	
  5007                           
  5008                           ; 3 bytes @ 0x43
  5009  0063                     	ds	3
  5010  0066                     ??_map:	
  5011  0066                     _map$2177:	
  5012                           ; 1 bytes @ 0x46
  5013                           
  5014                           
  5015                           ; 3 bytes @ 0x46
  5016  0066                     	ds	3
  5017                           
  5018                           	psect	maintext
  5019  0A40                     __pmaintext:	
  5020 ;;
  5021 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5022 ;;
  5023 ;; *************** function _main *****************
  5024 ;; Defined at:
  5025 ;;		line 83 in file "main.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  i               2    8[BANK4 ] int 
  5030 ;;  i               2    6[BANK4 ] int 
  5031 ;;  tmpX            4    0[BANK4 ] long 
  5032 ;;  xxx             2    4[BANK4 ] int 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : B1F/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0      15       0       0      10       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5046 ;;Total ram usage:       25 bytes
  5047 ;; Hardware stack levels required when called:    6
  5048 ;; This function calls:
  5049 ;;		_ConfigureOscillator
  5050 ;;		_InitApp
  5051 ;;		_InitializeTaps
  5052 ;;		_ReadSavedSettings
  5053 ;;		___altoft
  5054 ;;		___awdiv
  5055 ;;		___awtoft
  5056 ;;		___ftdiv
  5057 ;;		___fttol
  5058 ;;		_adc_convert
  5059 ;;		_initSwitchBypass
  5060 ;;		_map
  5061 ;;		_modulation
  5062 ;;		_read_bottom_tactile
  5063 ;;		_read_top_tactile
  5064 ;;		_set_subdivision
  5065 ;;		_showBootSequence
  5066 ;;		_updateSwitchBypass
  5067 ;;		_updateSwitchTap
  5068 ;;		_update_mode
  5069 ;; This function is called by:
  5070 ;;		Startup code after reset
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _main
  5076  0A40                     _main:	
  5077                           
  5078                           ;main.c: 84: long tmpX = (127500 + ((long)100 * (long)(1275)))/1000;
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5082  0A40  3000               	movlw	0
  5083  0A41  0024               	movlb	4	; select bank4
  5084  0A42  00E1               	movwf	(main@tmpX+3)^(0+512)
  5085  0A43  3000               	movlw	0
  5086  0A44  00E0               	movwf	(main@tmpX+2)^(0+512)
  5087  0A45  3000               	movlw	0
  5088  0A46  00DF               	movwf	(main@tmpX+1)^(0+512)
  5089  0A47  30FF               	movlw	255
  5090  0A48  00DE               	movwf	main@tmpX^(0+512)
  5091                           
  5092                           ;main.c: 85: int xxx = modulation(100, 1275);
  5093  0A49  3000               	movlw	0
  5094  0A4A  0020               	movlb	0	; select bank0
  5095  0A4B  00C0               	movwf	modulation@x+3
  5096  0A4C  3000               	movlw	0
  5097  0A4D  00BF               	movwf	modulation@x+2
  5098  0A4E  3000               	movlw	0
  5099  0A4F  00BE               	movwf	modulation@x+1
  5100  0A50  3064               	movlw	100
  5101  0A51  00BD               	movwf	modulation@x
  5102  0A52  3000               	movlw	0
  5103  0A53  00C4               	movwf	modulation@y+3
  5104  0A54  3000               	movlw	0
  5105  0A55  00C3               	movwf	modulation@y+2
  5106  0A56  3004               	movlw	4
  5107  0A57  00C2               	movwf	modulation@y+1
  5108  0A58  30FB               	movlw	251
  5109  0A59  00C1               	movwf	modulation@y
  5110  0A5A  3191  215F  318A   	fcall	_modulation
  5111  0A5D  0020               	movlb	0	; select bank0
  5112  0A5E  083E               	movf	?_modulation+1,w
  5113  0A5F  0024               	movlb	4	; select bank4
  5114  0A60  00E3               	movwf	(main@xxx+1)^(0+512)
  5115  0A61  0020               	movlb	0	; select bank0
  5116  0A62  083D               	movf	?_modulation,w
  5117  0A63  0024               	movlb	4	; select bank4
  5118  0A64  00E2               	movwf	main@xxx^(0+512)
  5119                           
  5120                           ;main.c: 88: ConfigureOscillator();
  5121  0A65  319D  2539  318A   	fcall	_ConfigureOscillator
  5122                           
  5123                           ;main.c: 89: InitApp();
  5124  0A68  319E  26B8  318A   	fcall	_InitApp
  5125                           
  5126                           ;main.c: 91: PORTEbits.RE0 = 1;
  5127  0A6B  0020               	movlb	0	; select bank0
  5128  0A6C  1410               	bsf	16,0	;volatile
  5129                           
  5130                           ;main.c: 92: PORTEbits.RE1 = 1;
  5131  0A6D  1490               	bsf	16,1	;volatile
  5132                           
  5133                           ;main.c: 93: PORTDbits.RD6 = 1;
  5134  0A6E  170F               	bsf	15,6	;volatile
  5135                           
  5136                           ;main.c: 94: PORTDbits.RD5 = 1;
  5137  0A6F  168F               	bsf	15,5	;volatile
  5138                           
  5139                           ;main.c: 95: PORTCbits.RC0 = 1;
  5140  0A70  140E               	bsf	14,0	;volatile
  5141                           
  5142                           ;main.c: 96: PORTDbits.RD7 = 1;
  5143  0A71  178F               	bsf	15,7	;volatile
  5144                           
  5145                           ;main.c: 98: InitializeTaps();
  5146  0A72  319E  263A  318A   	fcall	_InitializeTaps
  5147                           
  5148                           ;main.c: 99: initSwitchBypass();
  5149  0A75  319D  2575  318A   	fcall	_initSwitchBypass
  5150                           
  5151                           ;main.c: 102: ReadSavedSettings();
  5152  0A78  3195  251E  318A   	fcall	_ReadSavedSettings
  5153  0A7B                     l5818:	
  5154                           ;main.c: 104: while (1) {
  5155                           
  5156                           
  5157                           ;main.c: 105: read_bottom_tactile();
  5158  0A7B  3192  2227  318A   	fcall	_read_bottom_tactile
  5159                           
  5160                           ;main.c: 106: read_top_tactile();
  5161  0A7E  3192  22B5  318A   	fcall	_read_top_tactile
  5162                           
  5163                           ;main.c: 109: update_mode();
  5164  0A81  3191  21A0  318A   	fcall	_update_mode
  5165                           
  5166                           ;main.c: 111: if (PORTDbits.RD7 == 0) {
  5167  0A84  0020               	movlb	0	; select bank0
  5168  0A85  1B8F               	btfsc	15,7	;volatile
  5169  0A86  2AA5               	goto	l5832
  5170                           
  5171                           ;main.c: 112: debounce_mode1++;
  5172  0A87  3001               	movlw	1
  5173  0A88  0022               	movlb	2	; select bank2
  5174  0A89  07B0               	addwf	_debounce_mode1^(0+256),f
  5175  0A8A  3000               	movlw	0
  5176  0A8B  3DB1               	addwfc	(_debounce_mode1+1)^(0+256),f
  5177                           
  5178                           ;main.c: 113: if (debounce_mode1 > 25) {
  5179  0A8C  0831               	movf	(_debounce_mode1+1)^(0+256),w
  5180  0A8D  3A80               	xorlw	128
  5181  0A8E  0021               	movlb	1	; select bank1
  5182  0A8F  00BA               	movwf	??_main^(0+128)
  5183  0A90  3080               	movlw	128
  5184  0A91  023A               	subwf	??_main^(0+128),w
  5185  0A92  1D03               	skipz
  5186  0A93  2A97               	goto	u6615
  5187  0A94  301A               	movlw	26
  5188  0A95  0022               	movlb	2	; select bank2
  5189  0A96  0230               	subwf	_debounce_mode1^(0+256),w
  5190  0A97                     u6615:	
  5191  0A97  1C03               	skipc
  5192  0A98  2AA8               	goto	l5834
  5193                           
  5194                           ;main.c: 114: debounce_mode1 = 25;
  5195  0A99  3019               	movlw	25
  5196  0A9A  0022               	movlb	2	; select bank2
  5197  0A9B  00B0               	movwf	_debounce_mode1^(0+256)
  5198  0A9C  3000               	movlw	0
  5199  0A9D  00B1               	movwf	(_debounce_mode1^(0+256)+1)
  5200                           
  5201                           ;main.c: 118: showBootSequence();
  5202  0A9E  319E  2660  318A   	fcall	_showBootSequence
  5203  0AA1                     l298:	
  5204                           ;main.c: 121: while (PORTDbits.RD7 == 0) {
  5205                           
  5206  0AA1  0020               	movlb	0	; select bank0
  5207  0AA2  1B8F               	btfsc	15,7	;volatile
  5208  0AA3  2AA8               	goto	l5834
  5209  0AA4  2AA1               	goto	l298
  5210  0AA5                     l5832:	
  5211                           ;main.c: 122: }
  5212                           ;main.c: 123: }
  5213                           ;main.c: 124: } else {
  5214                           
  5215                           
  5216                           ;main.c: 125: debounce_mode1 = 0;
  5217  0AA5  0022               	movlb	2	; select bank2
  5218  0AA6  01B0               	clrf	_debounce_mode1^(0+256)
  5219  0AA7  01B1               	clrf	(_debounce_mode1+1)^(0+256)
  5220  0AA8                     l5834:	
  5221                           
  5222                           ;main.c: 126: }
  5223                           ;main.c: 128: updateSwitchBypass();
  5224  0AA8  3187  2716  318A   	fcall	_updateSwitchBypass
  5225                           
  5226                           ;main.c: 129: updateSwitchTap();
  5227  0AAB  3185  252E  318A   	fcall	_updateSwitchTap
  5228                           
  5229                           ;main.c: 223: knob_1_pos = adc_convert(0);
  5230  0AAE  3000               	movlw	0
  5231  0AAF  319E  2601  318A   	fcall	_adc_convert
  5232  0AB2  0020               	movlb	0	; select bank0
  5233  0AB3  0823               	movf	?_adc_convert+1,w
  5234  0AB4  0022               	movlb	2	; select bank2
  5235  0AB5  00BB               	movwf	(_knob_1_pos+1)^(0+256)
  5236  0AB6  0020               	movlb	0	; select bank0
  5237  0AB7  0822               	movf	?_adc_convert,w
  5238  0AB8  0022               	movlb	2	; select bank2
  5239  0AB9  00BA               	movwf	_knob_1_pos^(0+256)
  5240                           
  5241                           ;main.c: 224: knob_2_pos = adc_convert(1);
  5242  0ABA  3001               	movlw	1
  5243  0ABB  319E  2601  318A   	fcall	_adc_convert
  5244  0ABE  0020               	movlb	0	; select bank0
  5245  0ABF  0823               	movf	?_adc_convert+1,w
  5246  0AC0  0022               	movlb	2	; select bank2
  5247  0AC1  00BD               	movwf	(_knob_2_pos+1)^(0+256)
  5248  0AC2  0020               	movlb	0	; select bank0
  5249  0AC3  0822               	movf	?_adc_convert,w
  5250  0AC4  0022               	movlb	2	; select bank2
  5251  0AC5  00BC               	movwf	_knob_2_pos^(0+256)
  5252                           
  5253                           ;main.c: 225: knob_3_pos = adc_convert(2);
  5254  0AC6  3002               	movlw	2
  5255  0AC7  319E  2601  318A   	fcall	_adc_convert
  5256  0ACA  0020               	movlb	0	; select bank0
  5257  0ACB  0823               	movf	?_adc_convert+1,w
  5258  0ACC  0022               	movlb	2	; select bank2
  5259  0ACD  00BF               	movwf	(_knob_3_pos+1)^(0+256)
  5260  0ACE  0020               	movlb	0	; select bank0
  5261  0ACF  0822               	movf	?_adc_convert,w
  5262  0AD0  0022               	movlb	2	; select bank2
  5263  0AD1  00BE               	movwf	_knob_3_pos^(0+256)
  5264                           
  5265                           ;main.c: 226: knob_4_pos = adc_convert(3);
  5266  0AD2  3003               	movlw	3
  5267  0AD3  319E  2601  318A   	fcall	_adc_convert
  5268  0AD6  0020               	movlb	0	; select bank0
  5269  0AD7  0823               	movf	?_adc_convert+1,w
  5270  0AD8  0022               	movlb	2	; select bank2
  5271  0AD9  00C1               	movwf	(_knob_4_pos+1)^(0+256)
  5272  0ADA  0020               	movlb	0	; select bank0
  5273  0ADB  0822               	movf	?_adc_convert,w
  5274  0ADC  0022               	movlb	2	; select bank2
  5275  0ADD  00C0               	movwf	_knob_4_pos^(0+256)
  5276                           
  5277                           ;main.c: 227: knob_5_pos = adc_convert(4);
  5278  0ADE  3004               	movlw	4
  5279  0ADF  319E  2601  318A   	fcall	_adc_convert
  5280  0AE2  0020               	movlb	0	; select bank0
  5281  0AE3  0823               	movf	?_adc_convert+1,w
  5282  0AE4  0022               	movlb	2	; select bank2
  5283  0AE5  00C3               	movwf	(_knob_5_pos+1)^(0+256)
  5284  0AE6  0020               	movlb	0	; select bank0
  5285  0AE7  0822               	movf	?_adc_convert,w
  5286  0AE8  0022               	movlb	2	; select bank2
  5287  0AE9  00C2               	movwf	_knob_5_pos^(0+256)
  5288                           
  5289                           ;main.c: 254: LATBbits.LATB1 = 0;
  5290  0AEA  108D               	bcf	13,1	;volatile
  5291                           
  5292                           ;main.c: 255: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5293  0AEB  095C               	comf	_knob1_prev^(0+256),w	;volatile
  5294  0AEC  0021               	movlb	1	; select bank1
  5295  0AED  00BA               	movwf	??_main^(0+128)
  5296  0AEE  0022               	movlb	2	; select bank2
  5297  0AEF  095D               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5298  0AF0  0021               	movlb	1	; select bank1
  5299  0AF1  00BB               	movwf	(??_main^(0+128)+1)
  5300  0AF2  0ABA               	incf	??_main^(0+128),f
  5301  0AF3  1903               	skipnz
  5302  0AF4  0ABB               	incf	(??_main^(0+128)+1),f
  5303  0AF5  0022               	movlb	2	; select bank2
  5304  0AF6  083A               	movf	_knob_1_pos^(0+256),w
  5305  0AF7  0021               	movlb	1	; select bank1
  5306  0AF8  073A               	addwf	??_main^(0+128),w
  5307  0AF9  00BC               	movwf	(??_main+2)^(0+128)
  5308  0AFA  0022               	movlb	2	; select bank2
  5309  0AFB  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5310  0AFC  0021               	movlb	1	; select bank1
  5311  0AFD  3D3B               	addwfc	(??_main+1)^(0+128),w
  5312  0AFE  00BD               	movwf	(??_main+3)^(0+128)
  5313  0AFF  083D               	movf	(??_main+3)^(0+128),w
  5314  0B00  3A80               	xorlw	128
  5315  0B01  00BE               	movwf	(??_main+4)^(0+128)
  5316  0B02  3080               	movlw	128
  5317  0B03  023E               	subwf	(??_main+4)^(0+128),w
  5318  0B04  1D03               	skipz
  5319  0B05  2B08               	goto	u6635
  5320  0B06  3004               	movlw	4
  5321  0B07  023C               	subwf	(??_main+2)^(0+128),w
  5322  0B08                     u6635:	
  5323  0B08  1803               	skipnc
  5324  0B09  2B2A               	goto	l5854
  5325  0B0A  0022               	movlb	2	; select bank2
  5326  0B0B  095C               	comf	_knob1_prev^(0+256),w	;volatile
  5327  0B0C  0021               	movlb	1	; select bank1
  5328  0B0D  00BA               	movwf	??_main^(0+128)
  5329  0B0E  0022               	movlb	2	; select bank2
  5330  0B0F  095D               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5331  0B10  0021               	movlb	1	; select bank1
  5332  0B11  00BB               	movwf	(??_main^(0+128)+1)
  5333  0B12  0ABA               	incf	??_main^(0+128),f
  5334  0B13  1903               	skipnz
  5335  0B14  0ABB               	incf	(??_main^(0+128)+1),f
  5336  0B15  0022               	movlb	2	; select bank2
  5337  0B16  083A               	movf	_knob_1_pos^(0+256),w
  5338  0B17  0021               	movlb	1	; select bank1
  5339  0B18  073A               	addwf	??_main^(0+128),w
  5340  0B19  00BC               	movwf	(??_main+2)^(0+128)
  5341  0B1A  0022               	movlb	2	; select bank2
  5342  0B1B  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5343  0B1C  0021               	movlb	1	; select bank1
  5344  0B1D  3D3B               	addwfc	(??_main+1)^(0+128),w
  5345  0B1E  00BD               	movwf	(??_main+3)^(0+128)
  5346  0B1F  083D               	movf	(??_main+3)^(0+128),w
  5347  0B20  3A80               	xorlw	128
  5348  0B21  00BE               	movwf	(??_main+4)^(0+128)
  5349  0B22  307F               	movlw	127
  5350  0B23  023E               	subwf	(??_main+4)^(0+128),w
  5351  0B24  1D03               	skipz
  5352  0B25  2B28               	goto	u6645
  5353  0B26  30FD               	movlw	253
  5354  0B27  023C               	subwf	(??_main+2)^(0+128),w
  5355  0B28                     u6645:	
  5356  0B28  1803               	skipnc
  5357  0B29  2B7B               	goto	l5862
  5358  0B2A                     l5854:	
  5359                           
  5360                           ;main.c: 256: knob1_prev = knob_1_pos;
  5361  0B2A  0022               	movlb	2	; select bank2
  5362  0B2B  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5363  0B2C  00DD               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5364  0B2D  083A               	movf	_knob_1_pos^(0+256),w
  5365  0B2E  00DC               	movwf	_knob1_prev^(0+256)	;volatile
  5366                           
  5367                           ;main.c: 257: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5368  0B2F  3000               	movlw	0
  5369  0B30  0020               	movlb	0	; select bank0
  5370  0B31  00E3               	movwf	map@out_max
  5371  0B32  3048               	movlw	72
  5372  0B33  00E4               	movwf	map@out_max+1
  5373  0B34  3043               	movlw	67
  5374  0B35  00E5               	movwf	map@out_max+2
  5375  0B36  3080               	movlw	128
  5376  0B37  00E0               	movwf	map@out_min
  5377  0B38  3092               	movlw	146
  5378  0B39  00E1               	movwf	map@out_min+1
  5379  0B3A  3044               	movlw	68
  5380  0B3B  00E2               	movwf	map@out_min+2
  5381  0B3C  30C0               	movlw	192
  5382  0B3D  00DD               	movwf	map@in_max
  5383  0B3E  307F               	movlw	127
  5384  0B3F  00DE               	movwf	map@in_max+1
  5385  0B40  3044               	movlw	68
  5386  0B41  00DF               	movwf	map@in_max+2
  5387  0B42  3000               	movlw	0
  5388  0B43  00DA               	movwf	map@in_min
  5389  0B44  3000               	movlw	0
  5390  0B45  00DB               	movwf	map@in_min+1
  5391  0B46  3000               	movlw	0
  5392  0B47  00DC               	movwf	map@in_min+2
  5393  0B48  0022               	movlb	2	; select bank2
  5394  0B49  085D               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5395  0B4A  0020               	movlb	0	; select bank0
  5396  0B4B  00AB               	movwf	___awtoft@c+1
  5397  0B4C  0022               	movlb	2	; select bank2
  5398  0B4D  085C               	movf	_knob1_prev^(0+256),w	;volatile
  5399  0B4E  0020               	movlb	0	; select bank0
  5400  0B4F  00AA               	movwf	___awtoft@c
  5401  0B50  3190  2002  318A   	fcall	___awtoft
  5402  0B53  0020               	movlb	0	; select bank0
  5403  0B54  082A               	movf	?___awtoft,w
  5404  0B55  00D7               	movwf	map@x
  5405  0B56  082B               	movf	?___awtoft+1,w
  5406  0B57  00D8               	movwf	map@x+1
  5407  0B58  082C               	movf	?___awtoft+2,w
  5408  0B59  00D9               	movwf	map@x+2
  5409  0B5A  3196  2618  318A   	fcall	_map
  5410  0B5D  0020               	movlb	0	; select bank0
  5411  0B5E  0857               	movf	?_map,w
  5412  0B5F  0021               	movlb	1	; select bank1
  5413  0B60  00A0               	movwf	___fttol@f1^(0+128)
  5414  0B61  0020               	movlb	0	; select bank0
  5415  0B62  0858               	movf	?_map+1,w
  5416  0B63  0021               	movlb	1	; select bank1
  5417  0B64  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5418  0B65  0020               	movlb	0	; select bank0
  5419  0B66  0859               	movf	?_map+2,w
  5420  0B67  0021               	movlb	1	; select bank1
  5421  0B68  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5422  0B69  3195  2591  318A   	fcall	___fttol
  5423  0B6C  0021               	movlb	1	; select bank1
  5424  0B6D  0823               	movf	(?___fttol+3)^(0+128),w
  5425  0B6E  00DD               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5426  0B6F  0822               	movf	(?___fttol+2)^(0+128),w
  5427  0B70  00DC               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5428  0B71  0821               	movf	(?___fttol+1)^(0+128),w
  5429  0B72  00DB               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5430  0B73  0820               	movf	?___fttol^(0+128),w
  5431  0B74  00DA               	movwf	_baseline_delay_time^(0+128)	;volatile
  5432                           
  5433                           ;main.c: 258: delay_time_changed = 1;
  5434  0B75  3001               	movlw	1
  5435  0B76  0022               	movlb	2	; select bank2
  5436  0B77  00DA               	movwf	_delay_time_changed^(0+256)
  5437  0B78  3000               	movlw	0
  5438  0B79  00DB               	movwf	(_delay_time_changed^(0+256)+1)
  5439                           
  5440                           ;main.c: 259: LATBbits.LATB1 = 1;
  5441  0B7A  148D               	bsf	13,1	;volatile
  5442  0B7B                     l5862:	
  5443                           
  5444                           ;main.c: 260: }
  5445                           ;main.c: 270: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5446  0B7B  0022               	movlb	2	; select bank2
  5447  0B7C  095E               	comf	_knob2_prev^(0+256),w	;volatile
  5448  0B7D  0021               	movlb	1	; select bank1
  5449  0B7E  00BA               	movwf	??_main^(0+128)
  5450  0B7F  0022               	movlb	2	; select bank2
  5451  0B80  095F               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5452  0B81  0021               	movlb	1	; select bank1
  5453  0B82  00BB               	movwf	(??_main^(0+128)+1)
  5454  0B83  0ABA               	incf	??_main^(0+128),f
  5455  0B84  1903               	skipnz
  5456  0B85  0ABB               	incf	(??_main^(0+128)+1),f
  5457  0B86  0022               	movlb	2	; select bank2
  5458  0B87  083C               	movf	_knob_2_pos^(0+256),w
  5459  0B88  0021               	movlb	1	; select bank1
  5460  0B89  073A               	addwf	??_main^(0+128),w
  5461  0B8A  00BC               	movwf	(??_main+2)^(0+128)
  5462  0B8B  0022               	movlb	2	; select bank2
  5463  0B8C  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5464  0B8D  0021               	movlb	1	; select bank1
  5465  0B8E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5466  0B8F  00BD               	movwf	(??_main+3)^(0+128)
  5467  0B90  083D               	movf	(??_main+3)^(0+128),w
  5468  0B91  3A80               	xorlw	128
  5469  0B92  00BE               	movwf	(??_main+4)^(0+128)
  5470  0B93  3080               	movlw	128
  5471  0B94  023E               	subwf	(??_main+4)^(0+128),w
  5472  0B95  1D03               	skipz
  5473  0B96  2B99               	goto	u6655
  5474  0B97  3004               	movlw	4
  5475  0B98  023C               	subwf	(??_main+2)^(0+128),w
  5476  0B99                     u6655:	
  5477  0B99  1803               	skipnc
  5478  0B9A  2BBB               	goto	l5866
  5479  0B9B  0022               	movlb	2	; select bank2
  5480  0B9C  095E               	comf	_knob2_prev^(0+256),w	;volatile
  5481  0B9D  0021               	movlb	1	; select bank1
  5482  0B9E  00BA               	movwf	??_main^(0+128)
  5483  0B9F  0022               	movlb	2	; select bank2
  5484  0BA0  095F               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5485  0BA1  0021               	movlb	1	; select bank1
  5486  0BA2  00BB               	movwf	(??_main^(0+128)+1)
  5487  0BA3  0ABA               	incf	??_main^(0+128),f
  5488  0BA4  1903               	skipnz
  5489  0BA5  0ABB               	incf	(??_main^(0+128)+1),f
  5490  0BA6  0022               	movlb	2	; select bank2
  5491  0BA7  083C               	movf	_knob_2_pos^(0+256),w
  5492  0BA8  0021               	movlb	1	; select bank1
  5493  0BA9  073A               	addwf	??_main^(0+128),w
  5494  0BAA  00BC               	movwf	(??_main+2)^(0+128)
  5495  0BAB  0022               	movlb	2	; select bank2
  5496  0BAC  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5497  0BAD  0021               	movlb	1	; select bank1
  5498  0BAE  3D3B               	addwfc	(??_main+1)^(0+128),w
  5499  0BAF  00BD               	movwf	(??_main+3)^(0+128)
  5500  0BB0  083D               	movf	(??_main+3)^(0+128),w
  5501  0BB1  3A80               	xorlw	128
  5502  0BB2  00BE               	movwf	(??_main+4)^(0+128)
  5503  0BB3  307F               	movlw	127
  5504  0BB4  023E               	subwf	(??_main+4)^(0+128),w
  5505  0BB5  1D03               	skipz
  5506  0BB6  2BB9               	goto	u6665
  5507  0BB7  30FD               	movlw	253
  5508  0BB8  023C               	subwf	(??_main+2)^(0+128),w
  5509  0BB9                     u6665:	
  5510  0BB9  1803               	skipnc
  5511  0BBA  2C1A               	goto	l5874
  5512  0BBB                     l5866:	
  5513                           
  5514                           ;main.c: 271: knob2_prev = knob_2_pos;
  5515  0BBB  0022               	movlb	2	; select bank2
  5516  0BBC  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5517  0BBD  00DF               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5518  0BBE  083C               	movf	_knob_2_pos^(0+256),w
  5519  0BBF  00DE               	movwf	_knob2_prev^(0+256)	;volatile
  5520                           
  5521                           ;main.c: 272: int i = map(knob2_prev, 0, 1023, 0, 39);
  5522  0BC0  3000               	movlw	0
  5523  0BC1  0020               	movlb	0	; select bank0
  5524  0BC2  00E3               	movwf	map@out_max
  5525  0BC3  301C               	movlw	28
  5526  0BC4  00E4               	movwf	map@out_max+1
  5527  0BC5  3042               	movlw	66
  5528  0BC6  00E5               	movwf	map@out_max+2
  5529  0BC7  3000               	movlw	0
  5530  0BC8  00E0               	movwf	map@out_min
  5531  0BC9  3000               	movlw	0
  5532  0BCA  00E1               	movwf	map@out_min+1
  5533  0BCB  3000               	movlw	0
  5534  0BCC  00E2               	movwf	map@out_min+2
  5535  0BCD  30C0               	movlw	192
  5536  0BCE  00DD               	movwf	map@in_max
  5537  0BCF  307F               	movlw	127
  5538  0BD0  00DE               	movwf	map@in_max+1
  5539  0BD1  3044               	movlw	68
  5540  0BD2  00DF               	movwf	map@in_max+2
  5541  0BD3  3000               	movlw	0
  5542  0BD4  00DA               	movwf	map@in_min
  5543  0BD5  3000               	movlw	0
  5544  0BD6  00DB               	movwf	map@in_min+1
  5545  0BD7  3000               	movlw	0
  5546  0BD8  00DC               	movwf	map@in_min+2
  5547  0BD9  0022               	movlb	2	; select bank2
  5548  0BDA  085F               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5549  0BDB  0020               	movlb	0	; select bank0
  5550  0BDC  00AB               	movwf	___awtoft@c+1
  5551  0BDD  0022               	movlb	2	; select bank2
  5552  0BDE  085E               	movf	_knob2_prev^(0+256),w	;volatile
  5553  0BDF  0020               	movlb	0	; select bank0
  5554  0BE0  00AA               	movwf	___awtoft@c
  5555  0BE1  3190  2002  318A   	fcall	___awtoft
  5556  0BE4  0020               	movlb	0	; select bank0
  5557  0BE5  082A               	movf	?___awtoft,w
  5558  0BE6  00D7               	movwf	map@x
  5559  0BE7  082B               	movf	?___awtoft+1,w
  5560  0BE8  00D8               	movwf	map@x+1
  5561  0BE9  082C               	movf	?___awtoft+2,w
  5562  0BEA  00D9               	movwf	map@x+2
  5563  0BEB  3196  2618  318A   	fcall	_map
  5564  0BEE  0020               	movlb	0	; select bank0
  5565  0BEF  0857               	movf	?_map,w
  5566  0BF0  0021               	movlb	1	; select bank1
  5567  0BF1  00A0               	movwf	___fttol@f1^(0+128)
  5568  0BF2  0020               	movlb	0	; select bank0
  5569  0BF3  0858               	movf	?_map+1,w
  5570  0BF4  0021               	movlb	1	; select bank1
  5571  0BF5  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5572  0BF6  0020               	movlb	0	; select bank0
  5573  0BF7  0859               	movf	?_map+2,w
  5574  0BF8  0021               	movlb	1	; select bank1
  5575  0BF9  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5576  0BFA  3195  2591  318A   	fcall	___fttol
  5577  0BFD  0021               	movlb	1	; select bank1
  5578  0BFE  0821               	movf	(?___fttol^(0+128)+1),w
  5579  0BFF  0024               	movlb	4	; select bank4
  5580  0C00  00E5               	movwf	(main@i+1)^(0+512)
  5581  0C01  0021               	movlb	1	; select bank1
  5582  0C02  0820               	movf	?___fttol^(0+128),w
  5583  0C03  0024               	movlb	4	; select bank4
  5584  0C04  00E4               	movwf	main@i^(0+512)
  5585                           
  5586                           ;main.c: 273: CCPR2 = iB25k[i];
  5587  0C05  3564               	lslf	main@i^(0+512),w
  5588  0C06  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5589  0C07  0086               	movwf	6
  5590  0C08  3004               	movlw	4	; select bank8/9
  5591  0C09  0087               	movwf	7
  5592  0C0A  3F40               	moviw [0]fsr1
  5593  0C0B  0025               	movlb	5	; select bank5
  5594  0C0C  0098               	movwf	24	;volatile
  5595  0C0D  3F41               	moviw [1]fsr1
  5596  0C0E  0099               	movwf	25	;volatile
  5597                           
  5598                           ;main.c: 274: CCPR3 = B25k[i];
  5599  0C0F  0024               	movlb	4	; select bank4
  5600  0C10  3564               	lslf	main@i^(0+512),w
  5601  0C11  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5602  0C12  0086               	movwf	6
  5603  0C13  3003               	movlw	3	; select bank7/8
  5604  0C14  0087               	movwf	7
  5605  0C15  3F40               	moviw [0]fsr1
  5606  0C16  0026               	movlb	6	; select bank6
  5607  0C17  0091               	movwf	17	;volatile
  5608  0C18  3F41               	moviw [1]fsr1
  5609  0C19  0092               	movwf	18	;volatile
  5610  0C1A                     l5874:	
  5611                           
  5612                           ;main.c: 275: }
  5613                           ;main.c: 285: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5614  0C1A  0022               	movlb	2	; select bank2
  5615  0C1B  0960               	comf	_knob3_prev^(0+256),w	;volatile
  5616  0C1C  0021               	movlb	1	; select bank1
  5617  0C1D  00BA               	movwf	??_main^(0+128)
  5618  0C1E  0022               	movlb	2	; select bank2
  5619  0C1F  0961               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5620  0C20  0021               	movlb	1	; select bank1
  5621  0C21  00BB               	movwf	(??_main^(0+128)+1)
  5622  0C22  0ABA               	incf	??_main^(0+128),f
  5623  0C23  1903               	skipnz
  5624  0C24  0ABB               	incf	(??_main^(0+128)+1),f
  5625  0C25  0022               	movlb	2	; select bank2
  5626  0C26  083E               	movf	_knob_3_pos^(0+256),w
  5627  0C27  0021               	movlb	1	; select bank1
  5628  0C28  073A               	addwf	??_main^(0+128),w
  5629  0C29  00BC               	movwf	(??_main+2)^(0+128)
  5630  0C2A  0022               	movlb	2	; select bank2
  5631  0C2B  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5632  0C2C  0021               	movlb	1	; select bank1
  5633  0C2D  3D3B               	addwfc	(??_main+1)^(0+128),w
  5634  0C2E  00BD               	movwf	(??_main+3)^(0+128)
  5635  0C2F  083D               	movf	(??_main+3)^(0+128),w
  5636  0C30  3A80               	xorlw	128
  5637  0C31  00BE               	movwf	(??_main+4)^(0+128)
  5638  0C32  3080               	movlw	128
  5639  0C33  023E               	subwf	(??_main+4)^(0+128),w
  5640  0C34  1D03               	skipz
  5641  0C35  2C38               	goto	u6675
  5642  0C36  3004               	movlw	4
  5643  0C37  023C               	subwf	(??_main+2)^(0+128),w
  5644  0C38                     u6675:	
  5645  0C38  1803               	skipnc
  5646  0C39  2C5A               	goto	l5878
  5647  0C3A  0022               	movlb	2	; select bank2
  5648  0C3B  0960               	comf	_knob3_prev^(0+256),w	;volatile
  5649  0C3C  0021               	movlb	1	; select bank1
  5650  0C3D  00BA               	movwf	??_main^(0+128)
  5651  0C3E  0022               	movlb	2	; select bank2
  5652  0C3F  0961               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5653  0C40  0021               	movlb	1	; select bank1
  5654  0C41  00BB               	movwf	(??_main^(0+128)+1)
  5655  0C42  0ABA               	incf	??_main^(0+128),f
  5656  0C43  1903               	skipnz
  5657  0C44  0ABB               	incf	(??_main^(0+128)+1),f
  5658  0C45  0022               	movlb	2	; select bank2
  5659  0C46  083E               	movf	_knob_3_pos^(0+256),w
  5660  0C47  0021               	movlb	1	; select bank1
  5661  0C48  073A               	addwf	??_main^(0+128),w
  5662  0C49  00BC               	movwf	(??_main+2)^(0+128)
  5663  0C4A  0022               	movlb	2	; select bank2
  5664  0C4B  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5665  0C4C  0021               	movlb	1	; select bank1
  5666  0C4D  3D3B               	addwfc	(??_main+1)^(0+128),w
  5667  0C4E  00BD               	movwf	(??_main+3)^(0+128)
  5668  0C4F  083D               	movf	(??_main+3)^(0+128),w
  5669  0C50  3A80               	xorlw	128
  5670  0C51  00BE               	movwf	(??_main+4)^(0+128)
  5671  0C52  307F               	movlw	127
  5672  0C53  023E               	subwf	(??_main+4)^(0+128),w
  5673  0C54  1D03               	skipz
  5674  0C55  2C58               	goto	u6685
  5675  0C56  30FD               	movlw	253
  5676  0C57  023C               	subwf	(??_main+2)^(0+128),w
  5677  0C58                     u6685:	
  5678  0C58  1803               	skipnc
  5679  0C59  2CB9               	goto	l5886
  5680  0C5A                     l5878:	
  5681                           
  5682                           ;main.c: 286: knob3_prev = knob_3_pos;
  5683  0C5A  0022               	movlb	2	; select bank2
  5684  0C5B  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5685  0C5C  00E1               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5686  0C5D  083E               	movf	_knob_3_pos^(0+256),w
  5687  0C5E  00E0               	movwf	_knob3_prev^(0+256)	;volatile
  5688                           
  5689                           ;main.c: 287: int i = map(knob3_prev, 0, 1023, 16, 0);
  5690  0C5F  3000               	movlw	0
  5691  0C60  0020               	movlb	0	; select bank0
  5692  0C61  00E3               	movwf	map@out_max
  5693  0C62  3000               	movlw	0
  5694  0C63  00E4               	movwf	map@out_max+1
  5695  0C64  3000               	movlw	0
  5696  0C65  00E5               	movwf	map@out_max+2
  5697  0C66  3000               	movlw	0
  5698  0C67  00E0               	movwf	map@out_min
  5699  0C68  3080               	movlw	128
  5700  0C69  00E1               	movwf	map@out_min+1
  5701  0C6A  3041               	movlw	65
  5702  0C6B  00E2               	movwf	map@out_min+2
  5703  0C6C  30C0               	movlw	192
  5704  0C6D  00DD               	movwf	map@in_max
  5705  0C6E  307F               	movlw	127
  5706  0C6F  00DE               	movwf	map@in_max+1
  5707  0C70  3044               	movlw	68
  5708  0C71  00DF               	movwf	map@in_max+2
  5709  0C72  3000               	movlw	0
  5710  0C73  00DA               	movwf	map@in_min
  5711  0C74  3000               	movlw	0
  5712  0C75  00DB               	movwf	map@in_min+1
  5713  0C76  3000               	movlw	0
  5714  0C77  00DC               	movwf	map@in_min+2
  5715  0C78  0022               	movlb	2	; select bank2
  5716  0C79  0861               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5717  0C7A  0020               	movlb	0	; select bank0
  5718  0C7B  00AB               	movwf	___awtoft@c+1
  5719  0C7C  0022               	movlb	2	; select bank2
  5720  0C7D  0860               	movf	_knob3_prev^(0+256),w	;volatile
  5721  0C7E  0020               	movlb	0	; select bank0
  5722  0C7F  00AA               	movwf	___awtoft@c
  5723  0C80  3190  2002  318A   	fcall	___awtoft
  5724  0C83  0020               	movlb	0	; select bank0
  5725  0C84  082A               	movf	?___awtoft,w
  5726  0C85  00D7               	movwf	map@x
  5727  0C86  082B               	movf	?___awtoft+1,w
  5728  0C87  00D8               	movwf	map@x+1
  5729  0C88  082C               	movf	?___awtoft+2,w
  5730  0C89  00D9               	movwf	map@x+2
  5731  0C8A  3196  2618  318A   	fcall	_map
  5732  0C8D  0020               	movlb	0	; select bank0
  5733  0C8E  0857               	movf	?_map,w
  5734  0C8F  0021               	movlb	1	; select bank1
  5735  0C90  00A0               	movwf	___fttol@f1^(0+128)
  5736  0C91  0020               	movlb	0	; select bank0
  5737  0C92  0858               	movf	?_map+1,w
  5738  0C93  0021               	movlb	1	; select bank1
  5739  0C94  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5740  0C95  0020               	movlb	0	; select bank0
  5741  0C96  0859               	movf	?_map+2,w
  5742  0C97  0021               	movlb	1	; select bank1
  5743  0C98  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5744  0C99  3195  2591  318A   	fcall	___fttol
  5745  0C9C  0021               	movlb	1	; select bank1
  5746  0C9D  0821               	movf	(?___fttol^(0+128)+1),w
  5747  0C9E  0024               	movlb	4	; select bank4
  5748  0C9F  00E7               	movwf	(main@i_407+1)^(0+512)
  5749  0CA0  0021               	movlb	1	; select bank1
  5750  0CA1  0820               	movf	?___fttol^(0+128),w
  5751  0CA2  0024               	movlb	4	; select bank4
  5752  0CA3  00E6               	movwf	main@i_407^(0+512)
  5753                           
  5754                           ;main.c: 288: CCPR4 = iB25k[i];
  5755  0CA4  3566               	lslf	main@i_407^(0+512),w
  5756  0CA5  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5757  0CA6  0086               	movwf	6
  5758  0CA7  3004               	movlw	4	; select bank8/9
  5759  0CA8  0087               	movwf	7
  5760  0CA9  3F40               	moviw [0]fsr1
  5761  0CAA  0026               	movlb	6	; select bank6
  5762  0CAB  0098               	movwf	24	;volatile
  5763  0CAC  3F41               	moviw [1]fsr1
  5764  0CAD  0099               	movwf	25	;volatile
  5765                           
  5766                           ;main.c: 289: CCPR5 = B25k[i];
  5767  0CAE  0024               	movlb	4	; select bank4
  5768  0CAF  3566               	lslf	main@i_407^(0+512),w
  5769  0CB0  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5770  0CB1  0086               	movwf	6
  5771  0CB2  3003               	movlw	3	; select bank7/8
  5772  0CB3  0087               	movwf	7
  5773  0CB4  3F40               	moviw [0]fsr1
  5774  0CB5  0026               	movlb	6	; select bank6
  5775  0CB6  009C               	movwf	28	;volatile
  5776  0CB7  3F41               	moviw [1]fsr1
  5777  0CB8  009D               	movwf	29	;volatile
  5778  0CB9                     l5886:	
  5779                           
  5780                           ;main.c: 290: }
  5781                           ;main.c: 300: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5782  0CB9  0022               	movlb	2	; select bank2
  5783  0CBA  0962               	comf	_knob4_prev^(0+256),w	;volatile
  5784  0CBB  0021               	movlb	1	; select bank1
  5785  0CBC  00BA               	movwf	??_main^(0+128)
  5786  0CBD  0022               	movlb	2	; select bank2
  5787  0CBE  0963               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5788  0CBF  0021               	movlb	1	; select bank1
  5789  0CC0  00BB               	movwf	(??_main^(0+128)+1)
  5790  0CC1  0ABA               	incf	??_main^(0+128),f
  5791  0CC2  1903               	skipnz
  5792  0CC3  0ABB               	incf	(??_main^(0+128)+1),f
  5793  0CC4  0022               	movlb	2	; select bank2
  5794  0CC5  0840               	movf	_knob_4_pos^(0+256),w
  5795  0CC6  0021               	movlb	1	; select bank1
  5796  0CC7  073A               	addwf	??_main^(0+128),w
  5797  0CC8  00BC               	movwf	(??_main+2)^(0+128)
  5798  0CC9  0022               	movlb	2	; select bank2
  5799  0CCA  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5800  0CCB  0021               	movlb	1	; select bank1
  5801  0CCC  3D3B               	addwfc	(??_main+1)^(0+128),w
  5802  0CCD  00BD               	movwf	(??_main+3)^(0+128)
  5803  0CCE  083D               	movf	(??_main+3)^(0+128),w
  5804  0CCF  3A80               	xorlw	128
  5805  0CD0  00BE               	movwf	(??_main+4)^(0+128)
  5806  0CD1  3080               	movlw	128
  5807  0CD2  023E               	subwf	(??_main+4)^(0+128),w
  5808  0CD3  1D03               	skipz
  5809  0CD4  2CD7               	goto	u6695
  5810  0CD5  3004               	movlw	4
  5811  0CD6  023C               	subwf	(??_main+2)^(0+128),w
  5812  0CD7                     u6695:	
  5813  0CD7  1803               	skipnc
  5814  0CD8  2CF9               	goto	l5890
  5815  0CD9  0022               	movlb	2	; select bank2
  5816  0CDA  0962               	comf	_knob4_prev^(0+256),w	;volatile
  5817  0CDB  0021               	movlb	1	; select bank1
  5818  0CDC  00BA               	movwf	??_main^(0+128)
  5819  0CDD  0022               	movlb	2	; select bank2
  5820  0CDE  0963               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5821  0CDF  0021               	movlb	1	; select bank1
  5822  0CE0  00BB               	movwf	(??_main^(0+128)+1)
  5823  0CE1  0ABA               	incf	??_main^(0+128),f
  5824  0CE2  1903               	skipnz
  5825  0CE3  0ABB               	incf	(??_main^(0+128)+1),f
  5826  0CE4  0022               	movlb	2	; select bank2
  5827  0CE5  0840               	movf	_knob_4_pos^(0+256),w
  5828  0CE6  0021               	movlb	1	; select bank1
  5829  0CE7  073A               	addwf	??_main^(0+128),w
  5830  0CE8  00BC               	movwf	(??_main+2)^(0+128)
  5831  0CE9  0022               	movlb	2	; select bank2
  5832  0CEA  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5833  0CEB  0021               	movlb	1	; select bank1
  5834  0CEC  3D3B               	addwfc	(??_main+1)^(0+128),w
  5835  0CED  00BD               	movwf	(??_main+3)^(0+128)
  5836  0CEE  083D               	movf	(??_main+3)^(0+128),w
  5837  0CEF  3A80               	xorlw	128
  5838  0CF0  00BE               	movwf	(??_main+4)^(0+128)
  5839  0CF1  307F               	movlw	127
  5840  0CF2  023E               	subwf	(??_main+4)^(0+128),w
  5841  0CF3  1D03               	skipz
  5842  0CF4  2CF7               	goto	u6705
  5843  0CF5  30FD               	movlw	253
  5844  0CF6  023C               	subwf	(??_main+2)^(0+128),w
  5845  0CF7                     u6705:	
  5846  0CF7  1803               	skipnc
  5847  0CF8  2D43               	goto	l5894
  5848  0CF9                     l5890:	
  5849                           
  5850                           ;main.c: 301: knob4_prev = knob_4_pos;
  5851  0CF9  0022               	movlb	2	; select bank2
  5852  0CFA  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5853  0CFB  00E3               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5854  0CFC  0840               	movf	_knob_4_pos^(0+256),w
  5855  0CFD  00E2               	movwf	_knob4_prev^(0+256)	;volatile
  5856                           
  5857                           ;main.c: 302: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5858  0CFE  3000               	movlw	0
  5859  0CFF  0020               	movlb	0	; select bank0
  5860  0D00  00E3               	movwf	map@out_max
  5861  0D01  307A               	movlw	122
  5862  0D02  00E4               	movwf	map@out_max+1
  5863  0D03  3044               	movlw	68
  5864  0D04  00E5               	movwf	map@out_max+2
  5865  0D05  3000               	movlw	0
  5866  0D06  00E0               	movwf	map@out_min
  5867  0D07  3070               	movlw	112
  5868  0D08  00E1               	movwf	map@out_min+1
  5869  0D09  3042               	movlw	66
  5870  0D0A  00E2               	movwf	map@out_min+2
  5871  0D0B  30C0               	movlw	192
  5872  0D0C  00DD               	movwf	map@in_max
  5873  0D0D  307F               	movlw	127
  5874  0D0E  00DE               	movwf	map@in_max+1
  5875  0D0F  3044               	movlw	68
  5876  0D10  00DF               	movwf	map@in_max+2
  5877  0D11  3000               	movlw	0
  5878  0D12  00DA               	movwf	map@in_min
  5879  0D13  3000               	movlw	0
  5880  0D14  00DB               	movwf	map@in_min+1
  5881  0D15  3000               	movlw	0
  5882  0D16  00DC               	movwf	map@in_min+2
  5883  0D17  0022               	movlb	2	; select bank2
  5884  0D18  0863               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5885  0D19  0020               	movlb	0	; select bank0
  5886  0D1A  00AB               	movwf	___awtoft@c+1
  5887  0D1B  0022               	movlb	2	; select bank2
  5888  0D1C  0862               	movf	_knob4_prev^(0+256),w	;volatile
  5889  0D1D  0020               	movlb	0	; select bank0
  5890  0D1E  00AA               	movwf	___awtoft@c
  5891  0D1F  3190  2002  318A   	fcall	___awtoft
  5892  0D22  0020               	movlb	0	; select bank0
  5893  0D23  082A               	movf	?___awtoft,w
  5894  0D24  00D7               	movwf	map@x
  5895  0D25  082B               	movf	?___awtoft+1,w
  5896  0D26  00D8               	movwf	map@x+1
  5897  0D27  082C               	movf	?___awtoft+2,w
  5898  0D28  00D9               	movwf	map@x+2
  5899  0D29  3196  2618  318A   	fcall	_map
  5900  0D2C  0020               	movlb	0	; select bank0
  5901  0D2D  0857               	movf	?_map,w
  5902  0D2E  0021               	movlb	1	; select bank1
  5903  0D2F  00A0               	movwf	___fttol@f1^(0+128)
  5904  0D30  0020               	movlb	0	; select bank0
  5905  0D31  0858               	movf	?_map+1,w
  5906  0D32  0021               	movlb	1	; select bank1
  5907  0D33  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5908  0D34  0020               	movlb	0	; select bank0
  5909  0D35  0859               	movf	?_map+2,w
  5910  0D36  0021               	movlb	1	; select bank1
  5911  0D37  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5912  0D38  3195  2591  318A   	fcall	___fttol
  5913  0D3B  0021               	movlb	1	; select bank1
  5914  0D3C  0821               	movf	(?___fttol^(0+128)+1),w
  5915  0D3D  0022               	movlb	2	; select bank2
  5916  0D3E  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  5917  0D3F  0021               	movlb	1	; select bank1
  5918  0D40  0820               	movf	?___fttol^(0+128),w
  5919  0D41  0022               	movlb	2	; select bank2
  5920  0D42  00E6               	movwf	_mod_delay_time^(0+256)
  5921  0D43                     l5894:	
  5922                           
  5923                           ;main.c: 303: }
  5924                           ;main.c: 311: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5925  0D43  0022               	movlb	2	; select bank2
  5926  0D44  0964               	comf	_knob5_prev^(0+256),w	;volatile
  5927  0D45  0021               	movlb	1	; select bank1
  5928  0D46  00BA               	movwf	??_main^(0+128)
  5929  0D47  0022               	movlb	2	; select bank2
  5930  0D48  0965               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5931  0D49  0021               	movlb	1	; select bank1
  5932  0D4A  00BB               	movwf	(??_main^(0+128)+1)
  5933  0D4B  0ABA               	incf	??_main^(0+128),f
  5934  0D4C  1903               	skipnz
  5935  0D4D  0ABB               	incf	(??_main^(0+128)+1),f
  5936  0D4E  0022               	movlb	2	; select bank2
  5937  0D4F  0842               	movf	_knob_5_pos^(0+256),w
  5938  0D50  0021               	movlb	1	; select bank1
  5939  0D51  073A               	addwf	??_main^(0+128),w
  5940  0D52  00BC               	movwf	(??_main+2)^(0+128)
  5941  0D53  0022               	movlb	2	; select bank2
  5942  0D54  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5943  0D55  0021               	movlb	1	; select bank1
  5944  0D56  3D3B               	addwfc	(??_main+1)^(0+128),w
  5945  0D57  00BD               	movwf	(??_main+3)^(0+128)
  5946  0D58  083D               	movf	(??_main+3)^(0+128),w
  5947  0D59  3A80               	xorlw	128
  5948  0D5A  00BE               	movwf	(??_main+4)^(0+128)
  5949  0D5B  3080               	movlw	128
  5950  0D5C  023E               	subwf	(??_main+4)^(0+128),w
  5951  0D5D  1D03               	skipz
  5952  0D5E  2D61               	goto	u6715
  5953  0D5F  3004               	movlw	4
  5954  0D60  023C               	subwf	(??_main+2)^(0+128),w
  5955  0D61                     u6715:	
  5956  0D61  1803               	skipnc
  5957  0D62  2D83               	goto	l5898
  5958  0D63  0022               	movlb	2	; select bank2
  5959  0D64  0964               	comf	_knob5_prev^(0+256),w	;volatile
  5960  0D65  0021               	movlb	1	; select bank1
  5961  0D66  00BA               	movwf	??_main^(0+128)
  5962  0D67  0022               	movlb	2	; select bank2
  5963  0D68  0965               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5964  0D69  0021               	movlb	1	; select bank1
  5965  0D6A  00BB               	movwf	(??_main^(0+128)+1)
  5966  0D6B  0ABA               	incf	??_main^(0+128),f
  5967  0D6C  1903               	skipnz
  5968  0D6D  0ABB               	incf	(??_main^(0+128)+1),f
  5969  0D6E  0022               	movlb	2	; select bank2
  5970  0D6F  0842               	movf	_knob_5_pos^(0+256),w
  5971  0D70  0021               	movlb	1	; select bank1
  5972  0D71  073A               	addwf	??_main^(0+128),w
  5973  0D72  00BC               	movwf	(??_main+2)^(0+128)
  5974  0D73  0022               	movlb	2	; select bank2
  5975  0D74  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5976  0D75  0021               	movlb	1	; select bank1
  5977  0D76  3D3B               	addwfc	(??_main+1)^(0+128),w
  5978  0D77  00BD               	movwf	(??_main+3)^(0+128)
  5979  0D78  083D               	movf	(??_main+3)^(0+128),w
  5980  0D79  3A80               	xorlw	128
  5981  0D7A  00BE               	movwf	(??_main+4)^(0+128)
  5982  0D7B  307F               	movlw	127
  5983  0D7C  023E               	subwf	(??_main+4)^(0+128),w
  5984  0D7D  1D03               	skipz
  5985  0D7E  2D81               	goto	u6725
  5986  0D7F  30FD               	movlw	253
  5987  0D80  023C               	subwf	(??_main+2)^(0+128),w
  5988  0D81                     u6725:	
  5989  0D81  1803               	skipnc
  5990  0D82  2DCD               	goto	l5902
  5991  0D83                     l5898:	
  5992                           
  5993                           ;main.c: 312: knob5_prev = knob_5_pos;
  5994  0D83  0022               	movlb	2	; select bank2
  5995  0D84  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5996  0D85  00E5               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5997  0D86  0842               	movf	_knob_5_pos^(0+256),w
  5998  0D87  00E4               	movwf	_knob5_prev^(0+256)	;volatile
  5999                           
  6000                           ;main.c: 313: adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  6001  0D88  3000               	movlw	0
  6002  0D89  0020               	movlb	0	; select bank0
  6003  0D8A  00E3               	movwf	map@out_max
  6004  0D8B  3000               	movlw	0
  6005  0D8C  00E4               	movwf	map@out_max+1
  6006  0D8D  3000               	movlw	0
  6007  0D8E  00E5               	movwf	map@out_max+2
  6008  0D8F  3060               	movlw	96
  6009  0D90  00E0               	movwf	map@out_min
  6010  0D91  309F               	movlw	159
  6011  0D92  00E1               	movwf	map@out_min+1
  6012  0D93  3044               	movlw	68
  6013  0D94  00E2               	movwf	map@out_min+2
  6014  0D95  30C0               	movlw	192
  6015  0D96  00DD               	movwf	map@in_max
  6016  0D97  307F               	movlw	127
  6017  0D98  00DE               	movwf	map@in_max+1
  6018  0D99  3044               	movlw	68
  6019  0D9A  00DF               	movwf	map@in_max+2
  6020  0D9B  3000               	movlw	0
  6021  0D9C  00DA               	movwf	map@in_min
  6022  0D9D  3000               	movlw	0
  6023  0D9E  00DB               	movwf	map@in_min+1
  6024  0D9F  3000               	movlw	0
  6025  0DA0  00DC               	movwf	map@in_min+2
  6026  0DA1  0022               	movlb	2	; select bank2
  6027  0DA2  0865               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6028  0DA3  0020               	movlb	0	; select bank0
  6029  0DA4  00AB               	movwf	___awtoft@c+1
  6030  0DA5  0022               	movlb	2	; select bank2
  6031  0DA6  0864               	movf	_knob5_prev^(0+256),w	;volatile
  6032  0DA7  0020               	movlb	0	; select bank0
  6033  0DA8  00AA               	movwf	___awtoft@c
  6034  0DA9  3190  2002  318A   	fcall	___awtoft
  6035  0DAC  0020               	movlb	0	; select bank0
  6036  0DAD  082A               	movf	?___awtoft,w
  6037  0DAE  00D7               	movwf	map@x
  6038  0DAF  082B               	movf	?___awtoft+1,w
  6039  0DB0  00D8               	movwf	map@x+1
  6040  0DB1  082C               	movf	?___awtoft+2,w
  6041  0DB2  00D9               	movwf	map@x+2
  6042  0DB3  3196  2618  318A   	fcall	_map
  6043  0DB6  0020               	movlb	0	; select bank0
  6044  0DB7  0857               	movf	?_map,w
  6045  0DB8  0021               	movlb	1	; select bank1
  6046  0DB9  00A0               	movwf	___fttol@f1^(0+128)
  6047  0DBA  0020               	movlb	0	; select bank0
  6048  0DBB  0858               	movf	?_map+1,w
  6049  0DBC  0021               	movlb	1	; select bank1
  6050  0DBD  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6051  0DBE  0020               	movlb	0	; select bank0
  6052  0DBF  0859               	movf	?_map+2,w
  6053  0DC0  0021               	movlb	1	; select bank1
  6054  0DC1  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6055  0DC2  3195  2591  318A   	fcall	___fttol
  6056  0DC5  0021               	movlb	1	; select bank1
  6057  0DC6  0821               	movf	(?___fttol^(0+128)+1),w
  6058  0DC7  0022               	movlb	2	; select bank2
  6059  0DC8  00AB               	movwf	(_adjusted_pot_value+1)^(0+256)
  6060  0DC9  0021               	movlb	1	; select bank1
  6061  0DCA  0820               	movf	?___fttol^(0+128),w
  6062  0DCB  0022               	movlb	2	; select bank2
  6063  0DCC  00AA               	movwf	_adjusted_pot_value^(0+256)
  6064  0DCD                     l5902:	
  6065                           
  6066                           ;main.c: 314: }
  6067                           ;main.c: 328: LATBbits.LATB0 = 0;
  6068  0DCD  0022               	movlb	2	; select bank2
  6069  0DCE  100D               	bcf	13,0	;volatile
  6070                           
  6071                           ;main.c: 329: if (mod_timer >= mod_delay_time) {
  6072  0DCF  0866               	movf	_mod_delay_time^(0+256),w
  6073  0DD0  0021               	movlb	1	; select bank1
  6074  0DD1  00BA               	movwf	??_main^(0+128)
  6075  0DD2  0022               	movlb	2	; select bank2
  6076  0DD3  0867               	movf	(_mod_delay_time+1)^(0+256),w
  6077  0DD4  0021               	movlb	1	; select bank1
  6078  0DD5  00BB               	movwf	(??_main^(0+128)+1)
  6079  0DD6  3000               	movlw	0
  6080  0DD7  1BBB               	btfsc	(??_main^(0+128)+1),7
  6081  0DD8  30FF               	movlw	255
  6082  0DD9  00BC               	movwf	(??_main^(0+128)+2)
  6083  0DDA  00BD               	movwf	(??_main^(0+128)+3)
  6084  0DDB  0022               	movlb	2	; select bank2
  6085  0DDC  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  6086  0DDD  3A80               	xorlw	128
  6087  0DDE  0021               	movlb	1	; select bank1
  6088  0DDF  00BE               	movwf	(??_main+4)^(0+128)
  6089  0DE0  083D               	movf	(??_main+3)^(0+128),w
  6090  0DE1  3A80               	xorlw	128
  6091  0DE2  023E               	subwf	(??_main+4)^(0+128),w
  6092  0DE3  0022               	movlb	2	; select bank2
  6093  0DE4  1D03               	skipz
  6094  0DE5  2DF6               	goto	u6733
  6095  0DE6  0021               	movlb	1	; select bank1
  6096  0DE7  083C               	movf	(??_main+2)^(0+128),w
  6097  0DE8  0022               	movlb	2	; select bank2
  6098  0DE9  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  6099  0DEA  1D03               	skipz
  6100  0DEB  2DF6               	goto	u6733
  6101  0DEC  0021               	movlb	1	; select bank1
  6102  0DED  083B               	movf	(??_main+1)^(0+128),w
  6103  0DEE  0022               	movlb	2	; select bank2
  6104  0DEF  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  6105  0DF0  1D03               	skipz
  6106  0DF1  2DF6               	goto	u6733
  6107  0DF2  0021               	movlb	1	; select bank1
  6108  0DF3  083A               	movf	??_main^(0+128),w
  6109  0DF4  0022               	movlb	2	; select bank2
  6110  0DF5  0224               	subwf	_mod_timer^(0+256),w	;volatile
  6111  0DF6                     u6733:	
  6112  0DF6  1C03               	skipc
  6113  0DF7  2F45               	goto	l5976
  6114                           
  6115                           ;main.c: 330: LATBbits.LATB0 = 1;
  6116  0DF8  140D               	bsf	13,0	;volatile
  6117                           
  6118                           ;main.c: 331: mod_counter = mod_counter + 1;
  6119  0DF9  0021               	movlb	1	; select bank1
  6120  0DFA  0855               	movf	_mod_counter^(0+128),w
  6121  0DFB  3E01               	addlw	1
  6122  0DFC  00D5               	movwf	_mod_counter^(0+128)
  6123  0DFD  3000               	movlw	0
  6124  0DFE  3D56               	addwfc	(_mod_counter+1)^(0+128),w
  6125  0DFF  00D6               	movwf	(_mod_counter+1)^(0+128)
  6126                           
  6127                           ;main.c: 332: mod_timer = 0;
  6128  0E00  3000               	movlw	0
  6129  0E01  0022               	movlb	2	; select bank2
  6130  0E02  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6131  0E03  3000               	movlw	0
  6132  0E04  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6133  0E05  3000               	movlw	0
  6134  0E06  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6135  0E07  3000               	movlw	0
  6136  0E08  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6137                           
  6138                           ;main.c: 334: if (bottom_push_state == 1 || bottom_push_state == 5) {
  6139  0E09  0021               	movlb	1	; select bank1
  6140  0E0A  0362               	decf	_bottom_push_state^(0+128),w
  6141  0E0B  0463               	iorwf	(_bottom_push_state+1)^(0+128),w
  6142  0E0C  1903               	btfsc	3,2
  6143  0E0D  2E13               	goto	l5916
  6144  0E0E  3005               	movlw	5
  6145  0E0F  0662               	xorwf	_bottom_push_state^(0+128),w
  6146  0E10  0463               	iorwf	(_bottom_push_state+1)^(0+128),w
  6147  0E11  1D03               	btfss	3,2
  6148  0E12  2E1C               	goto	l5920
  6149  0E13                     l5916:	
  6150                           
  6151                           ;main.c: 335: if (mod_counter >= 61) {
  6152  0E13  0856               	movf	(_mod_counter+1)^(0+128),w
  6153  0E14  3A80               	xorlw	128
  6154  0E15  00BA               	movwf	??_main^(0+128)
  6155  0E16  3080               	movlw	128
  6156  0E17  023A               	subwf	??_main^(0+128),w
  6157  0E18  1D03               	skipz
  6158  0E19  2E25               	goto	u6775
  6159  0E1A  303D               	movlw	61
  6160  0E1B  2E24               	goto	L1
  6161  0E1C                     l5920:	
  6162                           ;main.c: 337: }
  6163                           ;main.c: 338: } else {
  6164                           
  6165                           ;main.c: 336: mod_counter = 0;
  6166                           
  6167                           
  6168                           ;main.c: 339: if (mod_counter > 31) {
  6169  0E1C  0856               	movf	(_mod_counter+1)^(0+128),w
  6170  0E1D  3A80               	xorlw	128
  6171  0E1E  00BA               	movwf	??_main^(0+128)
  6172  0E1F  3080               	movlw	128
  6173  0E20  023A               	subwf	??_main^(0+128),w
  6174  0E21  1D03               	skipz
  6175  0E22  2E25               	goto	u6775
  6176  0E23  3020               	movlw	32
  6177  0E24                     L1:	
  6178  0E24  0255               	subwf	_mod_counter^(0+128),w
  6179  0E25                     u6775:	
  6180  0E25  1C03               	skipc
  6181  0E26  2E85               	goto	l5952
  6182                           
  6183                           ;main.c: 340: mod_counter = 0;
  6184  0E27  0021               	movlb	1	; select bank1
  6185  0E28  01D5               	clrf	_mod_counter^(0+128)
  6186  0E29  01D6               	clrf	(_mod_counter+1)^(0+128)
  6187                           
  6188                           ;main.c: 341: }
  6189                           ;main.c: 342: }
  6190                           ;main.c: 346: switch (bottom_push_state) {
  6191  0E2A  2E85               	goto	l5952
  6192  0E2B                     l5924:	
  6193                           ;main.c: 347: case 1:
  6194                           
  6195                           
  6196                           ;main.c: 348: mod_value = mod5[mod_counter];
  6197  0E2B  0856               	movf	(_mod_counter+1)^(0+128),w
  6198  0E2C  00BB               	movwf	(??_main^(0+128)+1)
  6199  0E2D  0855               	movf	_mod_counter^(0+128),w
  6200  0E2E  00BA               	movwf	??_main^(0+128)
  6201  0E2F  35BA               	lslf	??_main^(0+128),f
  6202  0E30  0DBB               	rlf	(??_main^(0+128)+1),f
  6203  0E31  3076               	movlw	118
  6204  0E32  00BC               	movwf	(??_main+2)^(0+128)
  6205  0E33  3025               	movlw	37
  6206  0E34  00BD               	movwf	((??_main+2)^(0+128)+1)
  6207  0E35  083A               	movf	??_main^(0+128),w
  6208  0E36  073C               	addwf	(??_main+2)^(0+128),w
  6209  0E37  0086               	movwf	6
  6210  0E38  083B               	movf	(??_main+1)^(0+128),w
  6211  0E39  3D3D               	addwfc	(??_main+3)^(0+128),w
  6212  0E3A  0087               	movwf	7
  6213  0E3B  3F40               	moviw [0]fsr1
  6214  0E3C  0022               	movlb	2	; select bank2
  6215  0E3D  00C6               	movwf	_mod_value^(0+256)
  6216  0E3E  3F41               	moviw [1]fsr1
  6217  0E3F  2E60               	goto	L4
  6218  0E40                     l5928:	
  6219                           ;main.c: 351: case 2:
  6220                           
  6221                           ;main.c: 350: break;
  6222                           
  6223                           ;main.c: 349: PORTCbits.RC4 = 0;
  6224                           
  6225                           
  6226                           ;main.c: 352: mod_value = mod2[mod_counter];
  6227  0E40  0021               	movlb	1	; select bank1
  6228  0E41  3555               	lslf	_mod_counter^(0+128),w
  6229  0E42  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  6230  0E43  0086               	movwf	6
  6231  0E44  3002               	movlw	2	; select bank4/5
  6232  0E45  0087               	movwf	7
  6233  0E46  3F40               	moviw [0]fsr1
  6234  0E47  0022               	movlb	2	; select bank2
  6235  0E48  00C6               	movwf	_mod_value^(0+256)
  6236  0E49  3F41               	moviw [1]fsr1
  6237  0E4A  2E60               	goto	L4
  6238  0E4B                     l5932:	
  6239                           ;main.c: 355: case 3:
  6240                           
  6241                           ;main.c: 354: break;
  6242                           
  6243                           ;main.c: 353: PORTCbits.RC4 = 0;
  6244                           
  6245                           
  6246                           ;main.c: 356: mod_value = mod3[mod_counter];
  6247  0E4B  0021               	movlb	1	; select bank1
  6248  0E4C  3555               	lslf	_mod_counter^(0+128),w
  6249  0E4D  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  6250  0E4E  0086               	movwf	6
  6251  0E4F  3002               	movlw	2	; select bank5/6
  6252  0E50  0087               	movwf	7
  6253  0E51  3F40               	moviw [0]fsr1
  6254  0E52  0022               	movlb	2	; select bank2
  6255  0E53  00C6               	movwf	_mod_value^(0+256)
  6256  0E54  3F41               	moviw [1]fsr1
  6257  0E55  2E60               	goto	L4
  6258  0E56                     l5936:	
  6259                           ;main.c: 359: case 4:
  6260                           
  6261                           ;main.c: 358: break;
  6262                           
  6263                           ;main.c: 357: PORTCbits.RC4 = 0;
  6264                           
  6265                           
  6266                           ;main.c: 360: mod_value = mod4[mod_counter];
  6267  0E56  0021               	movlb	1	; select bank1
  6268  0E57  3555               	lslf	_mod_counter^(0+128),w
  6269  0E58  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  6270  0E59  0086               	movwf	6
  6271  0E5A  3003               	movlw	3	; select bank6/7
  6272  0E5B  0087               	movwf	7
  6273  0E5C  3F40               	moviw [0]fsr1
  6274  0E5D  0022               	movlb	2	; select bank2
  6275  0E5E  00C6               	movwf	_mod_value^(0+256)
  6276  0E5F  3F41               	moviw [1]fsr1
  6277  0E60                     L4:	
  6278  0E60  00C7               	movwf	(_mod_value+1)^(0+256)
  6279  0E61  2E82               	goto	l5948
  6280  0E62                     l5940:	
  6281                           ;main.c: 363: case 5:
  6282                           
  6283                           ;main.c: 362: break;
  6284                           
  6285                           ;main.c: 361: PORTCbits.RC4 = 0;
  6286                           
  6287                           
  6288                           ;main.c: 364: mod_value = mod5[mod_counter];
  6289  0E62  0021               	movlb	1	; select bank1
  6290  0E63  0856               	movf	(_mod_counter+1)^(0+128),w
  6291  0E64  00BB               	movwf	(??_main^(0+128)+1)
  6292  0E65  0855               	movf	_mod_counter^(0+128),w
  6293  0E66  00BA               	movwf	??_main^(0+128)
  6294  0E67  35BA               	lslf	??_main^(0+128),f
  6295  0E68  0DBB               	rlf	(??_main^(0+128)+1),f
  6296  0E69  3076               	movlw	118
  6297  0E6A  00BC               	movwf	(??_main+2)^(0+128)
  6298  0E6B  3025               	movlw	37
  6299  0E6C  00BD               	movwf	((??_main+2)^(0+128)+1)
  6300  0E6D  083A               	movf	??_main^(0+128),w
  6301  0E6E  073C               	addwf	(??_main+2)^(0+128),w
  6302  0E6F  0086               	movwf	6
  6303  0E70  083B               	movf	(??_main+1)^(0+128),w
  6304  0E71  3D3D               	addwfc	(??_main+3)^(0+128),w
  6305  0E72  0087               	movwf	7
  6306  0E73  3F40               	moviw [0]fsr1
  6307  0E74  0022               	movlb	2	; select bank2
  6308  0E75  00C6               	movwf	_mod_value^(0+256)
  6309  0E76  3F41               	moviw [1]fsr1
  6310  0E77  00C7               	movwf	(_mod_value+1)^(0+256)
  6311                           
  6312                           ;main.c: 365: adjusted_pot_value = 1275;
  6313  0E78  30FB               	movlw	251
  6314  0E79  00AA               	movwf	_adjusted_pot_value^(0+256)
  6315  0E7A  3004               	movlw	4
  6316  0E7B  00AB               	movwf	(_adjusted_pot_value^(0+256)+1)
  6317                           
  6318                           ;main.c: 366: PORTCbits.RC4 = 1;
  6319  0E7C  0020               	movlb	0	; select bank0
  6320  0E7D  160E               	bsf	14,4	;volatile
  6321                           
  6322                           ;main.c: 367: break;
  6323  0E7E  2E9F               	goto	l5954
  6324  0E7F                     l5946:	
  6325                           ;main.c: 368: case 6:
  6326                           
  6327                           
  6328                           ;main.c: 369: mod_value = 0;
  6329  0E7F  0022               	movlb	2	; select bank2
  6330  0E80  01C6               	clrf	_mod_value^(0+256)
  6331  0E81  01C7               	clrf	(_mod_value+1)^(0+256)
  6332  0E82                     l5948:	
  6333                           
  6334                           ;main.c: 370: PORTCbits.RC4 = 0;
  6335  0E82  0020               	movlb	0	; select bank0
  6336  0E83  120E               	bcf	14,4	;volatile
  6337                           
  6338                           ;main.c: 372: }
  6339                           
  6340                           ;main.c: 371: break;
  6341  0E84  2E9F               	goto	l5954
  6342  0E85                     l5952:	
  6343                           
  6344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6345                           ; Switch size 1, requested type "space"
  6346                           ; Number of cases is 1, Range of values is 0 to 0
  6347                           ; switch strategies available:
  6348                           ; Name         Instructions Cycles
  6349                           ; simple_byte            4     3 (average)
  6350                           ; direct_byte            8     6 (fixed)
  6351                           ; jumptable            260     6 (fixed)
  6352                           ;	Chosen strategy is simple_byte
  6353  0E85  0021               	movlb	1	; select bank1
  6354  0E86  0863               	movf	(_bottom_push_state+1)^(0+128),w
  6355  0E87  3A00               	xorlw	0	; case 0
  6356  0E88  1903               	skipnz
  6357  0E89  2E8B               	goto	l6258
  6358  0E8A  2E9F               	goto	l5954
  6359  0E8B                     l6258:	
  6360                           
  6361                           ; Switch size 1, requested type "space"
  6362                           ; Number of cases is 6, Range of values is 1 to 6
  6363                           ; switch strategies available:
  6364                           ; Name         Instructions Cycles
  6365                           ; simple_byte           19    10 (average)
  6366                           ; direct_byte           21     9 (fixed)
  6367                           ; jumptable            263     9 (fixed)
  6368                           ;	Chosen strategy is simple_byte
  6369  0E8B  0862               	movf	_bottom_push_state^(0+128),w
  6370  0E8C  3A01               	xorlw	1	; case 1
  6371  0E8D  1903               	skipnz
  6372  0E8E  2E2B               	goto	l5924
  6373  0E8F  3A03               	xorlw	3	; case 2
  6374  0E90  1903               	skipnz
  6375  0E91  2E40               	goto	l5928
  6376  0E92  3A01               	xorlw	1	; case 3
  6377  0E93  1903               	skipnz
  6378  0E94  2E4B               	goto	l5932
  6379  0E95  3A07               	xorlw	7	; case 4
  6380  0E96  1903               	skipnz
  6381  0E97  2E56               	goto	l5936
  6382  0E98  3A01               	xorlw	1	; case 5
  6383  0E99  1903               	skipnz
  6384  0E9A  2E62               	goto	l5940
  6385  0E9B  3A03               	xorlw	3	; case 6
  6386  0E9C  1903               	skipnz
  6387  0E9D  2E7F               	goto	l5946
  6388  0E9E  2E9F               	goto	l5954
  6389  0E9F                     l5954:	
  6390                           
  6391                           ;main.c: 375: if (mod_value > 90 && mod_value < 101) {
  6392  0E9F  0022               	movlb	2	; select bank2
  6393  0EA0  0847               	movf	(_mod_value+1)^(0+256),w
  6394  0EA1  3A80               	xorlw	128
  6395  0EA2  0021               	movlb	1	; select bank1
  6396  0EA3  00BA               	movwf	??_main^(0+128)
  6397  0EA4  3080               	movlw	128
  6398  0EA5  023A               	subwf	??_main^(0+128),w
  6399  0EA6  1D03               	skipz
  6400  0EA7  2EAB               	goto	u6785
  6401  0EA8  305B               	movlw	91
  6402  0EA9  0022               	movlb	2	; select bank2
  6403  0EAA  0246               	subwf	_mod_value^(0+256),w
  6404  0EAB                     u6785:	
  6405  0EAB  1C03               	skipc
  6406  0EAC  2EBE               	goto	l332
  6407  0EAD  0022               	movlb	2	; select bank2
  6408  0EAE  0847               	movf	(_mod_value+1)^(0+256),w
  6409  0EAF  3A80               	xorlw	128
  6410  0EB0  0021               	movlb	1	; select bank1
  6411  0EB1  00BA               	movwf	??_main^(0+128)
  6412  0EB2  3080               	movlw	128
  6413  0EB3  023A               	subwf	??_main^(0+128),w
  6414  0EB4  1D03               	skipz
  6415  0EB5  2EB9               	goto	u6795
  6416  0EB6  3065               	movlw	101
  6417  0EB7  0022               	movlb	2	; select bank2
  6418  0EB8  0246               	subwf	_mod_value^(0+256),w
  6419  0EB9                     u6795:	
  6420  0EB9  1803               	skipnc
  6421  0EBA  2EBE               	goto	l332
  6422                           
  6423                           ;main.c: 376: LATDbits.LATD2 = 1;
  6424  0EBB  0022               	movlb	2	; select bank2
  6425  0EBC  150F               	bsf	15,2	;volatile
  6426                           
  6427                           ;main.c: 377: } else {
  6428  0EBD  2EC0               	goto	l5960
  6429  0EBE                     l332:	
  6430                           
  6431                           ;main.c: 378: LATDbits.LATD2 = 0;
  6432  0EBE  0022               	movlb	2	; select bank2
  6433  0EBF  110F               	bcf	15,2	;volatile
  6434  0EC0                     l5960:	
  6435                           
  6436                           ;main.c: 379: }
  6437                           ;main.c: 383: mod_value = modulation(mod_value, adjusted_pot_value);
  6438  0EC0  0846               	movf	_mod_value^(0+256),w
  6439  0EC1  0020               	movlb	0	; select bank0
  6440  0EC2  00BD               	movwf	modulation@x
  6441  0EC3  0022               	movlb	2	; select bank2
  6442  0EC4  0847               	movf	(_mod_value+1)^(0+256),w
  6443  0EC5  0020               	movlb	0	; select bank0
  6444  0EC6  00BE               	movwf	modulation@x+1
  6445  0EC7  0D89               	rlf	9,f
  6446  0EC8  3B89               	subwfb	9,f
  6447  0EC9  0989               	comf	9,f
  6448  0ECA  00BF               	movwf	modulation@x+2
  6449  0ECB  00C0               	movwf	modulation@x+3
  6450  0ECC  0022               	movlb	2	; select bank2
  6451  0ECD  082A               	movf	_adjusted_pot_value^(0+256),w
  6452  0ECE  0020               	movlb	0	; select bank0
  6453  0ECF  00C1               	movwf	modulation@y
  6454  0ED0  0022               	movlb	2	; select bank2
  6455  0ED1  082B               	movf	(_adjusted_pot_value+1)^(0+256),w
  6456  0ED2  0020               	movlb	0	; select bank0
  6457  0ED3  00C2               	movwf	modulation@y+1
  6458  0ED4  0D89               	rlf	9,f
  6459  0ED5  3B89               	subwfb	9,f
  6460  0ED6  0989               	comf	9,f
  6461  0ED7  00C3               	movwf	modulation@y+2
  6462  0ED8  00C4               	movwf	modulation@y+3
  6463  0ED9  3191  215F  318A   	fcall	_modulation
  6464  0EDC  0020               	movlb	0	; select bank0
  6465  0EDD  083E               	movf	?_modulation+1,w
  6466  0EDE  0022               	movlb	2	; select bank2
  6467  0EDF  00C7               	movwf	(_mod_value+1)^(0+256)
  6468  0EE0  0020               	movlb	0	; select bank0
  6469  0EE1  083D               	movf	?_modulation,w
  6470  0EE2  0022               	movlb	2	; select bank2
  6471  0EE3  00C6               	movwf	_mod_value^(0+256)
  6472                           
  6473                           ;main.c: 384: CCPR9 = mod_value / 2;
  6474  0EE4  3002               	movlw	2
  6475  0EE5  0020               	movlb	0	; select bank0
  6476  0EE6  00A2               	movwf	___awdiv@divisor
  6477  0EE7  3000               	movlw	0
  6478  0EE8  00A3               	movwf	___awdiv@divisor+1
  6479  0EE9  0022               	movlb	2	; select bank2
  6480  0EEA  0847               	movf	(_mod_value+1)^(0+256),w
  6481  0EEB  0020               	movlb	0	; select bank0
  6482  0EEC  00A5               	movwf	___awdiv@dividend+1
  6483  0EED  0022               	movlb	2	; select bank2
  6484  0EEE  0846               	movf	_mod_value^(0+256),w
  6485  0EEF  0020               	movlb	0	; select bank0
  6486  0EF0  00A4               	movwf	___awdiv@dividend
  6487  0EF1  3193  23A4  318A   	fcall	___awdiv
  6488  0EF4  0020               	movlb	0	; select bank0
  6489  0EF5  0823               	movf	?___awdiv+1,w
  6490  0EF6  002C               	movlb	12	; select bank12
  6491  0EF7  009B               	movwf	27	;volatile
  6492  0EF8  0020               	movlb	0	; select bank0
  6493  0EF9  0822               	movf	?___awdiv,w
  6494  0EFA  002C               	movlb	12	; select bank12
  6495  0EFB  009A               	movwf	26	;volatile
  6496                           
  6497                           ;main.c: 385: mod_timer = 0;
  6498  0EFC  3000               	movlw	0
  6499  0EFD  0022               	movlb	2	; select bank2
  6500  0EFE  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6501  0EFF  3000               	movlw	0
  6502  0F00  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6503  0F01  3000               	movlw	0
  6504  0F02  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6505  0F03  3000               	movlw	0
  6506  0F04  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6507                           
  6508                           ;main.c: 388: if (adjusted_pot_value > 1260 && adjusted_pot_value < 1280) {
  6509  0F05  082B               	movf	(_adjusted_pot_value+1)^(0+256),w
  6510  0F06  3A80               	xorlw	128
  6511  0F07  0021               	movlb	1	; select bank1
  6512  0F08  00BA               	movwf	??_main^(0+128)
  6513  0F09  3084               	movlw	132
  6514  0F0A  023A               	subwf	??_main^(0+128),w
  6515  0F0B  1D03               	skipz
  6516  0F0C  2F10               	goto	u6805
  6517  0F0D  30ED               	movlw	237
  6518  0F0E  0022               	movlb	2	; select bank2
  6519  0F0F  022A               	subwf	_adjusted_pot_value^(0+256),w
  6520  0F10                     u6805:	
  6521  0F10  1C03               	skipc
  6522  0F11  2F23               	goto	l334
  6523  0F12  0022               	movlb	2	; select bank2
  6524  0F13  082B               	movf	(_adjusted_pot_value+1)^(0+256),w
  6525  0F14  3A80               	xorlw	128
  6526  0F15  0021               	movlb	1	; select bank1
  6527  0F16  00BA               	movwf	??_main^(0+128)
  6528  0F17  3085               	movlw	133
  6529  0F18  023A               	subwf	??_main^(0+128),w
  6530  0F19  1D03               	skipz
  6531  0F1A  2F1E               	goto	u6815
  6532  0F1B  3000               	movlw	0
  6533  0F1C  0022               	movlb	2	; select bank2
  6534  0F1D  022A               	subwf	_adjusted_pot_value^(0+256),w
  6535  0F1E                     u6815:	
  6536  0F1E  1803               	skipnc
  6537  0F1F  2F23               	goto	l334
  6538                           
  6539                           ;main.c: 389: LATDbits.LATD4 = 1;
  6540  0F20  0022               	movlb	2	; select bank2
  6541  0F21  160F               	bsf	15,4	;volatile
  6542                           
  6543                           ;main.c: 390: } else {
  6544  0F22  2F25               	goto	l5970
  6545  0F23                     l334:	
  6546                           
  6547                           ;main.c: 391: LATDbits.LATD4 = 0;
  6548  0F23  0022               	movlb	2	; select bank2
  6549  0F24  120F               	bcf	15,4	;volatile
  6550  0F25                     l5970:	
  6551                           
  6552                           ;main.c: 392: }
  6553                           ;main.c: 394: if (mod_value > 175 && mod_value < 500) {
  6554  0F25  0847               	movf	(_mod_value+1)^(0+256),w
  6555  0F26  3A80               	xorlw	128
  6556  0F27  0021               	movlb	1	; select bank1
  6557  0F28  00BA               	movwf	??_main^(0+128)
  6558  0F29  3080               	movlw	128
  6559  0F2A  023A               	subwf	??_main^(0+128),w
  6560  0F2B  1D03               	skipz
  6561  0F2C  2F30               	goto	u6825
  6562  0F2D  30B0               	movlw	176
  6563  0F2E  0022               	movlb	2	; select bank2
  6564  0F2F  0246               	subwf	_mod_value^(0+256),w
  6565  0F30                     u6825:	
  6566  0F30  1C03               	skipc
  6567  0F31  2F43               	goto	l336
  6568  0F32  0022               	movlb	2	; select bank2
  6569  0F33  0847               	movf	(_mod_value+1)^(0+256),w
  6570  0F34  3A80               	xorlw	128
  6571  0F35  0021               	movlb	1	; select bank1
  6572  0F36  00BA               	movwf	??_main^(0+128)
  6573  0F37  3081               	movlw	129
  6574  0F38  023A               	subwf	??_main^(0+128),w
  6575  0F39  1D03               	skipz
  6576  0F3A  2F3E               	goto	u6835
  6577  0F3B  30F4               	movlw	244
  6578  0F3C  0022               	movlb	2	; select bank2
  6579  0F3D  0246               	subwf	_mod_value^(0+256),w
  6580  0F3E                     u6835:	
  6581  0F3E  1803               	skipnc
  6582  0F3F  2F43               	goto	l336
  6583                           
  6584                           ;main.c: 395: LATDbits.LATD3 = 1;
  6585  0F40  0022               	movlb	2	; select bank2
  6586  0F41  158F               	bsf	15,3	;volatile
  6587                           
  6588                           ;main.c: 396: } else {
  6589  0F42  2F45               	goto	l5976
  6590  0F43                     l336:	
  6591                           
  6592                           ;main.c: 397: LATDbits.LATD3 = 0;
  6593  0F43  0022               	movlb	2	; select bank2
  6594  0F44  118F               	bcf	15,3	;volatile
  6595  0F45                     l5976:	
  6596                           
  6597                           ;main.c: 398: }
  6598                           ;main.c: 400: }
  6599                           ;main.c: 407: if (delay_time_changed == 1) {
  6600  0F45  035A               	decf	_delay_time_changed^(0+256),w
  6601  0F46  045B               	iorwf	(_delay_time_changed+1)^(0+256),w
  6602  0F47  1D03               	btfss	3,2
  6603  0F48  2A7B               	goto	l5818
  6604                           
  6605                           ;main.c: 408: delay_time = baseline_delay_time;
  6606  0F49  0021               	movlb	1	; select bank1
  6607  0F4A  085D               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6608  0F4B  00E1               	movwf	(_delay_time+3)^(0+128)	;volatile
  6609  0F4C  085C               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6610  0F4D  00E0               	movwf	(_delay_time+2)^(0+128)	;volatile
  6611  0F4E  085B               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6612  0F4F  00DF               	movwf	(_delay_time+1)^(0+128)	;volatile
  6613  0F50  085A               	movf	_baseline_delay_time^(0+128),w	;volatile
  6614  0F51  00DE               	movwf	_delay_time^(0+128)	;volatile
  6615                           
  6616                           ;main.c: 409: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6617  0F52  085B               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6618  0F53  00AF               	movwf	(set_subdivision@x+1)^(0+128)
  6619  0F54  085A               	movf	_baseline_delay_time^(0+128),w	;volatile
  6620  0F55  00AE               	movwf	set_subdivision@x^(0+128)
  6621  0F56  0867               	movf	(_top_push_state+1)^(0+128),w
  6622  0F57  00B1               	movwf	(set_subdivision@y+1)^(0+128)
  6623  0F58  0866               	movf	_top_push_state^(0+128),w
  6624  0F59  00B0               	movwf	set_subdivision@y^(0+128)
  6625  0F5A  3188  2082  318A   	fcall	_set_subdivision
  6626  0F5D  0021               	movlb	1	; select bank1
  6627  0F5E  082E               	movf	?_set_subdivision^(0+128),w
  6628  0F5F  00DE               	movwf	_delay_time^(0+128)	;volatile
  6629  0F60  082F               	movf	(?_set_subdivision+1)^(0+128),w
  6630  0F61  00DF               	movwf	(_delay_time+1)^(0+128)	;volatile
  6631  0F62  0D89               	rlf	9,f
  6632  0F63  3B89               	subwfb	9,f
  6633  0F64  0989               	comf	9,f
  6634  0F65  00E0               	movwf	(_delay_time+2)^(0+128)	;volatile
  6635  0F66  00E1               	movwf	(_delay_time+3)^(0+128)	;volatile
  6636                           
  6637                           ;main.c: 410: reset_sub_delay = 1;
  6638  0F67  3001               	movlw	1
  6639  0F68  0022               	movlb	2	; select bank2
  6640  0F69  00C8               	movwf	_reset_sub_delay^(0+256)
  6641  0F6A  3000               	movlw	0
  6642  0F6B  00C9               	movwf	(_reset_sub_delay^(0+256)+1)
  6643                           
  6644                           ;main.c: 411: delayfound = 0;
  6645  0F6C  01B6               	clrf	_delayfound^(0+256)
  6646  0F6D  01B7               	clrf	(_delayfound+1)^(0+256)
  6647                           
  6648                           ;main.c: 412: delay_counter = 0;
  6649  0F6E  01B4               	clrf	_delay_counter^(0+256)	;volatile
  6650  0F6F  01B5               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6651  0F70                     l5994:	
  6652                           ;main.c: 414: while (delayfound == 0) {
  6653                           
  6654  0F70  0836               	movf	_delayfound^(0+256),w
  6655  0F71  0437               	iorwf	(_delayfound+1)^(0+256),w
  6656  0F72  1D03               	btfss	3,2
  6657  0F73  2FC3               	goto	l5996
  6658                           
  6659                           ;main.c: 415: if (delayArray[delay_counter] <= delay_time * 2) {
  6660  0F74  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6661  0F75  0021               	movlb	1	; select bank1
  6662  0F76  00BB               	movwf	(??_main^(0+128)+1)
  6663  0F77  0022               	movlb	2	; select bank2
  6664  0F78  0834               	movf	_delay_counter^(0+256),w	;volatile
  6665  0F79  0021               	movlb	1	; select bank1
  6666  0F7A  00BA               	movwf	??_main^(0+128)
  6667  0F7B  35BA               	lslf	??_main^(0+128),f
  6668  0F7C  0DBB               	rlf	(??_main^(0+128)+1),f
  6669  0F7D  306E               	movlw	110
  6670  0F7E  00BC               	movwf	(??_main+2)^(0+128)
  6671  0F7F  3023               	movlw	35
  6672  0F80  00BD               	movwf	((??_main+2)^(0+128)+1)
  6673  0F81  083A               	movf	??_main^(0+128),w
  6674  0F82  073C               	addwf	(??_main+2)^(0+128),w
  6675  0F83  0086               	movwf	6
  6676  0F84  083B               	movf	(??_main+1)^(0+128),w
  6677  0F85  3D3D               	addwfc	(??_main+3)^(0+128),w
  6678  0F86  0087               	movwf	7
  6679  0F87  3F40               	moviw [0]fsr1
  6680  0F88  00BE               	movwf	(??_main+4)^(0+128)
  6681  0F89  3F41               	moviw [1]fsr1
  6682  0F8A  00BF               	movwf	((??_main+4)^(0+128)+1)
  6683  0F8B  083E               	movf	(??_main+4)^(0+128),w
  6684  0F8C  00C0               	movwf	(??_main+6)^(0+128)
  6685  0F8D  083F               	movf	(??_main+5)^(0+128),w
  6686  0F8E  00C1               	movwf	((??_main+6)^(0+128)+1)
  6687  0F8F  3000               	movlw	0
  6688  0F90  1BC1               	btfsc	((??_main+6)^(0+128)+1),7
  6689  0F91  30FF               	movlw	255
  6690  0F92  00C2               	movwf	((??_main+6)^(0+128)+2)
  6691  0F93  00C3               	movwf	((??_main+6)^(0+128)+3)
  6692  0F94  085E               	movf	_delay_time^(0+128),w	;volatile
  6693  0F95  00C4               	movwf	(??_main+10)^(0+128)
  6694  0F96  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
  6695  0F97  00C5               	movwf	((??_main+10)^(0+128)+1)
  6696  0F98  0860               	movf	(_delay_time+2)^(0+128),w	;volatile
  6697  0F99  00C6               	movwf	((??_main+10)^(0+128)+2)
  6698  0F9A  0861               	movf	(_delay_time+3)^(0+128),w	;volatile
  6699  0F9B  00C7               	movwf	((??_main+10)^(0+128)+3)
  6700  0F9C  3001               	movlw	1
  6701  0F9D                     u6855:	
  6702  0F9D  35C4               	lslf	(??_main+10)^(0+128),f
  6703  0F9E  0DC5               	rlf	((??_main+10)^(0+128)+1),f
  6704  0F9F  0DC6               	rlf	((??_main+10)^(0+128)+2),f
  6705  0FA0  0DC7               	rlf	((??_main+10)^(0+128)+3),f
  6706  0FA1  0B89               	decfsz	9,f
  6707  0FA2  2F9D               	goto	u6855
  6708  0FA3  0847               	movf	(??_main+13)^(0+128),w
  6709  0FA4  3A80               	xorlw	128
  6710  0FA5  00C8               	movwf	(??_main+14)^(0+128)
  6711  0FA6  0843               	movf	(??_main+9)^(0+128),w
  6712  0FA7  3A80               	xorlw	128
  6713  0FA8  0248               	subwf	(??_main+14)^(0+128),w
  6714  0FA9  1D03               	skipz
  6715  0FAA  2FB5               	goto	u6863
  6716  0FAB  0842               	movf	(??_main+8)^(0+128),w
  6717  0FAC  0246               	subwf	(??_main+12)^(0+128),w
  6718  0FAD  1D03               	skipz
  6719  0FAE  2FB5               	goto	u6863
  6720  0FAF  0841               	movf	(??_main+7)^(0+128),w
  6721  0FB0  0245               	subwf	(??_main+11)^(0+128),w
  6722  0FB1  1D03               	skipz
  6723  0FB2  2FB5               	goto	u6863
  6724  0FB3  0840               	movf	(??_main+6)^(0+128),w
  6725  0FB4  0244               	subwf	(??_main+10)^(0+128),w
  6726  0FB5                     u6863:	
  6727  0FB5  1C03               	skipc
  6728  0FB6  2FBD               	goto	l5992
  6729                           
  6730                           ;main.c: 416: delayfound = 1;
  6731  0FB7  3001               	movlw	1
  6732  0FB8  0022               	movlb	2	; select bank2
  6733  0FB9  00B6               	movwf	_delayfound^(0+256)
  6734  0FBA  3000               	movlw	0
  6735  0FBB  00B7               	movwf	(_delayfound^(0+256)+1)
  6736                           
  6737                           ;main.c: 420: } else {
  6738  0FBC  2F70               	goto	l5994
  6739  0FBD                     l5992:	
  6740                           
  6741                           ;main.c: 421: delay_counter++;
  6742  0FBD  3001               	movlw	1
  6743  0FBE  0022               	movlb	2	; select bank2
  6744  0FBF  07B4               	addwf	_delay_counter^(0+256),f	;volatile
  6745  0FC0  3000               	movlw	0
  6746  0FC1  3DB5               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6747  0FC2  2F70               	goto	l5994
  6748  0FC3                     l5996:	
  6749                           
  6750                           ;main.c: 423: }
  6751                           ;main.c: 424: }
  6752                           ;main.c: 440: mod_delay_time = delay_time / 7.5;
  6753  0FC3  0021               	movlb	1	; select bank1
  6754  0FC4  0861               	movf	(_delay_time+3)^(0+128),w	;volatile
  6755  0FC5  0020               	movlb	0	; select bank0
  6756  0FC6  00AD               	movwf	___altoft@c+3
  6757  0FC7  0021               	movlb	1	; select bank1
  6758  0FC8  0860               	movf	(_delay_time+2)^(0+128),w	;volatile
  6759  0FC9  0020               	movlb	0	; select bank0
  6760  0FCA  00AC               	movwf	___altoft@c+2
  6761  0FCB  0021               	movlb	1	; select bank1
  6762  0FCC  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
  6763  0FCD  0020               	movlb	0	; select bank0
  6764  0FCE  00AB               	movwf	___altoft@c+1
  6765  0FCF  0021               	movlb	1	; select bank1
  6766  0FD0  085E               	movf	_delay_time^(0+128),w	;volatile
  6767  0FD1  0020               	movlb	0	; select bank0
  6768  0FD2  00AA               	movwf	___altoft@c
  6769  0FD3  319F  2785  318A   	fcall	___altoft
  6770  0FD6  0020               	movlb	0	; select bank0
  6771  0FD7  082A               	movf	?___altoft,w
  6772  0FD8  00CA               	movwf	___ftdiv@f1
  6773  0FD9  082B               	movf	?___altoft+1,w
  6774  0FDA  00CB               	movwf	___ftdiv@f1+1
  6775  0FDB  082C               	movf	?___altoft+2,w
  6776  0FDC  00CC               	movwf	___ftdiv@f1+2
  6777  0FDD  3000               	movlw	0
  6778  0FDE  00C7               	movwf	___ftdiv@f2
  6779  0FDF  30F0               	movlw	240
  6780  0FE0  00C8               	movwf	___ftdiv@f2+1
  6781  0FE1  3040               	movlw	64
  6782  0FE2  00C9               	movwf	___ftdiv@f2+2
  6783  0FE3  3196  26A3  318A   	fcall	___ftdiv
  6784  0FE6  0020               	movlb	0	; select bank0
  6785  0FE7  0847               	movf	?___ftdiv,w
  6786  0FE8  0021               	movlb	1	; select bank1
  6787  0FE9  00A0               	movwf	___fttol@f1^(0+128)
  6788  0FEA  0020               	movlb	0	; select bank0
  6789  0FEB  0848               	movf	?___ftdiv+1,w
  6790  0FEC  0021               	movlb	1	; select bank1
  6791  0FED  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6792  0FEE  0020               	movlb	0	; select bank0
  6793  0FEF  0849               	movf	?___ftdiv+2,w
  6794  0FF0  0021               	movlb	1	; select bank1
  6795  0FF1  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6796  0FF2  3195  2591  318A   	fcall	___fttol
  6797  0FF5  0021               	movlb	1	; select bank1
  6798  0FF6  0821               	movf	(?___fttol^(0+128)+1),w
  6799  0FF7  0022               	movlb	2	; select bank2
  6800  0FF8  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  6801  0FF9  0021               	movlb	1	; select bank1
  6802  0FFA  0820               	movf	?___fttol^(0+128),w
  6803  0FFB  0022               	movlb	2	; select bank2
  6804  0FFC  00E6               	movwf	_mod_delay_time^(0+256)
  6805                           
  6806                           ;main.c: 442: delay_time_changed = 0;
  6807  0FFD  01DA               	clrf	_delay_time_changed^(0+256)
  6808  0FFE  01DB               	clrf	(_delay_time_changed+1)^(0+256)
  6809  0FFF  2A7B               	goto	l5818
  6810  1000                     __end_of_main:	
  6811                           
  6812                           	psect	text1
  6813  11A0                     __ptext1:	
  6814 ;; *************** function _update_mode *****************
  6815 ;; Defined at:
  6816 ;;		line 82 in file "tactiles.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;		None
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      void 
  6823 ;; Registers used:
  6824 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6833 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6834 ;;Total ram usage:        1 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    2
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_main
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           
  6845                           ;psect for function _update_mode
  6846  11A0                     _update_mode:	
  6847                           
  6848                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6849                           
  6850                           ;incstack = 0
  6851                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6852  11A0  0020               	movlb	0	; select bank0
  6853  11A1  180E               	btfsc	14,0	;volatile
  6854  11A2  29DD               	goto	l5466
  6855                           
  6856                           ;tactiles.c: 88: debounce_mode2++;
  6857  11A3  3001               	movlw	1
  6858  11A4  0022               	movlb	2	; select bank2
  6859  11A5  07B2               	addwf	_debounce_mode2^(0+256),f
  6860  11A6  3000               	movlw	0
  6861  11A7  3DB3               	addwfc	(_debounce_mode2+1)^(0+256),f
  6862                           
  6863                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6864  11A8  0833               	movf	(_debounce_mode2+1)^(0+256),w
  6865  11A9  3A80               	xorlw	128
  6866  11AA  0020               	movlb	0	; select bank0
  6867  11AB  00A2               	movwf	??_update_mode
  6868  11AC  3080               	movlw	128
  6869  11AD  0222               	subwf	??_update_mode,w
  6870  11AE  1D03               	skipz
  6871  11AF  29B3               	goto	u5975
  6872  11B0  301A               	movlw	26
  6873  11B1  0022               	movlb	2	; select bank2
  6874  11B2  0232               	subwf	_debounce_mode2^(0+256),w
  6875  11B3                     u5975:	
  6876  11B3  1C03               	skipc
  6877  11B4  0008               	return
  6878                           
  6879                           ;tactiles.c: 90: debounce_mode2 = 25;
  6880  11B5  3019               	movlw	25
  6881  11B6  0022               	movlb	2	; select bank2
  6882  11B7  00B2               	movwf	_debounce_mode2^(0+256)
  6883  11B8  3000               	movlw	0
  6884  11B9  00B3               	movwf	(_debounce_mode2^(0+256)+1)
  6885                           
  6886                           ;tactiles.c: 91: mode2_state++;
  6887  11BA  3001               	movlw	1
  6888  11BB  0020               	movlb	0	; select bank0
  6889  11BC  00A2               	movwf	??_update_mode
  6890  11BD  0822               	movf	??_update_mode,w
  6891  11BE  0022               	movlb	2	; select bank2
  6892  11BF  07D3               	addwf	_mode2_state^(0+256),f
  6893                           
  6894                           ;tactiles.c: 92: if (mode2_state > 2) {
  6895  11C0  3003               	movlw	3
  6896  11C1  0253               	subwf	_mode2_state^(0+256),w
  6897  11C2  1C03               	skipc
  6898  11C3  29CE               	goto	l5464
  6899                           
  6900                           ;tactiles.c: 93: mode2_state = 0;
  6901  11C4  01D3               	clrf	_mode2_state^(0+256)
  6902                           
  6903                           ;tactiles.c: 94: }
  6904                           ;tactiles.c: 95: switch(mode2_state) {
  6905  11C5  29CE               	goto	l5464
  6906  11C6                     l876:	
  6907                           ;tactiles.c: 96: case 0:
  6908                           
  6909                           
  6910                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6911  11C6  108D               	bcf	13,1	;volatile
  6912  11C7  29CC               	goto	L5
  6913  11C8                     l878:	
  6914                           ;tactiles.c: 100: case 1:
  6915                           
  6916                           ;tactiles.c: 99: break;
  6917                           
  6918                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6919                           
  6920                           
  6921                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6922  11C8  108D               	bcf	13,1	;volatile
  6923                           
  6924                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6925  11C9  140D               	bsf	13,0	;volatile
  6926                           
  6927                           ;tactiles.c: 103: break;
  6928  11CA  29D9               	goto	l880
  6929  11CB                     l879:	
  6930                           ;tactiles.c: 104: case 2:
  6931                           
  6932                           
  6933                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6934  11CB  148D               	bsf	13,1	;volatile
  6935  11CC                     L5:	
  6936                           
  6937                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6938  11CC  100D               	bcf	13,0	;volatile
  6939                           
  6940                           ;tactiles.c: 108: }
  6941                           
  6942                           ;tactiles.c: 107: break;
  6943  11CD  29D9               	goto	l880
  6944  11CE                     l5464:	
  6945  11CE  0853               	movf	_mode2_state^(0+256),w
  6946                           
  6947                           ; Switch size 1, requested type "space"
  6948                           ; Number of cases is 3, Range of values is 0 to 2
  6949                           ; switch strategies available:
  6950                           ; Name         Instructions Cycles
  6951                           ; simple_byte           10     6 (average)
  6952                           ; direct_byte           12     6 (fixed)
  6953                           ; jumptable            260     6 (fixed)
  6954                           ;	Chosen strategy is simple_byte
  6955  11CF  3A00               	xorlw	0	; case 0
  6956  11D0  1903               	skipnz
  6957  11D1  29C6               	goto	l876
  6958  11D2  3A01               	xorlw	1	; case 1
  6959  11D3  1903               	skipnz
  6960  11D4  29C8               	goto	l878
  6961  11D5  3A03               	xorlw	3	; case 2
  6962  11D6  1903               	skipnz
  6963  11D7  29CB               	goto	l879
  6964  11D8  29D9               	goto	l880
  6965  11D9                     l880:	
  6966                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6967                           
  6968  11D9  0020               	movlb	0	; select bank0
  6969  11DA  180E               	btfsc	14,0	;volatile
  6970  11DB  0008               	return
  6971  11DC  29D9               	goto	l880
  6972  11DD                     l5466:	
  6973                           ;tactiles.c: 110: }
  6974                           ;tactiles.c: 111: }
  6975                           ;tactiles.c: 112: } else {
  6976                           
  6977                           
  6978                           ;tactiles.c: 113: debounce_mode2 = 0;
  6979  11DD  0022               	movlb	2	; select bank2
  6980  11DE  01B2               	clrf	_debounce_mode2^(0+256)
  6981  11DF  01B3               	clrf	(_debounce_mode2+1)^(0+256)
  6982  11E0  0008               	return
  6983  11E1                     __end_of_update_mode:	
  6984                           
  6985                           	psect	text2
  6986  052E                     __ptext2:	
  6987 ;; *************** function _updateSwitchTap *****************
  6988 ;; Defined at:
  6989 ;;		line 48 in file "SwitchTap.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  tapCntDiviso    2   35[BANK0 ] int 
  6994 ;;  iCnt            1   37[BANK0 ] unsigned char 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7005 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7006 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7007 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7008 ;;Total ram usage:        9 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    5
  7011 ;; This function calls:
  7012 ;;		___aldiv
  7013 ;;		_setDoublePressState
  7014 ;;		_setLongTapState
  7015 ;; This function is called by:
  7016 ;;		_main
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _updateSwitchTap
  7022  052E                     _updateSwitchTap:	
  7023                           
  7024                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  7025                           
  7026                           ;incstack = 0
  7027                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7028  052E  0020               	movlb	0	; select bank0
  7029  052F  01C5               	clrf	updateSwitchTap@iCnt
  7030                           
  7031                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  7032  0530  1810               	btfsc	16,0	;volatile
  7033  0531  2D39               	goto	l5594
  7034                           
  7035                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  7036  0532  0021               	movlb	1	; select bank1
  7037  0533  0859               	movf	_switchTap_pressed^(0+128),w
  7038  0534  1903               	btfsc	3,2
  7039  0535  2D44               	goto	l1215
  7040                           
  7041                           ;SwitchTap.c: 59: switchTap_pressed--;
  7042  0536  3001               	movlw	1
  7043  0537  02D9               	subwf	_switchTap_pressed^(0+128),f
  7044                           
  7045                           ;SwitchTap.c: 60: }
  7046                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  7047  0538  2D44               	goto	l1215
  7048  0539                     l5594:	
  7049  0539  3019               	movlw	25
  7050  053A  0021               	movlb	1	; select bank1
  7051  053B  0259               	subwf	_switchTap_pressed^(0+128),w
  7052  053C  1803               	skipnc
  7053  053D  2D44               	goto	l1215
  7054                           
  7055                           ;SwitchTap.c: 62: switchTap_pressed++;
  7056  053E  3001               	movlw	1
  7057  053F  0020               	movlb	0	; select bank0
  7058  0540  00BD               	movwf	??_updateSwitchTap
  7059  0541  083D               	movf	??_updateSwitchTap,w
  7060  0542  0021               	movlb	1	; select bank1
  7061  0543  07D9               	addwf	_switchTap_pressed^(0+128),f
  7062  0544                     l1215:	
  7063                           
  7064                           ;SwitchTap.c: 63: }
  7065                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  7066  0544  0859               	movf	_switchTap_pressed^(0+128),w
  7067  0545  1D03               	btfss	3,2
  7068  0546  2EFD               	goto	l5678
  7069                           
  7070                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  7071  0547  1BD0               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7072  0548  2DCE               	goto	l5638
  7073  0549  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7074  054A  1D03               	btfss	3,2
  7075  054B  2D55               	goto	l5600
  7076  054C  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7077  054D  1D03               	btfss	3,2
  7078  054E  2D55               	goto	l5600
  7079  054F  301B               	movlw	27
  7080  0550  024D               	subwf	_tap_timer^(0+128),w	;volatile
  7081  0551  3006               	movlw	6
  7082  0552  3B4E               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7083  0553  1C03               	btfss	3,0
  7084  0554  2DCE               	goto	l5638
  7085  0555                     l5600:	
  7086                           
  7087                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7088  0555  0022               	movlb	2	; select bank2
  7089  0556  0356               	decf	_switchTap_down^(0+256),w
  7090  0557  1903               	btfsc	3,2
  7091  0558  2D96               	goto	l5618
  7092                           
  7093                           ;SwitchTap.c: 78: switchTap_down = 1;
  7094  0559  01D6               	clrf	_switchTap_down^(0+256)
  7095  055A  0AD6               	incf	_switchTap_down^(0+256),f
  7096                           
  7097                           ;SwitchTap.c: 79: tap_timer = 0;
  7098  055B  3000               	movlw	0
  7099  055C  0021               	movlb	1	; select bank1
  7100  055D  00D0               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7101  055E  3000               	movlw	0
  7102  055F  00CF               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7103  0560  3000               	movlw	0
  7104  0561  00CE               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7105  0562  3000               	movlw	0
  7106  0563  00CD               	movwf	_tap_timer^(0+128)	;volatile
  7107                           
  7108                           ;SwitchTap.c: 80: tap_iteration = 1;
  7109  0564  3001               	movlw	1
  7110  0565  0022               	movlb	2	; select bank2
  7111  0566  00EA               	movwf	_tap_iteration^(0+256)
  7112  0567  3000               	movlw	0
  7113  0568  00EB               	movwf	(_tap_iteration^(0+256)+1)
  7114                           
  7115                           ;SwitchTap.c: 81: tap_total = 0;
  7116  0569  3000               	movlw	0
  7117  056A  0023               	movlb	3	; select bank3
  7118  056B  00E3               	movwf	(_tap_total+3)^(0+384)
  7119  056C  3000               	movlw	0
  7120  056D  00E2               	movwf	(_tap_total+2)^(0+384)
  7121  056E  3000               	movlw	0
  7122  056F  00E1               	movwf	(_tap_total+1)^(0+384)
  7123  0570  3000               	movlw	0
  7124  0571  00E0               	movwf	_tap_total^(0+384)
  7125                           
  7126                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7127  0572  0022               	movlb	2	; select bank2
  7128  0573  01DA               	clrf	_delay_time_changed^(0+256)
  7129  0574  01DB               	clrf	(_delay_time_changed+1)^(0+256)
  7130                           
  7131                           ;SwitchTap.c: 83: LATDbits.LATD0 = 0;
  7132  0575  100F               	bcf	15,0	;volatile
  7133                           
  7134                           ;SwitchTap.c: 85: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7135  0576  0020               	movlb	0	; select bank0
  7136  0577  01C5               	clrf	updateSwitchTap@iCnt
  7137  0578  0AC5               	incf	updateSwitchTap@iCnt,f
  7138  0579                     l5616:	
  7139  0579  0845               	movf	updateSwitchTap@iCnt,w
  7140  057A  0021               	movlb	1	; select bank1
  7141  057B  0269               	subwf	_num_taps^(0+128),w
  7142  057C  1C03               	btfss	3,0
  7143  057D  2D96               	goto	l5618
  7144                           
  7145                           ;SwitchTap.c: 86: tap_history[iCnt] = 0;
  7146  057E  0020               	movlb	0	; select bank0
  7147  057F  0845               	movf	updateSwitchTap@iCnt,w
  7148  0580  00BD               	movwf	??_updateSwitchTap
  7149  0581  3001               	movlw	1
  7150  0582                     u6275:	
  7151  0582  35BD               	lslf	??_updateSwitchTap,f
  7152  0583  3EFF               	addlw	-1
  7153  0584  1D03               	skipz
  7154  0585  2D82               	goto	u6275
  7155  0586  353D               	lslf	??_updateSwitchTap,w
  7156  0587  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7157  0588  0086               	movwf	6
  7158  0589  3001               	movlw	1	; select bank3/4
  7159  058A  0087               	movwf	7
  7160  058B  3000               	movlw	0
  7161  058C  3FC0               	movwi [0]fsr1
  7162  058D  3000               	movlw	0
  7163  058E  3FC1               	movwi [1]fsr1
  7164  058F  3FC2               	movwi [2]fsr1
  7165  0590  3FC3               	movwi [3]fsr1
  7166  0591  3001               	movlw	1
  7167  0592  00BD               	movwf	??_updateSwitchTap
  7168  0593  083D               	movf	??_updateSwitchTap,w
  7169  0594  07C5               	addwf	updateSwitchTap@iCnt,f
  7170  0595  2D79               	goto	l5616
  7171  0596                     l5618:	
  7172                           
  7173                           ;SwitchTap.c: 87: }
  7174                           ;SwitchTap.c: 88: }
  7175                           ;SwitchTap.c: 91: if (longTap_start == 0) {
  7176  0596  0022               	movlb	2	; select bank2
  7177  0597  0851               	movf	_longTap_start^(0+256),w
  7178  0598  1D03               	btfss	3,2
  7179  0599  2DA1               	goto	l5624
  7180                           
  7181                           ;SwitchTap.c: 92: longTap_start = 1;
  7182  059A  01D1               	clrf	_longTap_start^(0+256)
  7183  059B  0AD1               	incf	_longTap_start^(0+256),f
  7184                           
  7185                           ;SwitchTap.c: 93: longTap_state = 0;
  7186  059C  0020               	movlb	0	; select bank0
  7187  059D  01EA               	clrf	_longTap_state	;volatile
  7188                           
  7189                           ;SwitchTap.c: 94: longTap_timer = 0;
  7190  059E  0022               	movlb	2	; select bank2
  7191  059F  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7192  05A0  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7193  05A1                     l5624:	
  7194                           
  7195                           ;SwitchTap.c: 95: }
  7196                           ;SwitchTap.c: 99: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  7197  05A1  0021               	movlb	1	; select bank1
  7198  05A2  0865               	movf	(_long_press_limit+1)^(0+128),w
  7199  05A3  0022               	movlb	2	; select bank2
  7200  05A4  0245               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  7201  05A5  1D03               	skipz
  7202  05A6  2DAB               	goto	u6305
  7203  05A7  0021               	movlb	1	; select bank1
  7204  05A8  0864               	movf	_long_press_limit^(0+128),w
  7205  05A9  0022               	movlb	2	; select bank2
  7206  05AA  0244               	subwf	_longTap_timer^(0+256),w	;volatile
  7207  05AB                     u6305:	
  7208  05AB  1C03               	skipc
  7209  05AC  0008               	return
  7210  05AD  0020               	movlb	0	; select bank0
  7211  05AE  086A               	movf	_longTap_state,w	;volatile
  7212  05AF  1D03               	btfss	3,2
  7213  05B0  0008               	return
  7214                           
  7215                           ;SwitchTap.c: 101: longTap_timer = long_press_limit;
  7216  05B1  0021               	movlb	1	; select bank1
  7217  05B2  0865               	movf	(_long_press_limit+1)^(0+128),w
  7218  05B3  0022               	movlb	2	; select bank2
  7219  05B4  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  7220  05B5  0021               	movlb	1	; select bank1
  7221  05B6  0864               	movf	_long_press_limit^(0+128),w
  7222  05B7  0022               	movlb	2	; select bank2
  7223  05B8  00C4               	movwf	_longTap_timer^(0+256)	;volatile
  7224                           
  7225                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7226  05B9  120D               	bcf	13,4	;volatile
  7227                           
  7228                           ;SwitchTap.c: 104: if (feedback_start != 1) {
  7229  05BA  0021               	movlb	1	; select bank1
  7230  05BB  0357               	decf	_feedback_start^(0+128),w
  7231  05BC  1903               	btfsc	3,2
  7232  05BD  2DC6               	goto	l5636
  7233                           
  7234                           ;SwitchTap.c: 105: setLongTapState(1);
  7235  05BE  3001               	movlw	1
  7236  05BF  0020               	movlb	0	; select bank0
  7237  05C0  00A2               	movwf	setLongTapState@f_state
  7238  05C1  3000               	movlw	0
  7239  05C2  00A3               	movwf	setLongTapState@f_state+1
  7240  05C3  319D  25D3         	fcall	_setLongTapState
  7241                           
  7242                           ;SwitchTap.c: 106: } else {
  7243  05C5  0008               	return
  7244  05C6                     l5636:	
  7245                           
  7246                           ;SwitchTap.c: 107: setDoublePressState(1);
  7247  05C6  3001               	movlw	1
  7248  05C7  0020               	movlb	0	; select bank0
  7249  05C8  00B4               	movwf	setDoublePressState@f_state
  7250  05C9  3000               	movlw	0
  7251  05CA  00B5               	movwf	setDoublePressState@f_state+1
  7252  05CB  319E  268B         	fcall	_setDoublePressState
  7253                           
  7254                           ;SwitchTap.c: 108: }
  7255                           ;SwitchTap.c: 109: }
  7256                           ;SwitchTap.c: 111: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7257  05CD  0008               	return
  7258  05CE                     l5638:	
  7259  05CE  0021               	movlb	1	; select bank1
  7260  05CF  1BD0               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7261  05D0  2DDD               	goto	l5640
  7262  05D1  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7263  05D2  1D03               	btfss	3,2
  7264  05D3  0008               	return
  7265  05D4  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7266  05D5  1D03               	btfss	3,2
  7267  05D6  0008               	return
  7268  05D7  301B               	movlw	27
  7269  05D8  024D               	subwf	_tap_timer^(0+128),w	;volatile
  7270  05D9  3006               	movlw	6
  7271  05DA  3B4E               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7272  05DB  1803               	btfsc	3,0
  7273  05DC  0008               	return
  7274  05DD                     l5640:	
  7275  05DD  0020               	movlb	0	; select bank0
  7276  05DE  086A               	movf	_longTap_state,w	;volatile
  7277  05DF  1D03               	btfss	3,2
  7278  05E0  0008               	return
  7279  05E1  0022               	movlb	2	; select bank2
  7280  05E2  0356               	decf	_switchTap_down^(0+256),w
  7281  05E3  1903               	btfsc	3,2
  7282  05E4  0008               	return
  7283                           
  7284                           ;SwitchTap.c: 113: switchTap_down = 1;
  7285  05E5  01D6               	clrf	_switchTap_down^(0+256)
  7286  05E6  0AD6               	incf	_switchTap_down^(0+256),f
  7287                           
  7288                           ;SwitchTap.c: 114: if (tap_timer >= 1172) {
  7289  05E7  0021               	movlb	1	; select bank1
  7290  05E8  1BD0               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7291  05E9  2DFE               	goto	l1229
  7292  05EA  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7293  05EB  1D03               	btfss	3,2
  7294  05EC  2DF6               	goto	l5648
  7295  05ED  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7296  05EE  1D03               	btfss	3,2
  7297  05EF  2DF6               	goto	l5648
  7298  05F0  3094               	movlw	148
  7299  05F1  024D               	subwf	_tap_timer^(0+128),w	;volatile
  7300  05F2  3004               	movlw	4
  7301  05F3  3B4E               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7302  05F4  1C03               	btfss	3,0
  7303  05F5  2DFE               	goto	l1229
  7304  05F6                     l5648:	
  7305                           
  7306                           ;SwitchTap.c: 115: tap_timer = 1172;
  7307  05F6  3000               	movlw	0
  7308  05F7  00D0               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7309  05F8  3000               	movlw	0
  7310  05F9  00CF               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7311  05FA  3004               	movlw	4
  7312  05FB  00CE               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7313  05FC  3094               	movlw	148
  7314  05FD  00CD               	movwf	_tap_timer^(0+128)	;volatile
  7315  05FE                     l1229:	
  7316                           
  7317                           ;SwitchTap.c: 116: }
  7318                           ;SwitchTap.c: 118: int tapCntDivisor = num_taps;
  7319  05FE  0869               	movf	_num_taps^(0+128),w
  7320  05FF  0020               	movlb	0	; select bank0
  7321  0600  00BD               	movwf	??_updateSwitchTap
  7322  0601  01BE               	clrf	??_updateSwitchTap+1
  7323  0602  083D               	movf	??_updateSwitchTap,w
  7324  0603  00C3               	movwf	updateSwitchTap@tapCntDivisor
  7325  0604  083E               	movf	??_updateSwitchTap+1,w
  7326  0605  00C4               	movwf	updateSwitchTap@tapCntDivisor+1
  7327                           
  7328                           ;SwitchTap.c: 119: if (tap_iteration <= num_taps) {
  7329  0606  0022               	movlb	2	; select bank2
  7330  0607  086B               	movf	(_tap_iteration+1)^(0+256),w
  7331  0608  3A80               	xorlw	128
  7332  0609  3C80               	sublw	128
  7333  060A  1D03               	skipz
  7334  060B  2E0F               	goto	u6375
  7335  060C  086A               	movf	_tap_iteration^(0+256),w
  7336  060D  0021               	movlb	1	; select bank1
  7337  060E  0269               	subwf	_num_taps^(0+128),w
  7338  060F                     u6375:	
  7339  060F  1C03               	skipc
  7340  0610  2E41               	goto	l5656
  7341                           
  7342                           ;SwitchTap.c: 120: tap_total += tap_timer;
  7343  0611  0021               	movlb	1	; select bank1
  7344  0612  084D               	movf	_tap_timer^(0+128),w	;volatile
  7345  0613  0023               	movlb	3	; select bank3
  7346  0614  07E0               	addwf	_tap_total^(0+384),f
  7347  0615  0021               	movlb	1	; select bank1
  7348  0616  084E               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7349  0617  0023               	movlb	3	; select bank3
  7350  0618  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7351  0619  0021               	movlb	1	; select bank1
  7352  061A  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7353  061B  0023               	movlb	3	; select bank3
  7354  061C  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7355  061D  0021               	movlb	1	; select bank1
  7356  061E  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7357  061F  0023               	movlb	3	; select bank3
  7358  0620  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7359                           
  7360                           ;SwitchTap.c: 121: tap_history[tap_iteration] = tap_timer;
  7361  0621  0022               	movlb	2	; select bank2
  7362  0622  086A               	movf	_tap_iteration^(0+256),w
  7363  0623  0020               	movlb	0	; select bank0
  7364  0624  00BD               	movwf	??_updateSwitchTap
  7365  0625  3001               	movlw	1
  7366  0626                     u6385:	
  7367  0626  35BD               	lslf	??_updateSwitchTap,f
  7368  0627  3EFF               	addlw	-1
  7369  0628  1D03               	skipz
  7370  0629  2E26               	goto	u6385
  7371  062A  353D               	lslf	??_updateSwitchTap,w
  7372  062B  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7373  062C  0086               	movwf	6
  7374  062D  3001               	movlw	1	; select bank3/4
  7375  062E  0087               	movwf	7
  7376  062F  0021               	movlb	1	; select bank1
  7377  0630  084D               	movf	_tap_timer^(0+128),w	;volatile
  7378  0631  3FC0               	movwi [0]fsr1
  7379  0632  084E               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7380  0633  3FC1               	movwi [1]fsr1
  7381  0634  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7382  0635  3FC2               	movwi [2]fsr1
  7383  0636  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7384  0637  3FC3               	movwi [3]fsr1
  7385                           
  7386                           ;SwitchTap.c: 122: tapCntDivisor = tap_iteration;
  7387  0638  0022               	movlb	2	; select bank2
  7388  0639  086B               	movf	(_tap_iteration+1)^(0+256),w
  7389  063A  0020               	movlb	0	; select bank0
  7390  063B  00C4               	movwf	updateSwitchTap@tapCntDivisor+1
  7391  063C  0022               	movlb	2	; select bank2
  7392  063D  086A               	movf	_tap_iteration^(0+256),w
  7393  063E  0020               	movlb	0	; select bank0
  7394  063F  00C3               	movwf	updateSwitchTap@tapCntDivisor
  7395                           
  7396                           ;SwitchTap.c: 123: } else {
  7397  0640  2EBD               	goto	l5670
  7398  0641                     l5656:	
  7399                           
  7400                           ;SwitchTap.c: 124: tap_total = 0;
  7401  0641  3000               	movlw	0
  7402  0642  0023               	movlb	3	; select bank3
  7403  0643  00E3               	movwf	(_tap_total+3)^(0+384)
  7404  0644  3000               	movlw	0
  7405  0645  00E2               	movwf	(_tap_total+2)^(0+384)
  7406  0646  3000               	movlw	0
  7407  0647  00E1               	movwf	(_tap_total+1)^(0+384)
  7408  0648  3000               	movlw	0
  7409  0649  00E0               	movwf	_tap_total^(0+384)
  7410                           
  7411                           ;SwitchTap.c: 125: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7412  064A  0020               	movlb	0	; select bank0
  7413  064B  01C5               	clrf	updateSwitchTap@iCnt
  7414  064C  0AC5               	incf	updateSwitchTap@iCnt,f
  7415  064D                     l5664:	
  7416  064D  0021               	movlb	1	; select bank1
  7417  064E  0869               	movf	_num_taps^(0+128),w
  7418  064F  0020               	movlb	0	; select bank0
  7419  0650  0245               	subwf	updateSwitchTap@iCnt,w
  7420  0651  1803               	btfsc	3,0
  7421  0652  2E97               	goto	l5666
  7422                           
  7423                           ;SwitchTap.c: 126: tap_history[iCnt] = tap_history[iCnt + 1];
  7424  0653  0845               	movf	updateSwitchTap@iCnt,w
  7425  0654  00BD               	movwf	??_updateSwitchTap
  7426  0655  3001               	movlw	1
  7427  0656                     u6395:	
  7428  0656  35BD               	lslf	??_updateSwitchTap,f
  7429  0657  3EFF               	addlw	-1
  7430  0658  1D03               	skipz
  7431  0659  2E56               	goto	u6395
  7432  065A  353D               	lslf	??_updateSwitchTap,w
  7433  065B  3E04               	addlw	4
  7434  065C  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7435  065D  0086               	movwf	6
  7436  065E  3001               	movlw	1	; select bank3/4
  7437  065F  0087               	movwf	7
  7438  0660  3F40               	moviw [0]fsr1
  7439  0661  00BE               	movwf	??_updateSwitchTap+1
  7440  0662  3F41               	moviw [1]fsr1
  7441  0663  00BF               	movwf	??_updateSwitchTap+2
  7442  0664  3F42               	moviw [2]fsr1
  7443  0665  00C0               	movwf	??_updateSwitchTap+3
  7444  0666  3F43               	moviw [3]fsr1
  7445  0667  00C1               	movwf	??_updateSwitchTap+4
  7446  0668  0845               	movf	updateSwitchTap@iCnt,w
  7447  0669  00C2               	movwf	??_updateSwitchTap+5
  7448  066A  3001               	movlw	1
  7449  066B                     u6405:	
  7450  066B  35C2               	lslf	??_updateSwitchTap+5,f
  7451  066C  3EFF               	addlw	-1
  7452  066D  1D03               	skipz
  7453  066E  2E6B               	goto	u6405
  7454  066F  3542               	lslf	??_updateSwitchTap+5,w
  7455  0670  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7456  0671  0086               	movwf	6
  7457  0672  3001               	movlw	1	; select bank3/4
  7458  0673  0087               	movwf	7
  7459  0674  083E               	movf	??_updateSwitchTap+1,w
  7460  0675  3FC0               	movwi [0]fsr1
  7461  0676  083F               	movf	??_updateSwitchTap+2,w
  7462  0677  3FC1               	movwi [1]fsr1
  7463  0678  0840               	movf	??_updateSwitchTap+3,w
  7464  0679  3FC2               	movwi [2]fsr1
  7465  067A  0841               	movf	??_updateSwitchTap+4,w
  7466  067B  3FC3               	movwi [3]fsr1
  7467                           
  7468                           ;SwitchTap.c: 127: tap_total += tap_history[iCnt];
  7469  067C  0845               	movf	updateSwitchTap@iCnt,w
  7470  067D  00BD               	movwf	??_updateSwitchTap
  7471  067E  3001               	movlw	1
  7472  067F                     u6415:	
  7473  067F  35BD               	lslf	??_updateSwitchTap,f
  7474  0680  3EFF               	addlw	-1
  7475  0681  1D03               	skipz
  7476  0682  2E7F               	goto	u6415
  7477  0683  353D               	lslf	??_updateSwitchTap,w
  7478  0684  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7479  0685  0086               	movwf	6
  7480  0686  3001               	movlw	1	; select bank3/4
  7481  0687  0087               	movwf	7
  7482  0688  3F40               	moviw [0]fsr1
  7483  0689  0023               	movlb	3	; select bank3
  7484  068A  07E0               	addwf	_tap_total^(0+384),f
  7485  068B  3F41               	moviw [1]fsr1
  7486  068C  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7487  068D  3F42               	moviw [2]fsr1
  7488  068E  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7489  068F  3F43               	moviw [3]fsr1
  7490  0690  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7491  0691  3001               	movlw	1
  7492  0692  0020               	movlb	0	; select bank0
  7493  0693  00BD               	movwf	??_updateSwitchTap
  7494  0694  083D               	movf	??_updateSwitchTap,w
  7495  0695  07C5               	addwf	updateSwitchTap@iCnt,f
  7496  0696  2E4D               	goto	l5664
  7497  0697                     l5666:	
  7498                           
  7499                           ;SwitchTap.c: 128: }
  7500                           ;SwitchTap.c: 129: tap_history[num_taps] = tap_timer;
  7501  0697  0021               	movlb	1	; select bank1
  7502  0698  0869               	movf	_num_taps^(0+128),w
  7503  0699  0020               	movlb	0	; select bank0
  7504  069A  00BD               	movwf	??_updateSwitchTap
  7505  069B  3001               	movlw	1
  7506  069C                     u6435:	
  7507  069C  35BD               	lslf	??_updateSwitchTap,f
  7508  069D  3EFF               	addlw	-1
  7509  069E  1D03               	skipz
  7510  069F  2E9C               	goto	u6435
  7511  06A0  353D               	lslf	??_updateSwitchTap,w
  7512  06A1  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7513  06A2  0086               	movwf	6
  7514  06A3  3001               	movlw	1	; select bank3/4
  7515  06A4  0087               	movwf	7
  7516  06A5  0021               	movlb	1	; select bank1
  7517  06A6  084D               	movf	_tap_timer^(0+128),w	;volatile
  7518  06A7  3FC0               	movwi [0]fsr1
  7519  06A8  084E               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7520  06A9  3FC1               	movwi [1]fsr1
  7521  06AA  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7522  06AB  3FC2               	movwi [2]fsr1
  7523  06AC  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7524  06AD  3FC3               	movwi [3]fsr1
  7525                           
  7526                           ;SwitchTap.c: 130: tap_total += tap_timer;
  7527  06AE  084D               	movf	_tap_timer^(0+128),w	;volatile
  7528  06AF  0023               	movlb	3	; select bank3
  7529  06B0  07E0               	addwf	_tap_total^(0+384),f
  7530  06B1  0021               	movlb	1	; select bank1
  7531  06B2  084E               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7532  06B3  0023               	movlb	3	; select bank3
  7533  06B4  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7534  06B5  0021               	movlb	1	; select bank1
  7535  06B6  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7536  06B7  0023               	movlb	3	; select bank3
  7537  06B8  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7538  06B9  0021               	movlb	1	; select bank1
  7539  06BA  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7540  06BB  0023               	movlb	3	; select bank3
  7541  06BC  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7542  06BD                     l5670:	
  7543                           
  7544                           ;SwitchTap.c: 131: }
  7545                           ;SwitchTap.c: 133: baseline_delay_time = tap_total / tapCntDivisor;
  7546  06BD  0020               	movlb	0	; select bank0
  7547  06BE  0843               	movf	updateSwitchTap@tapCntDivisor,w
  7548  06BF  00AE               	movwf	___aldiv@divisor
  7549  06C0  0844               	movf	updateSwitchTap@tapCntDivisor+1,w
  7550  06C1  00AF               	movwf	___aldiv@divisor+1
  7551  06C2  0D89               	rlf	9,f
  7552  06C3  3B89               	subwfb	9,f
  7553  06C4  0989               	comf	9,f
  7554  06C5  00B0               	movwf	___aldiv@divisor+2
  7555  06C6  00B1               	movwf	___aldiv@divisor+3
  7556  06C7  0023               	movlb	3	; select bank3
  7557  06C8  0863               	movf	(_tap_total+3)^(0+384),w
  7558  06C9  0020               	movlb	0	; select bank0
  7559  06CA  00B5               	movwf	___aldiv@dividend+3
  7560  06CB  0023               	movlb	3	; select bank3
  7561  06CC  0862               	movf	(_tap_total+2)^(0+384),w
  7562  06CD  0020               	movlb	0	; select bank0
  7563  06CE  00B4               	movwf	___aldiv@dividend+2
  7564  06CF  0023               	movlb	3	; select bank3
  7565  06D0  0861               	movf	(_tap_total+1)^(0+384),w
  7566  06D1  0020               	movlb	0	; select bank0
  7567  06D2  00B3               	movwf	___aldiv@dividend+1
  7568  06D3  0023               	movlb	3	; select bank3
  7569  06D4  0860               	movf	_tap_total^(0+384),w
  7570  06D5  0020               	movlb	0	; select bank0
  7571  06D6  00B2               	movwf	___aldiv@dividend
  7572  06D7  3188  2000         	fcall	___aldiv
  7573  06D9  0020               	movlb	0	; select bank0
  7574  06DA  0831               	movf	?___aldiv+3,w
  7575  06DB  0021               	movlb	1	; select bank1
  7576  06DC  00DD               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7577  06DD  0020               	movlb	0	; select bank0
  7578  06DE  0830               	movf	?___aldiv+2,w
  7579  06DF  0021               	movlb	1	; select bank1
  7580  06E0  00DC               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7581  06E1  0020               	movlb	0	; select bank0
  7582  06E2  082F               	movf	?___aldiv+1,w
  7583  06E3  0021               	movlb	1	; select bank1
  7584  06E4  00DB               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7585  06E5  0020               	movlb	0	; select bank0
  7586  06E6  082E               	movf	?___aldiv,w
  7587  06E7  0021               	movlb	1	; select bank1
  7588  06E8  00DA               	movwf	_baseline_delay_time^(0+128)	;volatile
  7589                           
  7590                           ;SwitchTap.c: 134: delay_time_changed = 1;
  7591  06E9  3001               	movlw	1
  7592  06EA  0022               	movlb	2	; select bank2
  7593  06EB  00DA               	movwf	_delay_time_changed^(0+256)
  7594  06EC  3000               	movlw	0
  7595  06ED  00DB               	movwf	(_delay_time_changed^(0+256)+1)
  7596                           
  7597                           ;SwitchTap.c: 135: tap_timer = 0;
  7598  06EE  3000               	movlw	0
  7599  06EF  0021               	movlb	1	; select bank1
  7600  06F0  00D0               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7601  06F1  3000               	movlw	0
  7602  06F2  00CF               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7603  06F3  3000               	movlw	0
  7604  06F4  00CE               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7605  06F5  3000               	movlw	0
  7606  06F6  00CD               	movwf	_tap_timer^(0+128)	;volatile
  7607                           
  7608                           ;SwitchTap.c: 137: tap_iteration++;
  7609  06F7  3001               	movlw	1
  7610  06F8  0022               	movlb	2	; select bank2
  7611  06F9  07EA               	addwf	_tap_iteration^(0+256),f
  7612  06FA  3000               	movlw	0
  7613  06FB  3DEB               	addwfc	(_tap_iteration+1)^(0+256),f
  7614                           
  7615                           ;SwitchTap.c: 138: }
  7616                           ;SwitchTap.c: 140: } else if (switchTap_pressed >= 25) {
  7617  06FC  0008               	return
  7618  06FD                     l5678:	
  7619  06FD  3019               	movlw	25
  7620  06FE  0021               	movlb	1	; select bank1
  7621  06FF  0259               	subwf	_switchTap_pressed^(0+128),w
  7622  0700  1C03               	skipc
  7623  0701  0008               	return
  7624                           
  7625                           ;SwitchTap.c: 141: switchTap_down = 0;
  7626  0702  0022               	movlb	2	; select bank2
  7627  0703  01D6               	clrf	_switchTap_down^(0+256)
  7628                           
  7629                           ;SwitchTap.c: 142: switchTap_state = 0;
  7630  0704  01EE               	clrf	_switchTap_state^(0+256)
  7631                           
  7632                           ;SwitchTap.c: 148: setLongTapState(0);
  7633  0705  3000               	movlw	0
  7634  0706  0020               	movlb	0	; select bank0
  7635  0707  00A2               	movwf	setLongTapState@f_state
  7636  0708  00A3               	movwf	setLongTapState@f_state+1
  7637  0709  319D  25D3         	fcall	_setLongTapState
  7638                           
  7639                           ;SwitchTap.c: 150: longTap_timer = 0;
  7640  070B  0022               	movlb	2	; select bank2
  7641  070C  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7642  070D  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7643                           
  7644                           ;SwitchTap.c: 151: longTap_start = 0;
  7645  070E  01D1               	clrf	_longTap_start^(0+256)
  7646                           
  7647                           ;SwitchTap.c: 153: switchTap_pressed = 25;
  7648  070F  3019               	movlw	25
  7649  0710  0020               	movlb	0	; select bank0
  7650  0711  00BD               	movwf	??_updateSwitchTap
  7651  0712  083D               	movf	??_updateSwitchTap,w
  7652  0713  0021               	movlb	1	; select bank1
  7653  0714  00D9               	movwf	_switchTap_pressed^(0+128)
  7654  0715  0008               	return
  7655  0716                     __end_of_updateSwitchTap:	
  7656                           
  7657                           	psect	text3
  7658  1DD3                     __ptext3:	
  7659 ;; *************** function _setLongTapState *****************
  7660 ;; Defined at:
  7661 ;;		line 168 in file "SwitchTap.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  f_state         2    2[BANK0 ] int 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, status,0
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7675 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7678 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7679 ;;Total ram usage:        4 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    2
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_updateSwitchTap
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function _setLongTapState
  7691  1DD3                     _setLongTapState:	
  7692                           
  7693                           ;SwitchTap.c: 169: if (longTap_state == f_state) {return;}
  7694                           
  7695                           ;incstack = 0
  7696                           ; Regs used in _setLongTapState: [wreg+status,0]
  7697  1DD3  0020               	movlb	0	; select bank0
  7698  1DD4  086A               	movf	_longTap_state,w	;volatile
  7699  1DD5  00A4               	movwf	??_setLongTapState
  7700  1DD6  01A5               	clrf	??_setLongTapState+1
  7701  1DD7  0823               	movf	setLongTapState@f_state+1,w
  7702  1DD8  0625               	xorwf	??_setLongTapState+1,w
  7703  1DD9  1D03               	skipz
  7704  1DDA  2DDD               	goto	u5115
  7705  1DDB  0822               	movf	setLongTapState@f_state,w
  7706  1DDC  0624               	xorwf	??_setLongTapState,w
  7707  1DDD                     u5115:	
  7708  1DDD  1903               	btfsc	3,2
  7709  1DDE  0008               	return
  7710                           
  7711                           ;SwitchTap.c: 170: longTap_state = f_state;
  7712  1DDF  0822               	movf	setLongTapState@f_state,w
  7713  1DE0  00A4               	movwf	??_setLongTapState
  7714  1DE1  0824               	movf	??_setLongTapState,w
  7715  1DE2  00EA               	movwf	_longTap_state	;volatile
  7716                           
  7717                           ;SwitchTap.c: 171: LATBbits.LATB5 = f_state;
  7718  1DE3  0C22               	rrf	setLongTapState@f_state,w
  7719  1DE4  0022               	movlb	2	; select bank2
  7720  1DE5  1C03               	skipc
  7721  1DE6  128D               	bcf	13,5	;volatile
  7722  1DE7  1803               	skipnc
  7723  1DE8  168D               	bsf	13,5	;volatile
  7724  1DE9  0008               	return
  7725  1DEA                     __end_of_setLongTapState:	
  7726                           
  7727                           	psect	text4
  7728  0716                     __ptext4:	
  7729 ;; *************** function _updateSwitchBypass *****************
  7730 ;; Defined at:
  7731 ;;		line 34 in file "SwitchBypass.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;		None
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0, pclath, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7749 ;;Total ram usage:        2 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    5
  7752 ;; This function calls:
  7753 ;;		_setDoublePressState
  7754 ;;		_setFeedbackState
  7755 ;;		_setSwitchBypassState
  7756 ;; This function is called by:
  7757 ;;		_main
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _updateSwitchBypass
  7763  0716                     _updateSwitchBypass:	
  7764                           
  7765                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7769  0716  0020               	movlb	0	; select bank0
  7770  0717  1890               	btfsc	16,1	;volatile
  7771  0718  2F2C               	goto	l5506
  7772                           
  7773                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7774  0719  0022               	movlb	2	; select bank2
  7775  071A  084B               	movf	(_switchBypass_pressed+1)^(0+256),w
  7776  071B  3A80               	xorlw	128
  7777  071C  0020               	movlb	0	; select bank0
  7778  071D  00B8               	movwf	??_updateSwitchBypass
  7779  071E  3080               	movlw	128
  7780  071F  0238               	subwf	??_updateSwitchBypass,w
  7781  0720  1D03               	skipz
  7782  0721  2F25               	goto	u6015
  7783  0722  3001               	movlw	1
  7784  0723  0022               	movlb	2	; select bank2
  7785  0724  024A               	subwf	_switchBypass_pressed^(0+256),w
  7786  0725                     u6015:	
  7787  0725  1C03               	skipc
  7788  0726  2F3F               	goto	l5510
  7789                           
  7790                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7791  0727  30FF               	movlw	255
  7792  0728  0022               	movlb	2	; select bank2
  7793  0729  07CA               	addwf	_switchBypass_pressed^(0+256),f
  7794  072A  30FF               	movlw	255
  7795  072B  2F3E               	goto	L6
  7796  072C                     l5506:	
  7797                           ;SwitchBypass.c: 44: }
  7798                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7799                           
  7800  072C  0022               	movlb	2	; select bank2
  7801  072D  084B               	movf	(_switchBypass_pressed+1)^(0+256),w
  7802  072E  3A80               	xorlw	128
  7803  072F  0020               	movlb	0	; select bank0
  7804  0730  00B8               	movwf	??_updateSwitchBypass
  7805  0731  3080               	movlw	128
  7806  0732  0238               	subwf	??_updateSwitchBypass,w
  7807  0733  1D03               	skipz
  7808  0734  2F38               	goto	u6025
  7809  0735  3019               	movlw	25
  7810  0736  0022               	movlb	2	; select bank2
  7811  0737  024A               	subwf	_switchBypass_pressed^(0+256),w
  7812  0738                     u6025:	
  7813  0738  1803               	skipnc
  7814  0739  2F3F               	goto	l5510
  7815                           
  7816                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7817  073A  3001               	movlw	1
  7818  073B  0022               	movlb	2	; select bank2
  7819  073C  07CA               	addwf	_switchBypass_pressed^(0+256),f
  7820  073D  3000               	movlw	0
  7821  073E                     L6:	
  7822  073E  3DCB               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7823  073F                     l5510:	
  7824                           
  7825                           ;SwitchBypass.c: 47: }
  7826                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7827  073F  0022               	movlb	2	; select bank2
  7828  0740  084A               	movf	_switchBypass_pressed^(0+256),w
  7829  0741  044B               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7830  0742  1D03               	btfss	3,2
  7831  0743  2F9D               	goto	l5550
  7832                           
  7833                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7834  0744  0021               	movlb	1	; select bank1
  7835  0745  0857               	movf	_feedback_start^(0+128),w
  7836  0746  1D03               	btfss	3,2
  7837  0747  2F4D               	goto	l5518
  7838                           
  7839                           ;SwitchBypass.c: 57: feedback_start = 1;
  7840  0748  01D7               	clrf	_feedback_start^(0+128)
  7841  0749  0AD7               	incf	_feedback_start^(0+128),f
  7842                           
  7843                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7844  074A  0022               	movlb	2	; select bank2
  7845  074B  01B8               	clrf	_feedback_timer^(0+256)	;volatile
  7846  074C  01B9               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7847  074D                     l5518:	
  7848                           
  7849                           ;SwitchBypass.c: 59: }
  7850                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7851  074D  0021               	movlb	1	; select bank1
  7852  074E  0865               	movf	(_long_press_limit+1)^(0+128),w
  7853  074F  0022               	movlb	2	; select bank2
  7854  0750  0239               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7855  0751  1D03               	skipz
  7856  0752  2F57               	goto	u6055
  7857  0753  0021               	movlb	1	; select bank1
  7858  0754  0864               	movf	_long_press_limit^(0+128),w
  7859  0755  0022               	movlb	2	; select bank2
  7860  0756  0238               	subwf	_feedback_timer^(0+256),w	;volatile
  7861  0757                     u6055:	
  7862  0757  1C03               	skipc
  7863  0758  2F76               	goto	l5532
  7864  0759  0020               	movlb	0	; select bank0
  7865  075A  0869               	movf	_feedback_state,w	;volatile
  7866  075B  1D03               	btfss	3,2
  7867  075C  2F76               	goto	l5532
  7868  075D  086B               	movf	_doubleTap_state,w	;volatile
  7869  075E  1D03               	btfss	3,2
  7870  075F  2F76               	goto	l5532
  7871                           
  7872                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7873  0760  0022               	movlb	2	; select bank2
  7874  0761  110D               	bcf	13,2	;volatile
  7875                           
  7876                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7877  0762  0351               	decf	_longTap_start^(0+256),w
  7878  0763  1903               	btfsc	3,2
  7879  0764  2F6E               	goto	l5530
  7880                           
  7881                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7882  0765  3001               	movlw	1
  7883  0766  0020               	movlb	0	; select bank0
  7884  0767  00A2               	movwf	setFeedbackState@f_state
  7885  0768  3000               	movlw	0
  7886  0769  00A3               	movwf	setFeedbackState@f_state+1
  7887  076A  319D  25BC  3187   	fcall	_setFeedbackState
  7888                           
  7889                           ;SwitchBypass.c: 67: } else {
  7890  076D  2F76               	goto	l5532
  7891  076E                     l5530:	
  7892                           
  7893                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7894  076E  3001               	movlw	1
  7895  076F  0020               	movlb	0	; select bank0
  7896  0770  00B4               	movwf	setDoublePressState@f_state
  7897  0771  3000               	movlw	0
  7898  0772  00B5               	movwf	setDoublePressState@f_state+1
  7899  0773  319E  268B  3187   	fcall	_setDoublePressState
  7900  0776                     l5532:	
  7901                           
  7902                           ;SwitchBypass.c: 69: }
  7903                           ;SwitchBypass.c: 70: }
  7904                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7905  0776  0020               	movlb	0	; select bank0
  7906  0777  086B               	movf	_doubleTap_state,w	;volatile
  7907  0778  1D03               	btfss	3,2
  7908  0779  2F99               	goto	l1089
  7909  077A  0869               	movf	_feedback_state,w	;volatile
  7910  077B  1D03               	btfss	3,2
  7911  077C  2F99               	goto	l1089
  7912                           
  7913                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7914  077D  037D               	decf	_switchBypass_state,w
  7915  077E  1D03               	btfss	3,2
  7916  077F  2F8C               	goto	l5544
  7917                           
  7918                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7919  0780  0022               	movlb	2	; select bank2
  7920  0781  0368               	decf	_switchBypass_up^(0+256),w
  7921  0782  0469               	iorwf	(_switchBypass_up+1)^(0+256),w
  7922  0783  1D03               	btfss	3,2
  7923  0784  2F99               	goto	l1089
  7924                           
  7925                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7926  0785  01ED               	clrf	_currentBypassState^(0+256)
  7927  0786  0AED               	incf	_currentBypassState^(0+256),f
  7928                           
  7929                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7930  0787  3001               	movlw	1
  7931  0788  00CC               	movwf	_switchBypass_toggle^(0+256)
  7932  0789  3000               	movlw	0
  7933  078A  00CD               	movwf	(_switchBypass_toggle^(0+256)+1)
  7934                           
  7935                           ;SwitchBypass.c: 78: }
  7936                           ;SwitchBypass.c: 93: } else {
  7937  078B  2F99               	goto	l1089
  7938  078C                     l5544:	
  7939                           
  7940                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7941  078C  0022               	movlb	2	; select bank2
  7942  078D  034F               	decf	_bypass_turning_on^(0+256),w
  7943  078E  1903               	btfsc	3,2
  7944  078F  2F99               	goto	l1089
  7945                           
  7946                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7947  0790  01ED               	clrf	_currentBypassState^(0+256)
  7948                           
  7949                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7950  0791  01CF               	clrf	_bypass_turning_on^(0+256)
  7951  0792  0ACF               	incf	_bypass_turning_on^(0+256),f
  7952                           
  7953                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7954  0793  01CC               	clrf	_switchBypass_toggle^(0+256)
  7955  0794  01CD               	clrf	(_switchBypass_toggle+1)^(0+256)
  7956                           
  7957                           ;SwitchBypass.c: 101: feedback_state = 0;
  7958  0795  0020               	movlb	0	; select bank0
  7959  0796  01E9               	clrf	_feedback_state	;volatile
  7960                           
  7961                           ;SwitchBypass.c: 102: feedback_start = 0;
  7962  0797  0021               	movlb	1	; select bank1
  7963  0798  01D7               	clrf	_feedback_start^(0+128)
  7964  0799                     l1089:	
  7965                           
  7966                           ;SwitchBypass.c: 103: }
  7967                           ;SwitchBypass.c: 104: }
  7968                           ;SwitchBypass.c: 106: }
  7969                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7970  0799  0022               	movlb	2	; select bank2
  7971  079A  01E8               	clrf	_switchBypass_up^(0+256)
  7972  079B  01E9               	clrf	(_switchBypass_up+1)^(0+256)
  7973                           
  7974                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7975  079C  0008               	return
  7976  079D                     l5550:	
  7977  079D  084B               	movf	(_switchBypass_pressed+1)^(0+256),w
  7978  079E  3A80               	xorlw	128
  7979  079F  0020               	movlb	0	; select bank0
  7980  07A0  00B8               	movwf	??_updateSwitchBypass
  7981  07A1  3080               	movlw	128
  7982  07A2  0238               	subwf	??_updateSwitchBypass,w
  7983  07A3  1D03               	skipz
  7984  07A4  2FA8               	goto	u6145
  7985  07A5  3019               	movlw	25
  7986  07A6  0022               	movlb	2	; select bank2
  7987  07A7  024A               	subwf	_switchBypass_pressed^(0+256),w
  7988  07A8                     u6145:	
  7989  07A8  1C03               	skipc
  7990  07A9  0008               	return
  7991                           
  7992                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7993  07AA  0020               	movlb	0	; select bank0
  7994  07AB  036B               	decf	_doubleTap_state,w	;volatile
  7995  07AC  1D03               	btfss	3,2
  7996  07AD  2FB7               	goto	l5556
  7997                           
  7998                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7999  07AE  0022               	movlb	2	; select bank2
  8000  07AF  086D               	movf	_currentBypassState^(0+256),w
  8001  07B0  0020               	movlb	0	; select bank0
  8002  07B1  00B8               	movwf	??_updateSwitchBypass
  8003  07B2  01B9               	clrf	??_updateSwitchBypass+1
  8004  07B3  0838               	movf	??_updateSwitchBypass,w
  8005  07B4  00B4               	movwf	setSwitchBypassState@f_state
  8006  07B5  0839               	movf	??_updateSwitchBypass+1,w
  8007  07B6  2FD2               	goto	L7
  8008  07B7                     l5556:	
  8009                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  8010                           
  8011  07B7  0022               	movlb	2	; select bank2
  8012  07B8  034F               	decf	_bypass_turning_on^(0+256),w
  8013  07B9  1903               	btfsc	3,2
  8014  07BA  2FBF               	goto	l5560
  8015  07BB  0020               	movlb	0	; select bank0
  8016  07BC  0369               	decf	_feedback_state,w	;volatile
  8017  07BD  1D03               	btfss	3,2
  8018  07BE  2FC4               	goto	l5562
  8019  07BF                     l5560:	
  8020                           
  8021                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  8022  07BF  3001               	movlw	1
  8023  07C0  0020               	movlb	0	; select bank0
  8024  07C1  00B4               	movwf	setSwitchBypassState@f_state
  8025  07C2  3000               	movlw	0
  8026  07C3  2FD2               	goto	L7
  8027  07C4                     l5562:	
  8028                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8029                           
  8030  07C4  0022               	movlb	2	; select bank2
  8031  07C5  034C               	decf	_switchBypass_toggle^(0+256),w
  8032  07C6  044D               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  8033  07C7  1D03               	btfss	3,2
  8034  07C8  2FD6               	goto	l5570
  8035  07C9  0020               	movlb	0	; select bank0
  8036  07CA  0869               	movf	_feedback_state,w	;volatile
  8037  07CB  1D03               	btfss	3,2
  8038  07CC  2FD6               	goto	l5570
  8039  07CD  086B               	movf	_doubleTap_state,w	;volatile
  8040  07CE  1D03               	btfss	3,2
  8041  07CF  2FD6               	goto	l5570
  8042                           
  8043                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8044  07D0  3000               	movlw	0
  8045  07D1  00B4               	movwf	setSwitchBypassState@f_state
  8046  07D2                     L7:	
  8047  07D2  00B5               	movwf	setSwitchBypassState@f_state+1
  8048  07D3  3191  21E1  3187   	fcall	_setSwitchBypassState
  8049  07D6                     l5570:	
  8050                           
  8051                           ;SwitchBypass.c: 115: }
  8052                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8053  07D6  0C7D               	rrf	_switchBypass_state,w
  8054  07D7  0022               	movlb	2	; select bank2
  8055  07D8  1C03               	skipc
  8056  07D9  110D               	bcf	13,2	;volatile
  8057  07DA  1803               	skipnc
  8058  07DB  150D               	bsf	13,2	;volatile
  8059                           
  8060                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8061  07DC  3000               	movlw	0
  8062  07DD  0020               	movlb	0	; select bank0
  8063  07DE  00A2               	movwf	setFeedbackState@f_state
  8064  07DF  00A3               	movwf	setFeedbackState@f_state+1
  8065  07E0  319D  25BC  3187   	fcall	_setFeedbackState
  8066                           
  8067                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8068  07E3  3000               	movlw	0
  8069  07E4  0020               	movlb	0	; select bank0
  8070  07E5  00B4               	movwf	setDoublePressState@f_state
  8071  07E6  00B5               	movwf	setDoublePressState@f_state+1
  8072  07E7  319E  268B         	fcall	_setDoublePressState
  8073                           
  8074                           ;SwitchBypass.c: 122: feedback_start = 0;
  8075  07E9  0021               	movlb	1	; select bank1
  8076  07EA  01D7               	clrf	_feedback_start^(0+128)
  8077                           
  8078                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8079  07EB  0022               	movlb	2	; select bank2
  8080  07EC  01CF               	clrf	_bypass_turning_on^(0+256)
  8081                           
  8082                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8083  07ED  01CC               	clrf	_switchBypass_toggle^(0+256)
  8084  07EE  01CD               	clrf	(_switchBypass_toggle+1)^(0+256)
  8085                           
  8086                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8087  07EF  3001               	movlw	1
  8088  07F0  00E8               	movwf	_switchBypass_up^(0+256)
  8089  07F1  3000               	movlw	0
  8090  07F2  00E9               	movwf	(_switchBypass_up^(0+256)+1)
  8091                           
  8092                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8093  07F3  3019               	movlw	25
  8094  07F4  00CA               	movwf	_switchBypass_pressed^(0+256)
  8095  07F5  3000               	movlw	0
  8096  07F6  00CB               	movwf	(_switchBypass_pressed^(0+256)+1)
  8097  07F7  0008               	return
  8098  07F8                     __end_of_updateSwitchBypass:	
  8099                           
  8100                           	psect	text5
  8101  1DBC                     __ptext5:	
  8102 ;; *************** function _setFeedbackState *****************
  8103 ;; Defined at:
  8104 ;;		line 151 in file "SwitchBypass.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  f_state         2    2[BANK0 ] int 
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;		None
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  1    wreg      void 
  8111 ;; Registers used:
  8112 ;;		wreg, status,0
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8118 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8121 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8122 ;;Total ram usage:        4 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    2
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_updateSwitchBypass
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function _setFeedbackState
  8134  1DBC                     _setFeedbackState:	
  8135                           
  8136                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8140  1DBC  0020               	movlb	0	; select bank0
  8141  1DBD  0869               	movf	_feedback_state,w	;volatile
  8142  1DBE  00A4               	movwf	??_setFeedbackState
  8143  1DBF  01A5               	clrf	??_setFeedbackState+1
  8144  1DC0  0823               	movf	setFeedbackState@f_state+1,w
  8145  1DC1  0625               	xorwf	??_setFeedbackState+1,w
  8146  1DC2  1D03               	skipz
  8147  1DC3  2DC6               	goto	u5085
  8148  1DC4  0822               	movf	setFeedbackState@f_state,w
  8149  1DC5  0624               	xorwf	??_setFeedbackState,w
  8150  1DC6                     u5085:	
  8151  1DC6  1903               	btfsc	3,2
  8152  1DC7  0008               	return
  8153                           
  8154                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8155  1DC8  0822               	movf	setFeedbackState@f_state,w
  8156  1DC9  00A4               	movwf	??_setFeedbackState
  8157  1DCA  0824               	movf	??_setFeedbackState,w
  8158  1DCB  00E9               	movwf	_feedback_state	;volatile
  8159                           
  8160                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8161  1DCC  0C22               	rrf	setFeedbackState@f_state,w
  8162  1DCD  0022               	movlb	2	; select bank2
  8163  1DCE  1C03               	skipc
  8164  1DCF  118D               	bcf	13,3	;volatile
  8165  1DD0  1803               	skipnc
  8166  1DD1  158D               	bsf	13,3	;volatile
  8167  1DD2  0008               	return
  8168  1DD3                     __end_of_setFeedbackState:	
  8169                           
  8170                           	psect	text6
  8171  1E8B                     __ptext6:	
  8172 ;; *************** function _setDoublePressState *****************
  8173 ;; Defined at:
  8174 ;;		line 20 in file "preset_programming.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  f_state         2   20[BANK0 ] int 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8188 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8191 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8192 ;;Total ram usage:        4 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    4
  8195 ;; This function calls:
  8196 ;;		_wait_ms
  8197 ;; This function is called by:
  8198 ;;		_updateSwitchBypass
  8199 ;;		_updateSwitchTap
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           
  8204                           ;psect for function _setDoublePressState
  8205  1E8B                     _setDoublePressState:	
  8206                           
  8207                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  8208                           
  8209                           ;incstack = 0
  8210                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  8211  1E8B  0020               	movlb	0	; select bank0
  8212  1E8C  086B               	movf	_doubleTap_state,w	;volatile
  8213  1E8D  00B6               	movwf	??_setDoublePressState
  8214  1E8E  01B7               	clrf	??_setDoublePressState+1
  8215  1E8F  0835               	movf	setDoublePressState@f_state+1,w
  8216  1E90  0637               	xorwf	??_setDoublePressState+1,w
  8217  1E91  1D03               	skipz
  8218  1E92  2E95               	goto	u5095
  8219  1E93  0834               	movf	setDoublePressState@f_state,w
  8220  1E94  0636               	xorwf	??_setDoublePressState,w
  8221  1E95                     u5095:	
  8222  1E95  1903               	btfsc	3,2
  8223  1E96  0008               	return
  8224                           
  8225                           ;preset_programming.c: 22: doubleTap_state = f_state;
  8226  1E97  0834               	movf	setDoublePressState@f_state,w
  8227  1E98  00B6               	movwf	??_setDoublePressState
  8228  1E99  0836               	movf	??_setDoublePressState,w
  8229  1E9A  00EB               	movwf	_doubleTap_state	;volatile
  8230                           
  8231                           ;preset_programming.c: 23: if (f_state == 1) {
  8232  1E9B  0334               	decf	setDoublePressState@f_state,w
  8233  1E9C  0435               	iorwf	setDoublePressState@f_state+1,w
  8234  1E9D  1D03               	btfss	3,2
  8235  1E9E  2EA2               	goto	l5072
  8236                           
  8237                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  8238  1E9F  0022               	movlb	2	; select bank2
  8239  1EA0  120D               	bcf	13,4	;volatile
  8240                           
  8241                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  8242  1EA1  110D               	bcf	13,2	;volatile
  8243  1EA2                     l5072:	
  8244                           
  8245                           ;preset_programming.c: 26: }
  8246                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  8247  1EA2  0020               	movlb	0	; select bank0
  8248  1EA3  0C34               	rrf	setDoublePressState@f_state,w
  8249  1EA4  0022               	movlb	2	; select bank2
  8250  1EA5  1C03               	skipc
  8251  1EA6  108D               	bcf	13,1	;volatile
  8252  1EA7  1803               	skipnc
  8253  1EA8  148D               	bsf	13,1	;volatile
  8254                           
  8255                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  8256  1EA9  0020               	movlb	0	; select bank0
  8257  1EAA  0C34               	rrf	setDoublePressState@f_state,w
  8258  1EAB  0022               	movlb	2	; select bank2
  8259  1EAC  1C03               	skipc
  8260  1EAD  100D               	bcf	13,0	;volatile
  8261  1EAE  1803               	skipnc
  8262  1EAF  140D               	bsf	13,0	;volatile
  8263                           
  8264                           ;preset_programming.c: 31: wait_ms(20);
  8265  1EB0  3014               	movlw	20
  8266  1EB1  0020               	movlb	0	; select bank0
  8267  1EB2  00AE               	movwf	wait_ms@timeSec
  8268  1EB3  3000               	movlw	0
  8269  1EB4  00AF               	movwf	wait_ms@timeSec+1
  8270  1EB5  319F  2718         	fcall	_wait_ms
  8271  1EB7  0008               	return
  8272  1EB8                     __end_of_setDoublePressState:	
  8273                           
  8274                           	psect	text7
  8275  1E60                     __ptext7:	
  8276 ;; *************** function _showBootSequence *****************
  8277 ;; Defined at:
  8278 ;;		line 86 in file "LEDs.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8296 ;;Total ram usage:        1 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    5
  8299 ;; This function calls:
  8300 ;;		_getCurrentLEDState
  8301 ;;		_restoreLEDState
  8302 ;;		_solidring_tactiles
  8303 ;;		_star_tactiles
  8304 ;; This function is called by:
  8305 ;;		_main
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _showBootSequence
  8311  1E60                     _showBootSequence:	
  8312                           
  8313                           ;LEDs.c: 87: getCurrentLEDState();
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8317  1E60  319D  2594  319E   	fcall	_getCurrentLEDState
  8318                           
  8319                           ;LEDs.c: 88: suspend_blink = 1;
  8320  1E63  3001               	movlw	1
  8321  1E64  0020               	movlb	0	; select bank0
  8322  1E65  00BB               	movwf	??_showBootSequence
  8323  1E66  083B               	movf	??_showBootSequence,w
  8324  1E67  0021               	movlb	1	; select bank1
  8325  1E68  00D8               	movwf	_suspend_blink^(0+128)	;volatile
  8326                           
  8327                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8328  1E69  0022               	movlb	2	; select bank2
  8329  1E6A  120D               	bcf	13,4	;volatile
  8330                           
  8331                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8332  1E6B  110D               	bcf	13,2	;volatile
  8333                           
  8334                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8335  1E6C  128D               	bcf	13,5	;volatile
  8336                           
  8337                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8338  1E6D  118D               	bcf	13,3	;volatile
  8339                           
  8340                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8341  1E6E  100D               	bcf	13,0	;volatile
  8342                           
  8343                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8344  1E6F  108D               	bcf	13,1	;volatile
  8345                           
  8346                           ;LEDs.c: 113: star_tactiles(0);
  8347  1E70  3000               	movlw	0
  8348  1E71  3194  24AF  319E   	fcall	_star_tactiles
  8349                           
  8350                           ;LEDs.c: 114: star_tactiles(0);
  8351  1E74  3000               	movlw	0
  8352  1E75  3194  24AF  319E   	fcall	_star_tactiles
  8353                           
  8354                           ;LEDs.c: 115: star_tactiles(1);
  8355  1E78  3001               	movlw	1
  8356  1E79  3194  24AF  319E   	fcall	_star_tactiles
  8357                           
  8358                           ;LEDs.c: 116: star_tactiles(1);
  8359  1E7C  3001               	movlw	1
  8360  1E7D  3194  24AF  319E   	fcall	_star_tactiles
  8361                           
  8362                           ;LEDs.c: 118: solidring_tactiles();
  8363  1E80  3190  20DE  319E   	fcall	_solidring_tactiles
  8364                           
  8365                           ;LEDs.c: 119: solidring_tactiles();
  8366  1E83  3190  20DE  319E   	fcall	_solidring_tactiles
  8367                           
  8368                           ;LEDs.c: 122: suspend_blink = 0;
  8369  1E86  0021               	movlb	1	; select bank1
  8370  1E87  01D8               	clrf	_suspend_blink^(0+128)	;volatile
  8371                           
  8372                           ;LEDs.c: 123: restoreLEDState();
  8373  1E88  319D  25A6         	fcall	_restoreLEDState
  8374  1E8A  0008               	return
  8375  1E8B                     __end_of_showBootSequence:	
  8376                           
  8377                           	psect	text8
  8378  14AF                     __ptext8:	
  8379 ;; *************** function _star_tactiles *****************
  8380 ;; Defined at:
  8381 ;;		line 194 in file "LEDs.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;  reverse         1    wreg     unsigned char 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  reverse         1   22[BANK0 ] unsigned char 
  8386 ;;  iLed            2   25[BANK0 ] int 
  8387 ;;  iLed            2   23[BANK0 ] int 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8398 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8400 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8401 ;;Total ram usage:        7 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    4
  8404 ;; This function calls:
  8405 ;;		_set_leds_bottom
  8406 ;;		_set_leds_top
  8407 ;;		_wait_ms
  8408 ;; This function is called by:
  8409 ;;		_showBootSequence
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function _star_tactiles
  8415  14AF                     _star_tactiles:	
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8419                           ;star_tactiles@reverse stored from wreg
  8420  14AF  0020               	movlb	0	; select bank0
  8421  14B0  00B6               	movwf	star_tactiles@reverse
  8422                           
  8423                           ;LEDs.c: 195: if (reverse == 1) {
  8424  14B1  0336               	decf	star_tactiles@reverse,w
  8425  14B2  1D03               	btfss	3,2
  8426  14B3  2CE4               	goto	l4998
  8427                           
  8428                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8429  14B4  3005               	movlw	5
  8430  14B5  00B7               	movwf	star_tactiles@iLed
  8431  14B6  3000               	movlw	0
  8432  14B7  00B8               	movwf	star_tactiles@iLed+1
  8433  14B8                     L8:	
  8434  14B8  1BB8               	btfsc	star_tactiles@iLed+1,7
  8435  14B9  0008               	return
  8436                           
  8437                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8438  14BA  0838               	movf	star_tactiles@iLed+1,w
  8439  14BB  00A3               	movwf	set_leds_top@x+1
  8440  14BC  0837               	movf	star_tactiles@iLed,w
  8441  14BD  00A2               	movwf	set_leds_top@x
  8442  14BE  3001               	movlw	1
  8443  14BF  00A4               	movwf	set_leds_top@ledState
  8444  14C0  3000               	movlw	0
  8445  14C1  00A5               	movwf	set_leds_top@ledState+1
  8446  14C2  3193  23F6  3194   	fcall	_set_leds_top
  8447                           
  8448                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8449  14C5  0020               	movlb	0	; select bank0
  8450  14C6  0937               	comf	star_tactiles@iLed,w
  8451  14C7  00B4               	movwf	??_star_tactiles
  8452  14C8  0938               	comf	star_tactiles@iLed+1,w
  8453  14C9  00B5               	movwf	??_star_tactiles+1
  8454  14CA  0AB4               	incf	??_star_tactiles,f
  8455  14CB  1903               	skipnz
  8456  14CC  0AB5               	incf	??_star_tactiles+1,f
  8457  14CD  0834               	movf	??_star_tactiles,w
  8458  14CE  3E06               	addlw	6
  8459  14CF  00A2               	movwf	set_leds_bottom@x
  8460  14D0  3000               	movlw	0
  8461  14D1  3D35               	addwfc	??_star_tactiles+1,w
  8462  14D2  00A3               	movwf	set_leds_bottom@x+1
  8463  14D3  319F  274A  3194   	fcall	_set_leds_bottom
  8464                           
  8465                           ;LEDs.c: 199: wait_ms(5);
  8466  14D6  3005               	movlw	5
  8467  14D7  0020               	movlb	0	; select bank0
  8468  14D8  00AE               	movwf	wait_ms@timeSec
  8469  14D9  3000               	movlw	0
  8470  14DA  00AF               	movwf	wait_ms@timeSec+1
  8471  14DB  319F  2718  3194   	fcall	_wait_ms
  8472  14DE  30FF               	movlw	255
  8473  14DF  0020               	movlb	0	; select bank0
  8474  14E0  07B7               	addwf	star_tactiles@iLed,f
  8475  14E1  30FF               	movlw	255
  8476  14E2  3DB8               	addwfc	star_tactiles@iLed+1,f
  8477  14E3  2CB8               	goto	L8
  8478  14E4                     l4998:	
  8479                           ;LEDs.c: 200: }
  8480                           ;LEDs.c: 201: } else {
  8481                           
  8482                           
  8483                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8484  14E4  3001               	movlw	1
  8485  14E5  00B9               	movwf	star_tactiles@iLed_1458
  8486  14E6  3000               	movlw	0
  8487  14E7  00BA               	movwf	star_tactiles@iLed_1458+1
  8488  14E8                     L9:	
  8489  14E8  083A               	movf	star_tactiles@iLed_1458+1,w
  8490  14E9  3A80               	xorlw	128
  8491  14EA  00B4               	movwf	??_star_tactiles
  8492  14EB  3080               	movlw	128
  8493  14EC  0234               	subwf	??_star_tactiles,w
  8494  14ED  1D03               	skipz
  8495  14EE  2CF1               	goto	u5035
  8496  14EF  3007               	movlw	7
  8497  14F0  0239               	subwf	star_tactiles@iLed_1458,w
  8498  14F1                     u5035:	
  8499  14F1  1803               	btfsc	3,0
  8500  14F2  0008               	return
  8501                           
  8502                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8503  14F3  0020               	movlb	0	; select bank0
  8504  14F4  083A               	movf	star_tactiles@iLed_1458+1,w
  8505  14F5  00A3               	movwf	set_leds_top@x+1
  8506  14F6  0839               	movf	star_tactiles@iLed_1458,w
  8507  14F7  00A2               	movwf	set_leds_top@x
  8508  14F8  3001               	movlw	1
  8509  14F9  00A4               	movwf	set_leds_top@ledState
  8510  14FA  3000               	movlw	0
  8511  14FB  00A5               	movwf	set_leds_top@ledState+1
  8512  14FC  3193  23F6  3194   	fcall	_set_leds_top
  8513                           
  8514                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8515  14FF  0020               	movlb	0	; select bank0
  8516  1500  0939               	comf	star_tactiles@iLed_1458,w
  8517  1501  00B4               	movwf	??_star_tactiles
  8518  1502  093A               	comf	star_tactiles@iLed_1458+1,w
  8519  1503  00B5               	movwf	??_star_tactiles+1
  8520  1504  0AB4               	incf	??_star_tactiles,f
  8521  1505  1903               	skipnz
  8522  1506  0AB5               	incf	??_star_tactiles+1,f
  8523  1507  0834               	movf	??_star_tactiles,w
  8524  1508  3E06               	addlw	6
  8525  1509  00A2               	movwf	set_leds_bottom@x
  8526  150A  3000               	movlw	0
  8527  150B  3D35               	addwfc	??_star_tactiles+1,w
  8528  150C  00A3               	movwf	set_leds_bottom@x+1
  8529  150D  319F  274A  3194   	fcall	_set_leds_bottom
  8530                           
  8531                           ;LEDs.c: 205: wait_ms(5);
  8532  1510  3005               	movlw	5
  8533  1511  0020               	movlb	0	; select bank0
  8534  1512  00AE               	movwf	wait_ms@timeSec
  8535  1513  3000               	movlw	0
  8536  1514  00AF               	movwf	wait_ms@timeSec+1
  8537  1515  319F  2718  3194   	fcall	_wait_ms
  8538  1518  3001               	movlw	1
  8539  1519  0020               	movlb	0	; select bank0
  8540  151A  07B9               	addwf	star_tactiles@iLed_1458,f
  8541  151B  3000               	movlw	0
  8542  151C  3DBA               	addwfc	star_tactiles@iLed_1458+1,f
  8543  151D  2CE8               	goto	L9
  8544  151E                     __end_of_star_tactiles:	
  8545                           
  8546                           	psect	text9
  8547  10DE                     __ptext9:	
  8548 ;; *************** function _solidring_tactiles *****************
  8549 ;; Defined at:
  8550 ;;		line 223 in file "LEDs.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  ring_delay      1   22[BANK0 ] unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8568 ;;Total ram usage:        3 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    4
  8571 ;; This function calls:
  8572 ;;		_set_leds_bottom
  8573 ;;		_set_leds_top
  8574 ;;		_wait_ms
  8575 ;; This function is called by:
  8576 ;;		_showBootSequence
  8577 ;;		_showSave
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           
  8582                           ;psect for function _solidring_tactiles
  8583  10DE                     _solidring_tactiles:	
  8584                           
  8585                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8589  10DE  301E               	movlw	30
  8590  10DF  0020               	movlb	0	; select bank0
  8591  10E0  00B4               	movwf	??_solidring_tactiles
  8592  10E1  0834               	movf	??_solidring_tactiles,w
  8593  10E2  00B6               	movwf	solidring_tactiles@ring_delay
  8594                           
  8595                           ;LEDs.c: 225: set_leds_top(100, 1);
  8596  10E3  3064               	movlw	100
  8597  10E4  00A2               	movwf	set_leds_top@x
  8598  10E5  3000               	movlw	0
  8599  10E6  00A3               	movwf	set_leds_top@x+1
  8600  10E7  3001               	movlw	1
  8601  10E8  00A4               	movwf	set_leds_top@ledState
  8602  10E9  3000               	movlw	0
  8603  10EA  00A5               	movwf	set_leds_top@ledState+1
  8604  10EB  3193  23F6  3190   	fcall	_set_leds_top
  8605                           
  8606                           ;LEDs.c: 226: set_leds_bottom(100);
  8607  10EE  3064               	movlw	100
  8608  10EF  0020               	movlb	0	; select bank0
  8609  10F0  00A2               	movwf	set_leds_bottom@x
  8610  10F1  3000               	movlw	0
  8611  10F2  00A3               	movwf	set_leds_bottom@x+1
  8612  10F3  319F  274A  3190   	fcall	_set_leds_bottom
  8613                           
  8614                           ;LEDs.c: 227: wait_ms(ring_delay);
  8615  10F6  0020               	movlb	0	; select bank0
  8616  10F7  0836               	movf	solidring_tactiles@ring_delay,w
  8617  10F8  00B4               	movwf	??_solidring_tactiles
  8618  10F9  01B5               	clrf	??_solidring_tactiles+1
  8619  10FA  0834               	movf	??_solidring_tactiles,w
  8620  10FB  00AE               	movwf	wait_ms@timeSec
  8621  10FC  0835               	movf	??_solidring_tactiles+1,w
  8622  10FD  00AF               	movwf	wait_ms@timeSec+1
  8623  10FE  319F  2718  3190   	fcall	_wait_ms
  8624                           
  8625                           ;LEDs.c: 229: set_leds_top(0, 1);
  8626  1101  3000               	movlw	0
  8627  1102  0020               	movlb	0	; select bank0
  8628  1103  00A2               	movwf	set_leds_top@x
  8629  1104  00A3               	movwf	set_leds_top@x+1
  8630  1105  3001               	movlw	1
  8631  1106  00A4               	movwf	set_leds_top@ledState
  8632  1107  3000               	movlw	0
  8633  1108  00A5               	movwf	set_leds_top@ledState+1
  8634  1109  3193  23F6  3190   	fcall	_set_leds_top
  8635                           
  8636                           ;LEDs.c: 230: set_leds_bottom(0);
  8637  110C  3000               	movlw	0
  8638  110D  0020               	movlb	0	; select bank0
  8639  110E  00A2               	movwf	set_leds_bottom@x
  8640  110F  00A3               	movwf	set_leds_bottom@x+1
  8641  1110  319F  274A  3190   	fcall	_set_leds_bottom
  8642                           
  8643                           ;LEDs.c: 231: wait_ms(ring_delay);
  8644  1113  0020               	movlb	0	; select bank0
  8645  1114  0836               	movf	solidring_tactiles@ring_delay,w
  8646  1115  00B4               	movwf	??_solidring_tactiles
  8647  1116  01B5               	clrf	??_solidring_tactiles+1
  8648  1117  0834               	movf	??_solidring_tactiles,w
  8649  1118  00AE               	movwf	wait_ms@timeSec
  8650  1119  0835               	movf	??_solidring_tactiles+1,w
  8651  111A  00AF               	movwf	wait_ms@timeSec+1
  8652  111B  319F  2718         	fcall	_wait_ms
  8653  111D  0008               	return
  8654  111E                     __end_of_solidring_tactiles:	
  8655                           
  8656                           	psect	text10
  8657  1DA6                     __ptext10:	
  8658 ;; *************** function _restoreLEDState *****************
  8659 ;; Defined at:
  8660 ;;		line 89 in file "state_manager.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;		None
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8678 ;;Total ram usage:        0 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    2
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		_showBootSequence
  8685 ;;		_showError_Alternating
  8686 ;;		_show_error
  8687 ;;		_show_cancel
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           
  8692                           ;psect for function _restoreLEDState
  8693  1DA6                     _restoreLEDState:	
  8694                           
  8695                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8696                           
  8697                           ;incstack = 0
  8698                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8699  1DA6  0022               	movlb	2	; select bank2
  8700  1DA7  0C20               	rrf	_ledState^(0+256),w
  8701  1DA8  1C03               	skipc
  8702  1DA9  120D               	bcf	13,4	;volatile
  8703  1DAA  1803               	skipnc
  8704  1DAB  160D               	bsf	13,4	;volatile
  8705                           
  8706                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8707  1DAC  0C22               	rrf	(_ledState^(0+256)+2),w
  8708  1DAD  1C03               	skipc
  8709  1DAE  110D               	bcf	13,2	;volatile
  8710  1DAF  1803               	skipnc
  8711  1DB0  150D               	bsf	13,2	;volatile
  8712                           
  8713                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8714  1DB1  0C21               	rrf	(_ledState^(0+256)+1),w
  8715  1DB2  1C03               	skipc
  8716  1DB3  128D               	bcf	13,5	;volatile
  8717  1DB4  1803               	skipnc
  8718  1DB5  168D               	bsf	13,5	;volatile
  8719                           
  8720                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8721  1DB6  0C23               	rrf	(_ledState^(0+256)+3),w
  8722  1DB7  1C03               	skipc
  8723  1DB8  118D               	bcf	13,3	;volatile
  8724  1DB9  1803               	skipnc
  8725  1DBA  158D               	bsf	13,3	;volatile
  8726  1DBB  0008               	return
  8727  1DBC                     __end_of_restoreLEDState:	
  8728                           
  8729                           	psect	text11
  8730  1D94                     __ptext11:	
  8731 ;; *************** function _getCurrentLEDState *****************
  8732 ;; Defined at:
  8733 ;;		line 83 in file "state_manager.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;		None
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;		None
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  1    wreg      void 
  8740 ;; Registers used:
  8741 ;;		wreg, status,2
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8751 ;;Total ram usage:        0 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    2
  8754 ;; This function calls:
  8755 ;;		Nothing
  8756 ;; This function is called by:
  8757 ;;		_showBootSequence
  8758 ;;		_showError_Alternating
  8759 ;;		_show_error
  8760 ;;		_show_cancel
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           
  8765                           ;psect for function _getCurrentLEDState
  8766  1D94                     _getCurrentLEDState:	
  8767                           
  8768                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8769                           
  8770                           ;incstack = 0
  8771                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8772  1D94  3000               	movlw	0
  8773  1D95  0022               	movlb	2	; select bank2
  8774  1D96  1A0D               	btfsc	13,4	;volatile
  8775  1D97  3001               	movlw	1
  8776  1D98  00A0               	movwf	_ledState^(0+256)
  8777                           
  8778                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8779  1D99  3000               	movlw	0
  8780  1D9A  190D               	btfsc	13,2	;volatile
  8781  1D9B  3001               	movlw	1
  8782  1D9C  00A2               	movwf	(_ledState^(0+256)+2)
  8783                           
  8784                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8785  1D9D  3000               	movlw	0
  8786  1D9E  1A8D               	btfsc	13,5	;volatile
  8787  1D9F  3001               	movlw	1
  8788  1DA0  00A1               	movwf	(_ledState^(0+256)+1)
  8789                           
  8790                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8791  1DA1  3000               	movlw	0
  8792  1DA2  198D               	btfsc	13,3	;volatile
  8793  1DA3  3001               	movlw	1
  8794  1DA4  00A3               	movwf	(_ledState^(0+256)+3)
  8795  1DA5  0008               	return
  8796  1DA6                     __end_of_getCurrentLEDState:	
  8797                           
  8798                           	psect	text12
  8799  0882                     __ptext12:	
  8800 ;; *************** function _set_subdivision *****************
  8801 ;; Defined at:
  8802 ;;		line 77 in file "user.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  x               2   14[BANK1 ] int 
  8805 ;;  y               2   16[BANK1 ] int 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  scalar          3   23[BANK1 ] float 
  8808 ;;  tmpX            2   21[BANK1 ] int 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;                  2   14[BANK1 ] int 
  8811 ;; Registers used:
  8812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8818 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8819 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8820 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8821 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8822 ;;Total ram usage:       12 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    4
  8825 ;; This function calls:
  8826 ;;		___awtoft
  8827 ;;		___ftdiv
  8828 ;;		___ftmul
  8829 ;;		___fttol
  8830 ;; This function is called by:
  8831 ;;		_main
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _set_subdivision
  8837  0882                     _set_subdivision:	
  8838                           
  8839                           ;user.c: 78: adjust_sub_delay = 0;
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8843  0882  0022               	movlb	2	; select bank2
  8844  0883  01A8               	clrf	_adjust_sub_delay^(0+256)
  8845  0884  01A9               	clrf	(_adjust_sub_delay+1)^(0+256)
  8846                           
  8847                           ;user.c: 79: int tmpX = x;
  8848  0885  0021               	movlb	1	; select bank1
  8849  0886  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8850  0887  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8851  0888  082E               	movf	set_subdivision@x^(0+128),w
  8852  0889  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8853                           
  8854                           ;user.c: 80: float scalar = 1.0;
  8855  088A  3000               	movlw	0
  8856  088B  00B7               	movwf	set_subdivision@scalar^(0+128)
  8857  088C  3080               	movlw	128
  8858  088D  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8859  088E  303F               	movlw	63
  8860  088F  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8861                           
  8862                           ;user.c: 83: switch (y) {
  8863  0890  28AA               	goto	l5720
  8864  0891                     l5708:	
  8865                           ;user.c: 84: case 1:
  8866                           
  8867                           
  8868                           ;user.c: 85: scalar = 0.75;
  8869  0891  3000               	movlw	0
  8870  0892  00B7               	movwf	set_subdivision@scalar^(0+128)
  8871  0893  3040               	movlw	64
  8872  0894  289C               	goto	L11
  8873  0895                     l5710:	
  8874                           ;user.c: 87: case 2:
  8875                           
  8876                           ;user.c: 86: break;
  8877                           
  8878                           
  8879                           ;user.c: 88: scalar = 0.6666;
  8880  0895  30A6               	movlw	166
  8881  0896  00B7               	movwf	set_subdivision@scalar^(0+128)
  8882  0897  302A               	movlw	42
  8883  0898  289C               	goto	L11
  8884  0899                     l5712:	
  8885                           ;user.c: 90: case 3:
  8886                           
  8887                           ;user.c: 89: break;
  8888                           
  8889                           
  8890                           ;user.c: 91: scalar = .5;
  8891  0899  3000               	movlw	0
  8892  089A  00B7               	movwf	set_subdivision@scalar^(0+128)
  8893  089B  3000               	movlw	0
  8894  089C                     L11:	
  8895  089C  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8896  089D  303F               	movlw	63
  8897  089E  28A8               	goto	L13
  8898  089F                     l5714:	
  8899                           ;user.c: 93: case 4:
  8900                           
  8901                           ;user.c: 92: break;
  8902                           
  8903                           
  8904                           ;user.c: 94: scalar = 0.3333;
  8905  089F  30A6               	movlw	166
  8906  08A0  00B7               	movwf	set_subdivision@scalar^(0+128)
  8907  08A1  30AA               	movlw	170
  8908  08A2  28A6               	goto	L14
  8909  08A3                     l5716:	
  8910                           ;user.c: 96: case 5:
  8911                           
  8912                           ;user.c: 95: break;
  8913                           
  8914                           
  8915                           ;user.c: 97: scalar = 0.25;
  8916  08A3  3000               	movlw	0
  8917  08A4  00B7               	movwf	set_subdivision@scalar^(0+128)
  8918  08A5  3080               	movlw	128
  8919  08A6                     L14:	
  8920  08A6  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8921  08A7  303E               	movlw	62
  8922  08A8                     L13:	
  8923  08A8  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8924                           
  8925                           ;user.c: 102: }
  8926                           
  8927                           ;user.c: 101: break;
  8928                           
  8929                           ;user.c: 99: case 6:
  8930                           
  8931                           ;user.c: 98: break;
  8932  08A9  28C3               	goto	l5722
  8933  08AA                     l5720:	
  8934                           
  8935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8936                           ; Switch size 1, requested type "space"
  8937                           ; Number of cases is 1, Range of values is 0 to 0
  8938                           ; switch strategies available:
  8939                           ; Name         Instructions Cycles
  8940                           ; simple_byte            4     3 (average)
  8941                           ; direct_byte            8     6 (fixed)
  8942                           ; jumptable            260     6 (fixed)
  8943                           ;	Chosen strategy is simple_byte
  8944  08AA  0831               	movf	(set_subdivision@y+1)^(0+128),w
  8945  08AB  3A00               	xorlw	0	; case 0
  8946  08AC  1903               	skipnz
  8947  08AD  28AF               	goto	l6260
  8948  08AE  28C3               	goto	l5722
  8949  08AF                     l6260:	
  8950                           
  8951                           ; Switch size 1, requested type "space"
  8952                           ; Number of cases is 6, Range of values is 1 to 6
  8953                           ; switch strategies available:
  8954                           ; Name         Instructions Cycles
  8955                           ; simple_byte           19    10 (average)
  8956                           ; direct_byte           21     9 (fixed)
  8957                           ; jumptable            263     9 (fixed)
  8958                           ;	Chosen strategy is simple_byte
  8959  08AF  0830               	movf	set_subdivision@y^(0+128),w
  8960  08B0  3A01               	xorlw	1	; case 1
  8961  08B1  1903               	skipnz
  8962  08B2  2891               	goto	l5708
  8963  08B3  3A03               	xorlw	3	; case 2
  8964  08B4  1903               	skipnz
  8965  08B5  2895               	goto	l5710
  8966  08B6  3A01               	xorlw	1	; case 3
  8967  08B7  1903               	skipnz
  8968  08B8  2899               	goto	l5712
  8969  08B9  3A07               	xorlw	7	; case 4
  8970  08BA  1903               	skipnz
  8971  08BB  289F               	goto	l5714
  8972  08BC  3A01               	xorlw	1	; case 5
  8973  08BD  1903               	skipnz
  8974  08BE  28A3               	goto	l5716
  8975  08BF  3A03               	xorlw	3	; case 6
  8976  08C0  1903               	skipnz
  8977  08C1  28C3               	goto	l5722
  8978  08C2  28C3               	goto	l5722
  8979  08C3                     l5722:	
  8980                           
  8981                           ;user.c: 104: tmpX = tmpX * scalar;
  8982  08C3  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8983  08C4  0020               	movlb	0	; select bank0
  8984  08C5  00AB               	movwf	___awtoft@c+1
  8985  08C6  0021               	movlb	1	; select bank1
  8986  08C7  0835               	movf	set_subdivision@tmpX^(0+128),w
  8987  08C8  0020               	movlb	0	; select bank0
  8988  08C9  00AA               	movwf	___awtoft@c
  8989  08CA  3190  2002  3188   	fcall	___awtoft
  8990  08CD  0020               	movlb	0	; select bank0
  8991  08CE  082A               	movf	?___awtoft,w
  8992  08CF  00BA               	movwf	___ftmul@f2
  8993  08D0  082B               	movf	?___awtoft+1,w
  8994  08D1  00BB               	movwf	___ftmul@f2+1
  8995  08D2  082C               	movf	?___awtoft+2,w
  8996  08D3  00BC               	movwf	___ftmul@f2+2
  8997  08D4  0021               	movlb	1	; select bank1
  8998  08D5  0837               	movf	set_subdivision@scalar^(0+128),w
  8999  08D6  0020               	movlb	0	; select bank0
  9000  08D7  00B7               	movwf	___ftmul@f1
  9001  08D8  0021               	movlb	1	; select bank1
  9002  08D9  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  9003  08DA  0020               	movlb	0	; select bank0
  9004  08DB  00B8               	movwf	___ftmul@f1+1
  9005  08DC  0021               	movlb	1	; select bank1
  9006  08DD  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  9007  08DE  0020               	movlb	0	; select bank0
  9008  08DF  00B9               	movwf	___ftmul@f1+2
  9009  08E0  3197  274C  3188   	fcall	___ftmul
  9010  08E3  0020               	movlb	0	; select bank0
  9011  08E4  0837               	movf	?___ftmul,w
  9012  08E5  0021               	movlb	1	; select bank1
  9013  08E6  00A0               	movwf	___fttol@f1^(0+128)
  9014  08E7  0020               	movlb	0	; select bank0
  9015  08E8  0838               	movf	?___ftmul+1,w
  9016  08E9  0021               	movlb	1	; select bank1
  9017  08EA  00A1               	movwf	(___fttol@f1+1)^(0+128)
  9018  08EB  0020               	movlb	0	; select bank0
  9019  08EC  0839               	movf	?___ftmul+2,w
  9020  08ED  0021               	movlb	1	; select bank1
  9021  08EE  00A2               	movwf	(___fttol@f1+2)^(0+128)
  9022  08EF  3195  2591  3188   	fcall	___fttol
  9023  08F2  0021               	movlb	1	; select bank1
  9024  08F3  0821               	movf	(?___fttol^(0+128)+1),w
  9025  08F4  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  9026  08F5  0820               	movf	?___fttol^(0+128),w
  9027  08F6  00B5               	movwf	set_subdivision@tmpX^(0+128)
  9028                           
  9029                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  9030  08F7  0837               	movf	set_subdivision@scalar^(0+128),w
  9031  08F8  0020               	movlb	0	; select bank0
  9032  08F9  00C7               	movwf	___ftdiv@f2
  9033  08FA  0021               	movlb	1	; select bank1
  9034  08FB  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  9035  08FC  0020               	movlb	0	; select bank0
  9036  08FD  00C8               	movwf	___ftdiv@f2+1
  9037  08FE  0021               	movlb	1	; select bank1
  9038  08FF  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  9039  0900  0020               	movlb	0	; select bank0
  9040  0901  00C9               	movwf	___ftdiv@f2+2
  9041  0902  0021               	movlb	1	; select bank1
  9042  0903  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  9043  0904  0020               	movlb	0	; select bank0
  9044  0905  00AB               	movwf	___awtoft@c+1
  9045  0906  0021               	movlb	1	; select bank1
  9046  0907  0835               	movf	set_subdivision@tmpX^(0+128),w
  9047  0908  0020               	movlb	0	; select bank0
  9048  0909  00AA               	movwf	___awtoft@c
  9049  090A  3190  2002  3188   	fcall	___awtoft
  9050  090D  0020               	movlb	0	; select bank0
  9051  090E  082A               	movf	?___awtoft,w
  9052  090F  00CA               	movwf	___ftdiv@f1
  9053  0910  082B               	movf	?___awtoft+1,w
  9054  0911  00CB               	movwf	___ftdiv@f1+1
  9055  0912  082C               	movf	?___awtoft+2,w
  9056  0913  00CC               	movwf	___ftdiv@f1+2
  9057  0914  3196  26A3  3188   	fcall	___ftdiv
  9058  0917  0020               	movlb	0	; select bank0
  9059  0918  0847               	movf	?___ftdiv,w
  9060  0919  0021               	movlb	1	; select bank1
  9061  091A  00B2               	movwf	??_set_subdivision^(0+128)
  9062  091B  0020               	movlb	0	; select bank0
  9063  091C  0848               	movf	?___ftdiv+1,w
  9064  091D  0021               	movlb	1	; select bank1
  9065  091E  00B3               	movwf	(??_set_subdivision^(0+128)+1)
  9066  091F  0020               	movlb	0	; select bank0
  9067  0920  0849               	movf	?___ftdiv+2,w
  9068  0921  0021               	movlb	1	; select bank1
  9069  0922  00B4               	movwf	(??_set_subdivision^(0+128)+2)
  9070  0923  082F               	movf	(set_subdivision@x+1)^(0+128),w
  9071  0924  0020               	movlb	0	; select bank0
  9072  0925  00AB               	movwf	___awtoft@c+1
  9073  0926  0021               	movlb	1	; select bank1
  9074  0927  082E               	movf	set_subdivision@x^(0+128),w
  9075  0928  0020               	movlb	0	; select bank0
  9076  0929  00AA               	movwf	___awtoft@c
  9077  092A  3190  2002  3188   	fcall	___awtoft
  9078  092D  0020               	movlb	0	; select bank0
  9079  092E  082C               	movf	?___awtoft+2,w
  9080  092F  0021               	movlb	1	; select bank1
  9081  0930  0634               	xorwf	(??_set_subdivision+2)^(0+128),w
  9082  0931  1D03               	skipz
  9083  0932  293D               	goto	u6465
  9084  0933  0020               	movlb	0	; select bank0
  9085  0934  082B               	movf	?___awtoft+1,w
  9086  0935  0021               	movlb	1	; select bank1
  9087  0936  0633               	xorwf	(??_set_subdivision+1)^(0+128),w
  9088  0937  1D03               	skipz
  9089  0938  293D               	goto	u6465
  9090  0939  0020               	movlb	0	; select bank0
  9091  093A  082A               	movf	?___awtoft,w
  9092  093B  0021               	movlb	1	; select bank1
  9093  093C  0632               	xorwf	??_set_subdivision^(0+128),w
  9094  093D                     u6465:	
  9095  093D  1903               	skipnz
  9096  093E  2944               	goto	l529
  9097  093F  3001               	movlw	1
  9098  0940  0022               	movlb	2	; select bank2
  9099  0941  00A8               	movwf	_adjust_sub_delay^(0+256)
  9100  0942  3000               	movlw	0
  9101  0943  00A9               	movwf	(_adjust_sub_delay^(0+256)+1)
  9102  0944                     l529:	
  9103                           
  9104                           ;user.c: 106: return tmpX;
  9105  0944  0021               	movlb	1	; select bank1
  9106  0945  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  9107  0946  00AF               	movwf	(?_set_subdivision+1)^(0+128)
  9108  0947  0835               	movf	set_subdivision@tmpX^(0+128),w
  9109  0948  00AE               	movwf	?_set_subdivision^(0+128)
  9110  0949  0008               	return
  9111  094A                     __end_of_set_subdivision:	
  9112                           
  9113                           	psect	text13
  9114  1591                     __ptext13:	
  9115 ;; *************** function ___fttol *****************
  9116 ;; Defined at:
  9117 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  f1              3    0[BANK1 ] float 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;  lval            4    9[BANK1 ] unsigned long 
  9122 ;;  exp1            1   13[BANK1 ] unsigned char 
  9123 ;;  sign1           1    8[BANK1 ] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  4    0[BANK1 ] long 
  9126 ;; Registers used:
  9127 ;;		wreg, status,2, status,0
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9133 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9134 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9135 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9136 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9137 ;;Total ram usage:       14 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    2
  9140 ;; This function calls:
  9141 ;;		Nothing
  9142 ;; This function is called by:
  9143 ;;		_main
  9144 ;;		_set_subdivision
  9145 ;; This function uses a non-reentrant model
  9146 ;;
  9147                           
  9148                           
  9149                           ;psect for function ___fttol
  9150  1591                     ___fttol:	
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9154  1591  0021               	movlb	1	; select bank1
  9155  1592  0820               	movf	___fttol@f1^(0+128),w
  9156  1593  00A4               	movwf	??___fttol^(0+128)
  9157  1594  0821               	movf	(___fttol@f1+1)^(0+128),w
  9158  1595  00A5               	movwf	(??___fttol^(0+128)+1)
  9159  1596  0822               	movf	(___fttol@f1+2)^(0+128),w
  9160  1597  00A6               	movwf	(??___fttol^(0+128)+2)
  9161  1598  1003               	clrc
  9162  1599  0D25               	rlf	(??___fttol^(0+128)+1),w
  9163  159A  0D26               	rlf	(??___fttol^(0+128)+2),w
  9164  159B  00A7               	movwf	(??___fttol+3)^(0+128)
  9165  159C  0827               	movf	(??___fttol+3)^(0+128),w
  9166  159D  00AD               	movwf	___fttol@exp1^(0+128)
  9167  159E  082D               	movf	___fttol@exp1^(0+128),w
  9168  159F  1D03               	btfss	3,2
  9169  15A0  2DAA               	goto	l5312
  9170  15A1  3000               	movlw	0
  9171  15A2  00A3               	movwf	(?___fttol+3)^(0+128)
  9172  15A3  3000               	movlw	0
  9173  15A4  00A2               	movwf	(?___fttol+2)^(0+128)
  9174  15A5  3000               	movlw	0
  9175  15A6  00A1               	movwf	(?___fttol+1)^(0+128)
  9176  15A7  3000               	movlw	0
  9177  15A8  00A0               	movwf	?___fttol^(0+128)
  9178  15A9  0008               	return
  9179  15AA                     l5312:	
  9180  15AA  0820               	movf	___fttol@f1^(0+128),w
  9181  15AB  00A4               	movwf	??___fttol^(0+128)
  9182  15AC  0821               	movf	(___fttol@f1+1)^(0+128),w
  9183  15AD  00A5               	movwf	(??___fttol^(0+128)+1)
  9184  15AE  0822               	movf	(___fttol@f1+2)^(0+128),w
  9185  15AF  00A6               	movwf	(??___fttol^(0+128)+2)
  9186  15B0  3017               	movlw	23
  9187  15B1                     u5685:	
  9188  15B1  36A6               	lsrf	(??___fttol^(0+128)+2),f
  9189  15B2  0CA5               	rrf	(??___fttol^(0+128)+1),f
  9190  15B3  0CA4               	rrf	??___fttol^(0+128),f
  9191  15B4  0B89               	decfsz	9,f
  9192  15B5  2DB1               	goto	u5685
  9193  15B6  0824               	movf	??___fttol^(0+128),w
  9194  15B7  00A7               	movwf	(??___fttol+3)^(0+128)
  9195  15B8  0827               	movf	(??___fttol+3)^(0+128),w
  9196  15B9  00A8               	movwf	___fttol@sign1^(0+128)
  9197  15BA  17A1               	bsf	(___fttol@f1^(0+128)+1),7
  9198  15BB  30FF               	movlw	255
  9199  15BC  05A0               	andwf	___fttol@f1^(0+128),f
  9200  15BD  30FF               	movlw	255
  9201  15BE  05A1               	andwf	(___fttol@f1+1)^(0+128),f
  9202  15BF  3000               	movlw	0
  9203  15C0  05A2               	andwf	(___fttol@f1+2)^(0+128),f
  9204  15C1  0820               	movf	___fttol@f1^(0+128),w
  9205  15C2  00A9               	movwf	___fttol@lval^(0+128)
  9206  15C3  0821               	movf	(___fttol@f1+1)^(0+128),w
  9207  15C4  00AA               	movwf	(___fttol@lval^(0+128)+1)
  9208  15C5  0822               	movf	(___fttol@f1+2)^(0+128),w
  9209  15C6  00AB               	movwf	(___fttol@lval^(0+128)+2)
  9210  15C7  01AC               	clrf	(___fttol@lval^(0+128)+3)
  9211  15C8  308E               	movlw	142
  9212  15C9  02AD               	subwf	___fttol@exp1^(0+128),f
  9213  15CA  1FAD               	btfss	___fttol@exp1^(0+128),7
  9214  15CB  2DE8               	goto	l5332
  9215  15CC  082D               	movf	___fttol@exp1^(0+128),w
  9216  15CD  3A80               	xorlw	128
  9217  15CE  3E8F               	addlw	143
  9218  15CF  1803               	skipnc
  9219  15D0  2DDA               	goto	l5330
  9220  15D1  3000               	movlw	0
  9221  15D2  00A3               	movwf	(?___fttol+3)^(0+128)
  9222  15D3  3000               	movlw	0
  9223  15D4  00A2               	movwf	(?___fttol+2)^(0+128)
  9224  15D5  3000               	movlw	0
  9225  15D6  00A1               	movwf	(?___fttol+1)^(0+128)
  9226  15D7  3000               	movlw	0
  9227  15D8  00A0               	movwf	?___fttol^(0+128)
  9228  15D9  0008               	return
  9229  15DA                     l5330:	
  9230  15DA  3001               	movlw	1
  9231  15DB                     u5715:	
  9232  15DB  36AC               	lsrf	(___fttol@lval+3)^(0+128),f
  9233  15DC  0CAB               	rrf	(___fttol@lval+2)^(0+128),f
  9234  15DD  0CAA               	rrf	(___fttol@lval+1)^(0+128),f
  9235  15DE  0CA9               	rrf	___fttol@lval^(0+128),f
  9236  15DF  0B89               	decfsz	9,f
  9237  15E0  2DDB               	goto	u5715
  9238  15E1  3001               	movlw	1
  9239  15E2  00A4               	movwf	??___fttol^(0+128)
  9240  15E3  0824               	movf	??___fttol^(0+128),w
  9241  15E4  07AD               	addwf	___fttol@exp1^(0+128),f
  9242  15E5  1903               	btfsc	3,2
  9243  15E6  2E01               	goto	l5340
  9244  15E7  2DDA               	goto	l5330
  9245  15E8                     l5332:	
  9246  15E8  3018               	movlw	24
  9247  15E9  022D               	subwf	___fttol@exp1^(0+128),w
  9248  15EA  1C03               	skipc
  9249  15EB  2DFE               	goto	l1580
  9250  15EC  3000               	movlw	0
  9251  15ED  00A3               	movwf	(?___fttol+3)^(0+128)
  9252  15EE  3000               	movlw	0
  9253  15EF  00A2               	movwf	(?___fttol+2)^(0+128)
  9254  15F0  3000               	movlw	0
  9255  15F1  00A1               	movwf	(?___fttol+1)^(0+128)
  9256  15F2  3000               	movlw	0
  9257  15F3  00A0               	movwf	?___fttol^(0+128)
  9258  15F4  0008               	return
  9259  15F5                     l5338:	
  9260  15F5  3001               	movlw	1
  9261  15F6                     u5745:	
  9262  15F6  35A9               	lslf	___fttol@lval^(0+128),f
  9263  15F7  0DAA               	rlf	(___fttol@lval+1)^(0+128),f
  9264  15F8  0DAB               	rlf	(___fttol@lval+2)^(0+128),f
  9265  15F9  0DAC               	rlf	(___fttol@lval+3)^(0+128),f
  9266  15FA  0B89               	decfsz	9,f
  9267  15FB  2DF6               	goto	u5745
  9268  15FC  3001               	movlw	1
  9269  15FD  02AD               	subwf	___fttol@exp1^(0+128),f
  9270  15FE                     l1580:	
  9271  15FE  082D               	movf	___fttol@exp1^(0+128),w
  9272  15FF  1D03               	btfss	3,2
  9273  1600  2DF5               	goto	l5338
  9274  1601                     l5340:	
  9275  1601  0828               	movf	___fttol@sign1^(0+128),w
  9276  1602  1903               	btfsc	3,2
  9277  1603  2E0F               	goto	l5344
  9278  1604  09A9               	comf	___fttol@lval^(0+128),f
  9279  1605  09AA               	comf	(___fttol@lval+1)^(0+128),f
  9280  1606  09AB               	comf	(___fttol@lval+2)^(0+128),f
  9281  1607  09AC               	comf	(___fttol@lval+3)^(0+128),f
  9282  1608  0AA9               	incf	___fttol@lval^(0+128),f
  9283  1609  1903               	skipnz
  9284  160A  0AAA               	incf	(___fttol@lval+1)^(0+128),f
  9285  160B  1903               	skipnz
  9286  160C  0AAB               	incf	(___fttol@lval+2)^(0+128),f
  9287  160D  1903               	skipnz
  9288  160E  0AAC               	incf	(___fttol@lval+3)^(0+128),f
  9289  160F                     l5344:	
  9290  160F  082C               	movf	(___fttol@lval+3)^(0+128),w
  9291  1610  00A3               	movwf	(?___fttol+3)^(0+128)
  9292  1611  082B               	movf	(___fttol@lval+2)^(0+128),w
  9293  1612  00A2               	movwf	(?___fttol+2)^(0+128)
  9294  1613  082A               	movf	(___fttol@lval+1)^(0+128),w
  9295  1614  00A1               	movwf	(?___fttol+1)^(0+128)
  9296  1615  0829               	movf	___fttol@lval^(0+128),w
  9297  1616  00A0               	movwf	?___fttol^(0+128)
  9298  1617  0008               	return
  9299  1618                     __end_of___fttol:	
  9300                           
  9301                           	psect	text14
  9302  1002                     __ptext14:	
  9303 ;; *************** function ___awtoft *****************
  9304 ;; Defined at:
  9305 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  c               2   10[BANK0 ] int 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  sign            1   15[BANK0 ] unsigned char 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  3   10[BANK0 ] float 
  9312 ;; Registers used:
  9313 ;;		wreg, status,2, status,0, pclath, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9319 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9322 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9323 ;;Total ram usage:        6 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    3
  9326 ;; This function calls:
  9327 ;;		___ftpack
  9328 ;; This function is called by:
  9329 ;;		_main
  9330 ;;		_set_subdivision
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function ___awtoft
  9336  1002                     ___awtoft:	
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9340  1002  0020               	movlb	0	; select bank0
  9341  1003  01AF               	clrf	___awtoft@sign
  9342  1004  1FAB               	btfss	___awtoft@c+1,7
  9343  1005  280D               	goto	l5132
  9344  1006  09AA               	comf	___awtoft@c,f
  9345  1007  09AB               	comf	___awtoft@c+1,f
  9346  1008  0AAA               	incf	___awtoft@c,f
  9347  1009  1903               	skipnz
  9348  100A  0AAB               	incf	___awtoft@c+1,f
  9349  100B  01AF               	clrf	___awtoft@sign
  9350  100C  0AAF               	incf	___awtoft@sign,f
  9351  100D                     l5132:	
  9352  100D  082A               	movf	___awtoft@c,w
  9353  100E  00A2               	movwf	___ftpack@arg
  9354  100F  082B               	movf	___awtoft@c+1,w
  9355  1010  00A3               	movwf	___ftpack@arg+1
  9356  1011  01A4               	clrf	___ftpack@arg+2
  9357  1012  308E               	movlw	142
  9358  1013  00AD               	movwf	??___awtoft
  9359  1014  082D               	movf	??___awtoft,w
  9360  1015  00A5               	movwf	___ftpack@exp
  9361  1016  082F               	movf	___awtoft@sign,w
  9362  1017  00AE               	movwf	??___awtoft+1
  9363  1018  082E               	movf	??___awtoft+1,w
  9364  1019  00A6               	movwf	___ftpack@sign
  9365  101A  3194  244A         	fcall	___ftpack
  9366  101C  0020               	movlb	0	; select bank0
  9367  101D  0822               	movf	?___ftpack,w
  9368  101E  00AA               	movwf	?___awtoft
  9369  101F  0823               	movf	?___ftpack+1,w
  9370  1020  00AB               	movwf	?___awtoft+1
  9371  1021  0824               	movf	?___ftpack+2,w
  9372  1022  00AC               	movwf	?___awtoft+2
  9373  1023  0008               	return
  9374  1024                     __end_of___awtoft:	
  9375                           
  9376                           	psect	text15
  9377  12B5                     __ptext15:	
  9378 ;; *************** function _read_top_tactile *****************
  9379 ;; Defined at:
  9380 ;;		line 47 in file "tactiles.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9398 ;;Total ram usage:        1 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    4
  9401 ;; This function calls:
  9402 ;;		_set_leds_top
  9403 ;;		_wait_ms
  9404 ;; This function is called by:
  9405 ;;		_main
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           
  9410                           ;psect for function _read_top_tactile
  9411  12B5                     _read_top_tactile:	
  9412                           
  9413                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9414                           
  9415                           ;incstack = 0
  9416                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9417  12B5  0020               	movlb	0	; select bank0
  9418  12B6  1A8F               	btfsc	15,5	;volatile
  9419  12B7  2ABF               	goto	l5434
  9420                           
  9421                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9422  12B8  0022               	movlb	2	; select bank2
  9423  12B9  0857               	movf	_topTactile_pressed^(0+256),w
  9424  12BA  1903               	btfsc	3,2
  9425  12BB  2ACA               	goto	l862
  9426                           
  9427                           ;tactiles.c: 58: topTactile_pressed--;
  9428  12BC  3001               	movlw	1
  9429  12BD  02D7               	subwf	_topTactile_pressed^(0+256),f
  9430                           
  9431                           ;tactiles.c: 59: }
  9432                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9433  12BE  2ACA               	goto	l862
  9434  12BF                     l5434:	
  9435  12BF  3019               	movlw	25
  9436  12C0  0022               	movlb	2	; select bank2
  9437  12C1  0257               	subwf	_topTactile_pressed^(0+256),w
  9438  12C2  1803               	skipnc
  9439  12C3  2ACA               	goto	l862
  9440                           
  9441                           ;tactiles.c: 61: topTactile_pressed++;
  9442  12C4  3001               	movlw	1
  9443  12C5  0020               	movlb	0	; select bank0
  9444  12C6  00B4               	movwf	??_read_top_tactile
  9445  12C7  0834               	movf	??_read_top_tactile,w
  9446  12C8  0022               	movlb	2	; select bank2
  9447  12C9  07D7               	addwf	_topTactile_pressed^(0+256),f
  9448  12CA                     l862:	
  9449                           
  9450                           ;tactiles.c: 62: }
  9451                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9452  12CA  0857               	movf	_topTactile_pressed^(0+256),w
  9453  12CB  1D03               	btfss	3,2
  9454  12CC  0008               	return
  9455                           
  9456                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9457  12CD  0021               	movlb	1	; select bank1
  9458  12CE  0866               	movf	_top_push_state^(0+128),w
  9459  12CF  3E01               	addlw	1
  9460  12D0  00E6               	movwf	_top_push_state^(0+128)
  9461  12D1  3000               	movlw	0
  9462  12D2  3D67               	addwfc	(_top_push_state+1)^(0+128),w
  9463  12D3  00E7               	movwf	(_top_push_state+1)^(0+128)
  9464                           
  9465                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9466  12D4  0867               	movf	(_top_push_state+1)^(0+128),w
  9467  12D5  3A80               	xorlw	128
  9468  12D6  0020               	movlb	0	; select bank0
  9469  12D7  00B4               	movwf	??_read_top_tactile
  9470  12D8  3080               	movlw	128
  9471  12D9  0234               	subwf	??_read_top_tactile,w
  9472  12DA  1D03               	skipz
  9473  12DB  2ADF               	goto	u5945
  9474  12DC  3007               	movlw	7
  9475  12DD  0021               	movlb	1	; select bank1
  9476  12DE  0266               	subwf	_top_push_state^(0+128),w
  9477  12DF                     u5945:	
  9478  12DF  1C03               	skipc
  9479  12E0  2AE6               	goto	l5444
  9480                           
  9481                           ;tactiles.c: 70: top_push_state = 1;
  9482  12E1  3001               	movlw	1
  9483  12E2  0021               	movlb	1	; select bank1
  9484  12E3  00E6               	movwf	_top_push_state^(0+128)
  9485  12E4  3000               	movlw	0
  9486  12E5  00E7               	movwf	(_top_push_state^(0+128)+1)
  9487  12E6                     l5444:	
  9488                           
  9489                           ;tactiles.c: 71: }
  9490                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9491  12E6  0021               	movlb	1	; select bank1
  9492  12E7  0867               	movf	(_top_push_state+1)^(0+128),w
  9493  12E8  0020               	movlb	0	; select bank0
  9494  12E9  00A3               	movwf	set_leds_top@x+1
  9495  12EA  0021               	movlb	1	; select bank1
  9496  12EB  0866               	movf	_top_push_state^(0+128),w
  9497  12EC  0020               	movlb	0	; select bank0
  9498  12ED  00A2               	movwf	set_leds_top@x
  9499  12EE  3001               	movlw	1
  9500  12EF  00A4               	movwf	set_leds_top@ledState
  9501  12F0  3000               	movlw	0
  9502  12F1  00A5               	movwf	set_leds_top@ledState+1
  9503  12F2  3193  23F6  3192   	fcall	_set_leds_top
  9504                           
  9505                           ;tactiles.c: 73: delay_time_changed = 1;
  9506  12F5  3001               	movlw	1
  9507  12F6  0022               	movlb	2	; select bank2
  9508  12F7  00DA               	movwf	_delay_time_changed^(0+256)
  9509  12F8  3000               	movlw	0
  9510  12F9  00DB               	movwf	(_delay_time_changed^(0+256)+1)
  9511  12FA                     l866:	
  9512                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9513                           
  9514  12FA  0020               	movlb	0	; select bank0
  9515  12FB  1E8F               	btfss	15,5	;volatile
  9516  12FC  2AFA               	goto	l866
  9517                           
  9518                           ;tactiles.c: 77: }
  9519                           ;tactiles.c: 78: wait_ms(20);
  9520  12FD  3014               	movlw	20
  9521  12FE  00AE               	movwf	wait_ms@timeSec
  9522  12FF  3000               	movlw	0
  9523  1300  00AF               	movwf	wait_ms@timeSec+1
  9524  1301  319F  2718         	fcall	_wait_ms
  9525  1303  0008               	return
  9526  1304                     __end_of_read_top_tactile:	
  9527                           
  9528                           	psect	text16
  9529  1227                     __ptext16:	
  9530 ;; *************** function _read_bottom_tactile *****************
  9531 ;; Defined at:
  9532 ;;		line 17 in file "tactiles.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9550 ;;Total ram usage:        1 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    4
  9553 ;; This function calls:
  9554 ;;		_set_leds_bottom
  9555 ;;		_wait_ms
  9556 ;; This function is called by:
  9557 ;;		_main
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _read_bottom_tactile
  9563  1227                     _read_bottom_tactile:	
  9564                           
  9565                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9566                           
  9567                           ;incstack = 0
  9568                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9569  1227  0020               	movlb	0	; select bank0
  9570  1228  1B0F               	btfsc	15,6	;volatile
  9571  1229  2A31               	goto	l5414
  9572                           
  9573                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9574  122A  0022               	movlb	2	; select bank2
  9575  122B  084E               	movf	_bottomTactile_pressed^(0+256),w
  9576  122C  1903               	btfsc	3,2
  9577  122D  2A3C               	goto	l850
  9578                           
  9579                           ;tactiles.c: 27: bottomTactile_pressed--;
  9580  122E  3001               	movlw	1
  9581  122F  02CE               	subwf	_bottomTactile_pressed^(0+256),f
  9582                           
  9583                           ;tactiles.c: 28: }
  9584                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9585  1230  2A3C               	goto	l850
  9586  1231                     l5414:	
  9587  1231  3019               	movlw	25
  9588  1232  0022               	movlb	2	; select bank2
  9589  1233  024E               	subwf	_bottomTactile_pressed^(0+256),w
  9590  1234  1803               	skipnc
  9591  1235  2A3C               	goto	l850
  9592                           
  9593                           ;tactiles.c: 30: bottomTactile_pressed++;
  9594  1236  3001               	movlw	1
  9595  1237  0020               	movlb	0	; select bank0
  9596  1238  00B4               	movwf	??_read_bottom_tactile
  9597  1239  0834               	movf	??_read_bottom_tactile,w
  9598  123A  0022               	movlb	2	; select bank2
  9599  123B  07CE               	addwf	_bottomTactile_pressed^(0+256),f
  9600  123C                     l850:	
  9601                           
  9602                           ;tactiles.c: 31: }
  9603                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9604  123C  084E               	movf	_bottomTactile_pressed^(0+256),w
  9605  123D  1D03               	btfss	3,2
  9606  123E  0008               	return
  9607                           
  9608                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9609  123F  0021               	movlb	1	; select bank1
  9610  1240  0862               	movf	_bottom_push_state^(0+128),w
  9611  1241  3E01               	addlw	1
  9612  1242  00E2               	movwf	_bottom_push_state^(0+128)
  9613  1243  3000               	movlw	0
  9614  1244  3D63               	addwfc	(_bottom_push_state+1)^(0+128),w
  9615  1245  00E3               	movwf	(_bottom_push_state+1)^(0+128)
  9616                           
  9617                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9618  1246  0863               	movf	(_bottom_push_state+1)^(0+128),w
  9619  1247  3A80               	xorlw	128
  9620  1248  0020               	movlb	0	; select bank0
  9621  1249  00B4               	movwf	??_read_bottom_tactile
  9622  124A  3080               	movlw	128
  9623  124B  0234               	subwf	??_read_bottom_tactile,w
  9624  124C  1D03               	skipz
  9625  124D  2A51               	goto	u5885
  9626  124E  3007               	movlw	7
  9627  124F  0021               	movlb	1	; select bank1
  9628  1250  0262               	subwf	_bottom_push_state^(0+128),w
  9629  1251                     u5885:	
  9630  1251  1C03               	skipc
  9631  1252  2A58               	goto	l5424
  9632                           
  9633                           ;tactiles.c: 37: bottom_push_state = 1;
  9634  1253  3001               	movlw	1
  9635  1254  0021               	movlb	1	; select bank1
  9636  1255  00E2               	movwf	_bottom_push_state^(0+128)
  9637  1256  3000               	movlw	0
  9638  1257  00E3               	movwf	(_bottom_push_state^(0+128)+1)
  9639  1258                     l5424:	
  9640                           
  9641                           ;tactiles.c: 38: }
  9642                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9643  1258  0021               	movlb	1	; select bank1
  9644  1259  0863               	movf	(_bottom_push_state+1)^(0+128),w
  9645  125A  0020               	movlb	0	; select bank0
  9646  125B  00A3               	movwf	set_leds_bottom@x+1
  9647  125C  0021               	movlb	1	; select bank1
  9648  125D  0862               	movf	_bottom_push_state^(0+128),w
  9649  125E  0020               	movlb	0	; select bank0
  9650  125F  00A2               	movwf	set_leds_bottom@x
  9651  1260  319F  274A  3192   	fcall	_set_leds_bottom
  9652  1263                     l854:	
  9653                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9654                           
  9655  1263  0020               	movlb	0	; select bank0
  9656  1264  1F0F               	btfss	15,6	;volatile
  9657  1265  2A63               	goto	l854
  9658                           
  9659                           ;tactiles.c: 42: }
  9660                           ;tactiles.c: 43: wait_ms(20);
  9661  1266  3014               	movlw	20
  9662  1267  00AE               	movwf	wait_ms@timeSec
  9663  1268  3000               	movlw	0
  9664  1269  00AF               	movwf	wait_ms@timeSec+1
  9665  126A  319F  2718         	fcall	_wait_ms
  9666  126C  0008               	return
  9667  126D                     __end_of_read_bottom_tactile:	
  9668                           
  9669                           	psect	text17
  9670  115F                     __ptext17:	
  9671 ;; *************** function _modulation *****************
  9672 ;; Defined at:
  9673 ;;		line 181 in file "user.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;  x               4   29[BANK0 ] long 
  9676 ;;  y               4   33[BANK0 ] long 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  4   29[BANK0 ] long 
  9681 ;; Registers used:
  9682 ;;		wreg, status,2, status,0, pclath, cstack
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9688 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9691 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9692 ;;Total ram usage:       12 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    3
  9695 ;; This function calls:
  9696 ;;		___aldiv
  9697 ;;		___lmul
  9698 ;; This function is called by:
  9699 ;;		_main
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           
  9704                           ;psect for function _modulation
  9705  115F                     _modulation:	
  9706                           
  9707                           ;user.c: 184: return (127500 + (y * x)) / 1000;
  9708                           
  9709                           ;incstack = 0
  9710                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9711  115F  3000               	movlw	0
  9712  1160  0020               	movlb	0	; select bank0
  9713  1161  00B1               	movwf	___aldiv@divisor+3
  9714  1162  3000               	movlw	0
  9715  1163  00B0               	movwf	___aldiv@divisor+2
  9716  1164  3003               	movlw	3
  9717  1165  00AF               	movwf	___aldiv@divisor+1
  9718  1166  30E8               	movlw	232
  9719  1167  00AE               	movwf	___aldiv@divisor
  9720  1168  300C               	movlw	12
  9721  1169  00C5               	movwf	??_modulation
  9722  116A  30F2               	movlw	242
  9723  116B  00C6               	movwf	??_modulation+1
  9724  116C  3001               	movlw	1
  9725  116D  00C7               	movwf	??_modulation+2
  9726  116E  3000               	movlw	0
  9727  116F  00C8               	movwf	??_modulation+3
  9728  1170  0844               	movf	modulation@y+3,w
  9729  1171  00A5               	movwf	___lmul@multiplier+3
  9730  1172  0843               	movf	modulation@y+2,w
  9731  1173  00A4               	movwf	___lmul@multiplier+2
  9732  1174  0842               	movf	modulation@y+1,w
  9733  1175  00A3               	movwf	___lmul@multiplier+1
  9734  1176  0841               	movf	modulation@y,w
  9735  1177  00A2               	movwf	___lmul@multiplier
  9736  1178  0840               	movf	modulation@x+3,w
  9737  1179  00A9               	movwf	___lmul@multiplicand+3
  9738  117A  083F               	movf	modulation@x+2,w
  9739  117B  00A8               	movwf	___lmul@multiplicand+2
  9740  117C  083E               	movf	modulation@x+1,w
  9741  117D  00A7               	movwf	___lmul@multiplicand+1
  9742  117E  083D               	movf	modulation@x,w
  9743  117F  00A6               	movwf	___lmul@multiplicand
  9744  1180  319E  26E8  3191   	fcall	___lmul
  9745  1183  0020               	movlb	0	; select bank0
  9746  1184  0822               	movf	?___lmul,w
  9747  1185  07C5               	addwf	??_modulation,f
  9748  1186  0823               	movf	?___lmul+1,w
  9749  1187  3DC6               	addwfc	??_modulation+1,f
  9750  1188  0824               	movf	?___lmul+2,w
  9751  1189  3DC7               	addwfc	??_modulation+2,f
  9752  118A  0825               	movf	?___lmul+3,w
  9753  118B  3DC8               	addwfc	??_modulation+3,f
  9754  118C  0848               	movf	??_modulation+3,w
  9755  118D  00B5               	movwf	___aldiv@dividend+3
  9756  118E  0847               	movf	??_modulation+2,w
  9757  118F  00B4               	movwf	___aldiv@dividend+2
  9758  1190  0846               	movf	??_modulation+1,w
  9759  1191  00B3               	movwf	___aldiv@dividend+1
  9760  1192  0845               	movf	??_modulation,w
  9761  1193  00B2               	movwf	___aldiv@dividend
  9762  1194  3188  2000         	fcall	___aldiv
  9763  1196  0020               	movlb	0	; select bank0
  9764  1197  0831               	movf	?___aldiv+3,w
  9765  1198  00C0               	movwf	?_modulation+3
  9766  1199  0830               	movf	?___aldiv+2,w
  9767  119A  00BF               	movwf	?_modulation+2
  9768  119B  082F               	movf	?___aldiv+1,w
  9769  119C  00BE               	movwf	?_modulation+1
  9770  119D  082E               	movf	?___aldiv,w
  9771  119E  00BD               	movwf	?_modulation
  9772  119F  0008               	return
  9773  11A0                     __end_of_modulation:	
  9774                           
  9775                           	psect	text18
  9776  0800                     __ptext18:	
  9777 ;; *************** function ___aldiv *****************
  9778 ;; Defined at:
  9779 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  divisor         4   14[BANK0 ] long 
  9782 ;;  dividend        4   18[BANK0 ] long 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  quotient        4   25[BANK0 ] long 
  9785 ;;  sign            1   24[BANK0 ] unsigned char 
  9786 ;;  counter         1   23[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  4   14[BANK0 ] long 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9796 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9797 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9799 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9800 ;;Total ram usage:       15 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    2
  9803 ;; This function calls:
  9804 ;;		Nothing
  9805 ;; This function is called by:
  9806 ;;		_modulation
  9807 ;;		_updateSwitchTap
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           
  9812                           ;psect for function ___aldiv
  9813  0800                     ___aldiv:	
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9817  0800  0020               	movlb	0	; select bank0
  9818  0801  01B8               	clrf	___aldiv@sign
  9819  0802  1FB1               	btfss	___aldiv@divisor+3,7
  9820  0803  2811               	goto	l1383
  9821  0804  09AE               	comf	___aldiv@divisor,f
  9822  0805  09AF               	comf	___aldiv@divisor+1,f
  9823  0806  09B0               	comf	___aldiv@divisor+2,f
  9824  0807  09B1               	comf	___aldiv@divisor+3,f
  9825  0808  0AAE               	incf	___aldiv@divisor,f
  9826  0809  1903               	skipnz
  9827  080A  0AAF               	incf	___aldiv@divisor+1,f
  9828  080B  1903               	skipnz
  9829  080C  0AB0               	incf	___aldiv@divisor+2,f
  9830  080D  1903               	skipnz
  9831  080E  0AB1               	incf	___aldiv@divisor+3,f
  9832  080F  01B8               	clrf	___aldiv@sign
  9833  0810  0AB8               	incf	___aldiv@sign,f
  9834  0811                     l1383:	
  9835  0811  1FB5               	btfss	___aldiv@dividend+3,7
  9836  0812  2822               	goto	l5094
  9837  0813  09B2               	comf	___aldiv@dividend,f
  9838  0814  09B3               	comf	___aldiv@dividend+1,f
  9839  0815  09B4               	comf	___aldiv@dividend+2,f
  9840  0816  09B5               	comf	___aldiv@dividend+3,f
  9841  0817  0AB2               	incf	___aldiv@dividend,f
  9842  0818  1903               	skipnz
  9843  0819  0AB3               	incf	___aldiv@dividend+1,f
  9844  081A  1903               	skipnz
  9845  081B  0AB4               	incf	___aldiv@dividend+2,f
  9846  081C  1903               	skipnz
  9847  081D  0AB5               	incf	___aldiv@dividend+3,f
  9848  081E  3001               	movlw	1
  9849  081F  00B6               	movwf	??___aldiv
  9850  0820  0836               	movf	??___aldiv,w
  9851  0821  06B8               	xorwf	___aldiv@sign,f
  9852  0822                     l5094:	
  9853  0822  3000               	movlw	0
  9854  0823  00BC               	movwf	___aldiv@quotient+3
  9855  0824  3000               	movlw	0
  9856  0825  00BB               	movwf	___aldiv@quotient+2
  9857  0826  3000               	movlw	0
  9858  0827  00BA               	movwf	___aldiv@quotient+1
  9859  0828  3000               	movlw	0
  9860  0829  00B9               	movwf	___aldiv@quotient
  9861  082A  0831               	movf	___aldiv@divisor+3,w
  9862  082B  0430               	iorwf	___aldiv@divisor+2,w
  9863  082C  042F               	iorwf	___aldiv@divisor+1,w
  9864  082D  042E               	iorwf	___aldiv@divisor,w
  9865  082E  1903               	skipnz
  9866  082F  286B               	goto	l5116
  9867  0830  01B7               	clrf	___aldiv@counter
  9868  0831  0AB7               	incf	___aldiv@counter,f
  9869  0832                     l5102:	
  9870  0832  1BB1               	btfsc	___aldiv@divisor+3,7
  9871  0833  2840               	goto	l5104
  9872  0834  3001               	movlw	1
  9873  0835                     u5155:	
  9874  0835  35AE               	lslf	___aldiv@divisor,f
  9875  0836  0DAF               	rlf	___aldiv@divisor+1,f
  9876  0837  0DB0               	rlf	___aldiv@divisor+2,f
  9877  0838  0DB1               	rlf	___aldiv@divisor+3,f
  9878  0839  0B89               	decfsz	9,f
  9879  083A  2835               	goto	u5155
  9880  083B  3001               	movlw	1
  9881  083C  00B6               	movwf	??___aldiv
  9882  083D  0836               	movf	??___aldiv,w
  9883  083E  07B7               	addwf	___aldiv@counter,f
  9884  083F  2832               	goto	l5102
  9885  0840                     l5104:	
  9886  0840  3001               	movlw	1
  9887  0841                     u5175:	
  9888  0841  35B9               	lslf	___aldiv@quotient,f
  9889  0842  0DBA               	rlf	___aldiv@quotient+1,f
  9890  0843  0DBB               	rlf	___aldiv@quotient+2,f
  9891  0844  0DBC               	rlf	___aldiv@quotient+3,f
  9892  0845  0B89               	decfsz	9,f
  9893  0846  2841               	goto	u5175
  9894  0847  0831               	movf	___aldiv@divisor+3,w
  9895  0848  0235               	subwf	___aldiv@dividend+3,w
  9896  0849  1D03               	skipz
  9897  084A  2855               	goto	u5185
  9898  084B  0830               	movf	___aldiv@divisor+2,w
  9899  084C  0234               	subwf	___aldiv@dividend+2,w
  9900  084D  1D03               	skipz
  9901  084E  2855               	goto	u5185
  9902  084F  082F               	movf	___aldiv@divisor+1,w
  9903  0850  0233               	subwf	___aldiv@dividend+1,w
  9904  0851  1D03               	skipz
  9905  0852  2855               	goto	u5185
  9906  0853  082E               	movf	___aldiv@divisor,w
  9907  0854  0232               	subwf	___aldiv@dividend,w
  9908  0855                     u5185:	
  9909  0855  1C03               	skipc
  9910  0856  2860               	goto	l5112
  9911  0857  082E               	movf	___aldiv@divisor,w
  9912  0858  02B2               	subwf	___aldiv@dividend,f
  9913  0859  082F               	movf	___aldiv@divisor+1,w
  9914  085A  3BB3               	subwfb	___aldiv@dividend+1,f
  9915  085B  0830               	movf	___aldiv@divisor+2,w
  9916  085C  3BB4               	subwfb	___aldiv@dividend+2,f
  9917  085D  0831               	movf	___aldiv@divisor+3,w
  9918  085E  3BB5               	subwfb	___aldiv@dividend+3,f
  9919  085F  1439               	bsf	___aldiv@quotient,0
  9920  0860                     l5112:	
  9921  0860  3001               	movlw	1
  9922  0861                     u5195:	
  9923  0861  36B1               	lsrf	___aldiv@divisor+3,f
  9924  0862  0CB0               	rrf	___aldiv@divisor+2,f
  9925  0863  0CAF               	rrf	___aldiv@divisor+1,f
  9926  0864  0CAE               	rrf	___aldiv@divisor,f
  9927  0865  0B89               	decfsz	9,f
  9928  0866  2861               	goto	u5195
  9929  0867  3001               	movlw	1
  9930  0868  02B7               	subwf	___aldiv@counter,f
  9931  0869  1D03               	btfss	3,2
  9932  086A  2840               	goto	l5104
  9933  086B                     l5116:	
  9934  086B  0838               	movf	___aldiv@sign,w
  9935  086C  1903               	btfsc	3,2
  9936  086D  2879               	goto	l5120
  9937  086E  09B9               	comf	___aldiv@quotient,f
  9938  086F  09BA               	comf	___aldiv@quotient+1,f
  9939  0870  09BB               	comf	___aldiv@quotient+2,f
  9940  0871  09BC               	comf	___aldiv@quotient+3,f
  9941  0872  0AB9               	incf	___aldiv@quotient,f
  9942  0873  1903               	skipnz
  9943  0874  0ABA               	incf	___aldiv@quotient+1,f
  9944  0875  1903               	skipnz
  9945  0876  0ABB               	incf	___aldiv@quotient+2,f
  9946  0877  1903               	skipnz
  9947  0878  0ABC               	incf	___aldiv@quotient+3,f
  9948  0879                     l5120:	
  9949  0879  083C               	movf	___aldiv@quotient+3,w
  9950  087A  00B1               	movwf	?___aldiv+3
  9951  087B  083B               	movf	___aldiv@quotient+2,w
  9952  087C  00B0               	movwf	?___aldiv+2
  9953  087D  083A               	movf	___aldiv@quotient+1,w
  9954  087E  00AF               	movwf	?___aldiv+1
  9955  087F  0839               	movf	___aldiv@quotient,w
  9956  0880  00AE               	movwf	?___aldiv
  9957  0881  0008               	return
  9958  0882                     __end_of___aldiv:	
  9959                           
  9960                           	psect	text19
  9961  1618                     __ptext19:	
  9962 ;; *************** function _map *****************
  9963 ;; Defined at:
  9964 ;;		line 171 in file "user.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  x               3   55[BANK0 ] float 
  9967 ;;  in_min          3   58[BANK0 ] float 
  9968 ;;  in_max          3   61[BANK0 ] float 
  9969 ;;  out_min         3   64[BANK0 ] float 
  9970 ;;  out_max         3   67[BANK0 ] float 
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  3   55[BANK0 ] float 
  9975 ;; Registers used:
  9976 ;;		wreg, status,2, status,0, pclath, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9982 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9983 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9985 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9986 ;;Total ram usage:       18 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:    4
  9989 ;; This function calls:
  9990 ;;		___ftadd
  9991 ;;		___ftdiv
  9992 ;;		___ftmul
  9993 ;;		___ftneg
  9994 ;; This function is called by:
  9995 ;;		_main
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _map
 10001  1618                     _map:	
 10002                           
 10003                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 10007  1618  0020               	movlb	0	; select bank0
 10008  1619  085D               	movf	map@in_max,w
 10009  161A  00AA               	movwf	___ftadd@f1
 10010  161B  085E               	movf	map@in_max+1,w
 10011  161C  00AB               	movwf	___ftadd@f1+1
 10012  161D  085F               	movf	map@in_max+2,w
 10013  161E  00AC               	movwf	___ftadd@f1+2
 10014  161F  085A               	movf	map@in_min,w
 10015  1620  00A2               	movwf	___ftneg@f1
 10016  1621  085B               	movf	map@in_min+1,w
 10017  1622  00A3               	movwf	___ftneg@f1+1
 10018  1623  085C               	movf	map@in_min+2,w
 10019  1624  00A4               	movwf	___ftneg@f1+2
 10020  1625  319D  254A  3196   	fcall	___ftneg
 10021  1628  0020               	movlb	0	; select bank0
 10022  1629  0822               	movf	?___ftneg,w
 10023  162A  00AD               	movwf	___ftadd@f2
 10024  162B  0823               	movf	?___ftneg+1,w
 10025  162C  00AE               	movwf	___ftadd@f2+1
 10026  162D  0824               	movf	?___ftneg+2,w
 10027  162E  00AF               	movwf	___ftadd@f2+2
 10028  162F  3189  214A  3196   	fcall	___ftadd
 10029  1632  0020               	movlb	0	; select bank0
 10030  1633  082A               	movf	?___ftadd,w
 10031  1634  00C7               	movwf	___ftdiv@f2
 10032  1635  082B               	movf	?___ftadd+1,w
 10033  1636  00C8               	movwf	___ftdiv@f2+1
 10034  1637  082C               	movf	?___ftadd+2,w
 10035  1638  00C9               	movwf	___ftdiv@f2+2
 10036  1639  0863               	movf	map@out_max,w
 10037  163A  00AA               	movwf	___ftadd@f1
 10038  163B  0864               	movf	map@out_max+1,w
 10039  163C  00AB               	movwf	___ftadd@f1+1
 10040  163D  0865               	movf	map@out_max+2,w
 10041  163E  00AC               	movwf	___ftadd@f1+2
 10042  163F  0860               	movf	map@out_min,w
 10043  1640  00A2               	movwf	___ftneg@f1
 10044  1641  0861               	movf	map@out_min+1,w
 10045  1642  00A3               	movwf	___ftneg@f1+1
 10046  1643  0862               	movf	map@out_min+2,w
 10047  1644  00A4               	movwf	___ftneg@f1+2
 10048  1645  319D  254A  3196   	fcall	___ftneg
 10049  1648  0020               	movlb	0	; select bank0
 10050  1649  0822               	movf	?___ftneg,w
 10051  164A  00AD               	movwf	___ftadd@f2
 10052  164B  0823               	movf	?___ftneg+1,w
 10053  164C  00AE               	movwf	___ftadd@f2+1
 10054  164D  0824               	movf	?___ftneg+2,w
 10055  164E  00AF               	movwf	___ftadd@f2+2
 10056  164F  3189  214A  3196   	fcall	___ftadd
 10057  1652  0020               	movlb	0	; select bank0
 10058  1653  082A               	movf	?___ftadd,w
 10059  1654  00B7               	movwf	___ftmul@f1
 10060  1655  082B               	movf	?___ftadd+1,w
 10061  1656  00B8               	movwf	___ftmul@f1+1
 10062  1657  082C               	movf	?___ftadd+2,w
 10063  1658  00B9               	movwf	___ftmul@f1+2
 10064  1659  0857               	movf	map@x,w
 10065  165A  00AA               	movwf	___ftadd@f1
 10066  165B  0858               	movf	map@x+1,w
 10067  165C  00AB               	movwf	___ftadd@f1+1
 10068  165D  0859               	movf	map@x+2,w
 10069  165E  00AC               	movwf	___ftadd@f1+2
 10070  165F  085A               	movf	map@in_min,w
 10071  1660  00A2               	movwf	___ftneg@f1
 10072  1661  085B               	movf	map@in_min+1,w
 10073  1662  00A3               	movwf	___ftneg@f1+1
 10074  1663  085C               	movf	map@in_min+2,w
 10075  1664  00A4               	movwf	___ftneg@f1+2
 10076  1665  319D  254A  3196   	fcall	___ftneg
 10077  1668  0020               	movlb	0	; select bank0
 10078  1669  0822               	movf	?___ftneg,w
 10079  166A  00AD               	movwf	___ftadd@f2
 10080  166B  0823               	movf	?___ftneg+1,w
 10081  166C  00AE               	movwf	___ftadd@f2+1
 10082  166D  0824               	movf	?___ftneg+2,w
 10083  166E  00AF               	movwf	___ftadd@f2+2
 10084  166F  3189  214A  3196   	fcall	___ftadd
 10085  1672  0020               	movlb	0	; select bank0
 10086  1673  082A               	movf	?___ftadd,w
 10087  1674  00BA               	movwf	___ftmul@f2
 10088  1675  082B               	movf	?___ftadd+1,w
 10089  1676  00BB               	movwf	___ftmul@f2+1
 10090  1677  082C               	movf	?___ftadd+2,w
 10091  1678  00BC               	movwf	___ftmul@f2+2
 10092  1679  3197  274C  3196   	fcall	___ftmul
 10093  167C  0020               	movlb	0	; select bank0
 10094  167D  0837               	movf	?___ftmul,w
 10095  167E  00CA               	movwf	___ftdiv@f1
 10096  167F  0838               	movf	?___ftmul+1,w
 10097  1680  00CB               	movwf	___ftdiv@f1+1
 10098  1681  0839               	movf	?___ftmul+2,w
 10099  1682  00CC               	movwf	___ftdiv@f1+2
 10100  1683  3196  26A3  3196   	fcall	___ftdiv
 10101  1686  0020               	movlb	0	; select bank0
 10102  1687  0847               	movf	?___ftdiv,w
 10103  1688  00E6               	movwf	_map$2177
 10104  1689  0848               	movf	?___ftdiv+1,w
 10105  168A  00E7               	movwf	_map$2177+1
 10106  168B  0849               	movf	?___ftdiv+2,w
 10107  168C  00E8               	movwf	_map$2177+2
 10108                           
 10109                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10110  168D  0860               	movf	map@out_min,w
 10111  168E  00AA               	movwf	___ftadd@f1
 10112  168F  0861               	movf	map@out_min+1,w
 10113  1690  00AB               	movwf	___ftadd@f1+1
 10114  1691  0862               	movf	map@out_min+2,w
 10115  1692  00AC               	movwf	___ftadd@f1+2
 10116  1693  0866               	movf	_map$2177,w
 10117  1694  00AD               	movwf	___ftadd@f2
 10118  1695  0867               	movf	_map$2177+1,w
 10119  1696  00AE               	movwf	___ftadd@f2+1
 10120  1697  0868               	movf	_map$2177+2,w
 10121  1698  00AF               	movwf	___ftadd@f2+2
 10122  1699  3189  214A         	fcall	___ftadd
 10123  169B  0020               	movlb	0	; select bank0
 10124  169C  082A               	movf	?___ftadd,w
 10125  169D  00D7               	movwf	?_map
 10126  169E  082B               	movf	?___ftadd+1,w
 10127  169F  00D8               	movwf	?_map+1
 10128  16A0  082C               	movf	?___ftadd+2,w
 10129  16A1  00D9               	movwf	?_map+2
 10130  16A2  0008               	return
 10131  16A3                     __end_of_map:	
 10132                           
 10133                           	psect	text20
 10134  1D4A                     __ptext20:	
 10135 ;; *************** function ___ftneg *****************
 10136 ;; Defined at:
 10137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  f1              3    2[BANK0 ] float 
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  3    2[BANK0 ] float 
 10144 ;; Registers used:
 10145 ;;		wreg
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10155 ;;Total ram usage:        3 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    2
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_map
 10162 ;;		_scalePotValue
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function ___ftneg
 10168  1D4A                     ___ftneg:	
 10169                           
 10170                           ;incstack = 0
 10171                           ; Regs used in ___ftneg: [wreg]
 10172  1D4A  0020               	movlb	0	; select bank0
 10173  1D4B  0824               	movf	___ftneg@f1+2,w
 10174  1D4C  0423               	iorwf	___ftneg@f1+1,w
 10175  1D4D  0422               	iorwf	___ftneg@f1,w
 10176  1D4E  1903               	skipnz
 10177  1D4F  0008               	return
 10178  1D50  3080               	movlw	128
 10179  1D51  06A4               	xorwf	___ftneg@f1+2,f
 10180  1D52  0008               	return
 10181  1D53                     __end_of___ftneg:	
 10182                           
 10183                           	psect	text21
 10184  174C                     __ptext21:	
 10185 ;; *************** function ___ftmul *****************
 10186 ;; Defined at:
 10187 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;  f1              3   23[BANK0 ] float 
 10190 ;;  f2              3   26[BANK0 ] float 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
 10193 ;;  sign            1   38[BANK0 ] unsigned char 
 10194 ;;  cntr            1   37[BANK0 ] unsigned char 
 10195 ;;  exp             1   33[BANK0 ] unsigned char 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  3   23[BANK0 ] float 
 10198 ;; Registers used:
 10199 ;;		wreg, status,2, status,0, pclath, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10205 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10208 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10209 ;;Total ram usage:       16 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    3
 10212 ;; This function calls:
 10213 ;;		___ftpack
 10214 ;; This function is called by:
 10215 ;;		_set_subdivision
 10216 ;;		_map
 10217 ;;		_scalePotValue
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function ___ftmul
 10223  174C                     ___ftmul:	
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10227  174C  0020               	movlb	0	; select bank0
 10228  174D  0837               	movf	___ftmul@f1,w
 10229  174E  00BD               	movwf	??___ftmul
 10230  174F  0838               	movf	___ftmul@f1+1,w
 10231  1750  00BE               	movwf	??___ftmul+1
 10232  1751  0839               	movf	___ftmul@f1+2,w
 10233  1752  00BF               	movwf	??___ftmul+2
 10234  1753  1003               	clrc
 10235  1754  0D3E               	rlf	??___ftmul+1,w
 10236  1755  0D3F               	rlf	??___ftmul+2,w
 10237  1756  00C0               	movwf	??___ftmul+3
 10238  1757  0840               	movf	??___ftmul+3,w
 10239  1758  00C1               	movwf	___ftmul@exp
 10240  1759  0841               	movf	___ftmul@exp,w
 10241  175A  1D03               	btfss	3,2
 10242  175B  2F63               	goto	l5254
 10243  175C  3000               	movlw	0
 10244  175D  00B7               	movwf	?___ftmul
 10245  175E  3000               	movlw	0
 10246  175F  00B8               	movwf	?___ftmul+1
 10247  1760  3000               	movlw	0
 10248  1761  00B9               	movwf	?___ftmul+2
 10249  1762  0008               	return
 10250  1763                     l5254:	
 10251  1763  083A               	movf	___ftmul@f2,w
 10252  1764  00BD               	movwf	??___ftmul
 10253  1765  083B               	movf	___ftmul@f2+1,w
 10254  1766  00BE               	movwf	??___ftmul+1
 10255  1767  083C               	movf	___ftmul@f2+2,w
 10256  1768  00BF               	movwf	??___ftmul+2
 10257  1769  1003               	clrc
 10258  176A  0D3E               	rlf	??___ftmul+1,w
 10259  176B  0D3F               	rlf	??___ftmul+2,w
 10260  176C  00C0               	movwf	??___ftmul+3
 10261  176D  0840               	movf	??___ftmul+3,w
 10262  176E  00C6               	movwf	___ftmul@sign
 10263  176F  0846               	movf	___ftmul@sign,w
 10264  1770  1D03               	btfss	3,2
 10265  1771  2F79               	goto	l5260
 10266  1772  3000               	movlw	0
 10267  1773  00B7               	movwf	?___ftmul
 10268  1774  3000               	movlw	0
 10269  1775  00B8               	movwf	?___ftmul+1
 10270  1776  3000               	movlw	0
 10271  1777  00B9               	movwf	?___ftmul+2
 10272  1778  0008               	return
 10273  1779                     l5260:	
 10274  1779  0846               	movf	___ftmul@sign,w
 10275  177A  3E7B               	addlw	123
 10276  177B  00BD               	movwf	??___ftmul
 10277  177C  083D               	movf	??___ftmul,w
 10278  177D  07C1               	addwf	___ftmul@exp,f
 10279  177E  0837               	movf	___ftmul@f1,w
 10280  177F  00BD               	movwf	??___ftmul
 10281  1780  0838               	movf	___ftmul@f1+1,w
 10282  1781  00BE               	movwf	??___ftmul+1
 10283  1782  0839               	movf	___ftmul@f1+2,w
 10284  1783  00BF               	movwf	??___ftmul+2
 10285  1784  3010               	movlw	16
 10286  1785                     u5565:	
 10287  1785  36BF               	lsrf	??___ftmul+2,f
 10288  1786  0CBE               	rrf	??___ftmul+1,f
 10289  1787  0CBD               	rrf	??___ftmul,f
 10290  1788  0B89               	decfsz	9,f
 10291  1789  2F85               	goto	u5565
 10292  178A  083D               	movf	??___ftmul,w
 10293  178B  00C0               	movwf	??___ftmul+3
 10294  178C  0840               	movf	??___ftmul+3,w
 10295  178D  00C6               	movwf	___ftmul@sign
 10296  178E  083A               	movf	___ftmul@f2,w
 10297  178F  00BD               	movwf	??___ftmul
 10298  1790  083B               	movf	___ftmul@f2+1,w
 10299  1791  00BE               	movwf	??___ftmul+1
 10300  1792  083C               	movf	___ftmul@f2+2,w
 10301  1793  00BF               	movwf	??___ftmul+2
 10302  1794  3010               	movlw	16
 10303  1795                     u5575:	
 10304  1795  36BF               	lsrf	??___ftmul+2,f
 10305  1796  0CBE               	rrf	??___ftmul+1,f
 10306  1797  0CBD               	rrf	??___ftmul,f
 10307  1798  0B89               	decfsz	9,f
 10308  1799  2F95               	goto	u5575
 10309  179A  083D               	movf	??___ftmul,w
 10310  179B  00C0               	movwf	??___ftmul+3
 10311  179C  0840               	movf	??___ftmul+3,w
 10312  179D  06C6               	xorwf	___ftmul@sign,f
 10313  179E  3080               	movlw	128
 10314  179F  00BD               	movwf	??___ftmul
 10315  17A0  083D               	movf	??___ftmul,w
 10316  17A1  05C6               	andwf	___ftmul@sign,f
 10317  17A2  17B8               	bsf	___ftmul@f1+1,7
 10318  17A3  17BB               	bsf	___ftmul@f2+1,7
 10319  17A4  30FF               	movlw	255
 10320  17A5  05BA               	andwf	___ftmul@f2,f
 10321  17A6  30FF               	movlw	255
 10322  17A7  05BB               	andwf	___ftmul@f2+1,f
 10323  17A8  3000               	movlw	0
 10324  17A9  05BC               	andwf	___ftmul@f2+2,f
 10325  17AA  3000               	movlw	0
 10326  17AB  00C2               	movwf	___ftmul@f3_as_product
 10327  17AC  3000               	movlw	0
 10328  17AD  00C3               	movwf	___ftmul@f3_as_product+1
 10329  17AE  3000               	movlw	0
 10330  17AF  00C4               	movwf	___ftmul@f3_as_product+2
 10331  17B0  3007               	movlw	7
 10332  17B1  00BD               	movwf	??___ftmul
 10333  17B2  083D               	movf	??___ftmul,w
 10334  17B3  00C5               	movwf	___ftmul@cntr
 10335  17B4                     l5272:	
 10336  17B4  1C37               	btfss	___ftmul@f1,0
 10337  17B5  2FBC               	goto	l5276
 10338  17B6  083A               	movf	___ftmul@f2,w
 10339  17B7  07C2               	addwf	___ftmul@f3_as_product,f
 10340  17B8  083B               	movf	___ftmul@f2+1,w
 10341  17B9  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10342  17BA  083C               	movf	___ftmul@f2+2,w
 10343  17BB  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10344  17BC                     l5276:	
 10345  17BC  3001               	movlw	1
 10346  17BD                     u5595:	
 10347  17BD  36B9               	lsrf	___ftmul@f1+2,f
 10348  17BE  0CB8               	rrf	___ftmul@f1+1,f
 10349  17BF  0CB7               	rrf	___ftmul@f1,f
 10350  17C0  0B89               	decfsz	9,f
 10351  17C1  2FBD               	goto	u5595
 10352  17C2  3001               	movlw	1
 10353  17C3                     u5605:	
 10354  17C3  35BA               	lslf	___ftmul@f2,f
 10355  17C4  0DBB               	rlf	___ftmul@f2+1,f
 10356  17C5  0DBC               	rlf	___ftmul@f2+2,f
 10357  17C6  0B89               	decfsz	9,f
 10358  17C7  2FC3               	goto	u5605
 10359  17C8  3001               	movlw	1
 10360  17C9  02C5               	subwf	___ftmul@cntr,f
 10361  17CA  1D03               	btfss	3,2
 10362  17CB  2FB4               	goto	l5272
 10363  17CC  3009               	movlw	9
 10364  17CD  00BD               	movwf	??___ftmul
 10365  17CE  083D               	movf	??___ftmul,w
 10366  17CF  00C5               	movwf	___ftmul@cntr
 10367  17D0                     l5284:	
 10368  17D0  1C37               	btfss	___ftmul@f1,0
 10369  17D1  2FD8               	goto	l5288
 10370  17D2  083A               	movf	___ftmul@f2,w
 10371  17D3  07C2               	addwf	___ftmul@f3_as_product,f
 10372  17D4  083B               	movf	___ftmul@f2+1,w
 10373  17D5  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10374  17D6  083C               	movf	___ftmul@f2+2,w
 10375  17D7  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10376  17D8                     l5288:	
 10377  17D8  3001               	movlw	1
 10378  17D9                     u5635:	
 10379  17D9  36B9               	lsrf	___ftmul@f1+2,f
 10380  17DA  0CB8               	rrf	___ftmul@f1+1,f
 10381  17DB  0CB7               	rrf	___ftmul@f1,f
 10382  17DC  0B89               	decfsz	9,f
 10383  17DD  2FD9               	goto	u5635
 10384  17DE  3001               	movlw	1
 10385  17DF                     u5645:	
 10386  17DF  36C4               	lsrf	___ftmul@f3_as_product+2,f
 10387  17E0  0CC3               	rrf	___ftmul@f3_as_product+1,f
 10388  17E1  0CC2               	rrf	___ftmul@f3_as_product,f
 10389  17E2  0B89               	decfsz	9,f
 10390  17E3  2FDF               	goto	u5645
 10391  17E4  3001               	movlw	1
 10392  17E5  02C5               	subwf	___ftmul@cntr,f
 10393  17E6  1D03               	btfss	3,2
 10394  17E7  2FD0               	goto	l5284
 10395  17E8  0842               	movf	___ftmul@f3_as_product,w
 10396  17E9  00A2               	movwf	___ftpack@arg
 10397  17EA  0843               	movf	___ftmul@f3_as_product+1,w
 10398  17EB  00A3               	movwf	___ftpack@arg+1
 10399  17EC  0844               	movf	___ftmul@f3_as_product+2,w
 10400  17ED  00A4               	movwf	___ftpack@arg+2
 10401  17EE  0841               	movf	___ftmul@exp,w
 10402  17EF  00BD               	movwf	??___ftmul
 10403  17F0  083D               	movf	??___ftmul,w
 10404  17F1  00A5               	movwf	___ftpack@exp
 10405  17F2  0846               	movf	___ftmul@sign,w
 10406  17F3  00BE               	movwf	??___ftmul+1
 10407  17F4  083E               	movf	??___ftmul+1,w
 10408  17F5  00A6               	movwf	___ftpack@sign
 10409  17F6  3194  244A         	fcall	___ftpack
 10410  17F8  0020               	movlb	0	; select bank0
 10411  17F9  0822               	movf	?___ftpack,w
 10412  17FA  00B7               	movwf	?___ftmul
 10413  17FB  0823               	movf	?___ftpack+1,w
 10414  17FC  00B8               	movwf	?___ftmul+1
 10415  17FD  0824               	movf	?___ftpack+2,w
 10416  17FE  00B9               	movwf	?___ftmul+2
 10417  17FF  0008               	return
 10418  1800                     __end_of___ftmul:	
 10419                           
 10420                           	psect	text22
 10421  16A3                     __ptext22:	
 10422 ;; *************** function ___ftdiv *****************
 10423 ;; Defined at:
 10424 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;  f2              3   39[BANK0 ] float 
 10427 ;;  f1              3   42[BANK0 ] float 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  f3              3   50[BANK0 ] float 
 10430 ;;  sign            1   54[BANK0 ] unsigned char 
 10431 ;;  exp             1   53[BANK0 ] unsigned char 
 10432 ;;  cntr            1   49[BANK0 ] unsigned char 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  3   39[BANK0 ] float 
 10435 ;; Registers used:
 10436 ;;		wreg, status,2, status,0, pclath, cstack
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10442 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10443 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10444 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10445 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10446 ;;Total ram usage:       16 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    3
 10449 ;; This function calls:
 10450 ;;		___ftpack
 10451 ;; This function is called by:
 10452 ;;		_main
 10453 ;;		_set_subdivision
 10454 ;;		_map
 10455 ;;		_scalePotValue
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           
 10460                           ;psect for function ___ftdiv
 10461  16A3                     ___ftdiv:	
 10462                           
 10463                           ;incstack = 0
 10464                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10465  16A3  0020               	movlb	0	; select bank0
 10466  16A4  084A               	movf	___ftdiv@f1,w
 10467  16A5  00CD               	movwf	??___ftdiv
 10468  16A6  084B               	movf	___ftdiv@f1+1,w
 10469  16A7  00CE               	movwf	??___ftdiv+1
 10470  16A8  084C               	movf	___ftdiv@f1+2,w
 10471  16A9  00CF               	movwf	??___ftdiv+2
 10472  16AA  1003               	clrc
 10473  16AB  0D4E               	rlf	??___ftdiv+1,w
 10474  16AC  0D4F               	rlf	??___ftdiv+2,w
 10475  16AD  00D0               	movwf	??___ftdiv+3
 10476  16AE  0850               	movf	??___ftdiv+3,w
 10477  16AF  00D5               	movwf	___ftdiv@exp
 10478  16B0  0855               	movf	___ftdiv@exp,w
 10479  16B1  1D03               	btfss	3,2
 10480  16B2  2EBA               	goto	l5212
 10481  16B3  3000               	movlw	0
 10482  16B4  00C7               	movwf	?___ftdiv
 10483  16B5  3000               	movlw	0
 10484  16B6  00C8               	movwf	?___ftdiv+1
 10485  16B7  3000               	movlw	0
 10486  16B8  00C9               	movwf	?___ftdiv+2
 10487  16B9  0008               	return
 10488  16BA                     l5212:	
 10489  16BA  0847               	movf	___ftdiv@f2,w
 10490  16BB  00CD               	movwf	??___ftdiv
 10491  16BC  0848               	movf	___ftdiv@f2+1,w
 10492  16BD  00CE               	movwf	??___ftdiv+1
 10493  16BE  0849               	movf	___ftdiv@f2+2,w
 10494  16BF  00CF               	movwf	??___ftdiv+2
 10495  16C0  1003               	clrc
 10496  16C1  0D4E               	rlf	??___ftdiv+1,w
 10497  16C2  0D4F               	rlf	??___ftdiv+2,w
 10498  16C3  00D0               	movwf	??___ftdiv+3
 10499  16C4  0850               	movf	??___ftdiv+3,w
 10500  16C5  00D6               	movwf	___ftdiv@sign
 10501  16C6  0856               	movf	___ftdiv@sign,w
 10502  16C7  1D03               	btfss	3,2
 10503  16C8  2ED0               	goto	l5218
 10504  16C9  3000               	movlw	0
 10505  16CA  00C7               	movwf	?___ftdiv
 10506  16CB  3000               	movlw	0
 10507  16CC  00C8               	movwf	?___ftdiv+1
 10508  16CD  3000               	movlw	0
 10509  16CE  00C9               	movwf	?___ftdiv+2
 10510  16CF  0008               	return
 10511  16D0                     l5218:	
 10512  16D0  3000               	movlw	0
 10513  16D1  00D2               	movwf	___ftdiv@f3
 10514  16D2  3000               	movlw	0
 10515  16D3  00D3               	movwf	___ftdiv@f3+1
 10516  16D4  3000               	movlw	0
 10517  16D5  00D4               	movwf	___ftdiv@f3+2
 10518  16D6  3089               	movlw	137
 10519  16D7  0756               	addwf	___ftdiv@sign,w
 10520  16D8  00CD               	movwf	??___ftdiv
 10521  16D9  084D               	movf	??___ftdiv,w
 10522  16DA  02D5               	subwf	___ftdiv@exp,f
 10523  16DB  084A               	movf	___ftdiv@f1,w
 10524  16DC  00CD               	movwf	??___ftdiv
 10525  16DD  084B               	movf	___ftdiv@f1+1,w
 10526  16DE  00CE               	movwf	??___ftdiv+1
 10527  16DF  084C               	movf	___ftdiv@f1+2,w
 10528  16E0  00CF               	movwf	??___ftdiv+2
 10529  16E1  3010               	movlw	16
 10530  16E2                     u5485:	
 10531  16E2  36CF               	lsrf	??___ftdiv+2,f
 10532  16E3  0CCE               	rrf	??___ftdiv+1,f
 10533  16E4  0CCD               	rrf	??___ftdiv,f
 10534  16E5  0B89               	decfsz	9,f
 10535  16E6  2EE2               	goto	u5485
 10536  16E7  084D               	movf	??___ftdiv,w
 10537  16E8  00D0               	movwf	??___ftdiv+3
 10538  16E9  0850               	movf	??___ftdiv+3,w
 10539  16EA  00D6               	movwf	___ftdiv@sign
 10540  16EB  0847               	movf	___ftdiv@f2,w
 10541  16EC  00CD               	movwf	??___ftdiv
 10542  16ED  0848               	movf	___ftdiv@f2+1,w
 10543  16EE  00CE               	movwf	??___ftdiv+1
 10544  16EF  0849               	movf	___ftdiv@f2+2,w
 10545  16F0  00CF               	movwf	??___ftdiv+2
 10546  16F1  3010               	movlw	16
 10547  16F2                     u5495:	
 10548  16F2  36CF               	lsrf	??___ftdiv+2,f
 10549  16F3  0CCE               	rrf	??___ftdiv+1,f
 10550  16F4  0CCD               	rrf	??___ftdiv,f
 10551  16F5  0B89               	decfsz	9,f
 10552  16F6  2EF2               	goto	u5495
 10553  16F7  084D               	movf	??___ftdiv,w
 10554  16F8  00D0               	movwf	??___ftdiv+3
 10555  16F9  0850               	movf	??___ftdiv+3,w
 10556  16FA  06D6               	xorwf	___ftdiv@sign,f
 10557  16FB  3080               	movlw	128
 10558  16FC  00CD               	movwf	??___ftdiv
 10559  16FD  084D               	movf	??___ftdiv,w
 10560  16FE  05D6               	andwf	___ftdiv@sign,f
 10561  16FF  17CB               	bsf	___ftdiv@f1+1,7
 10562  1700  30FF               	movlw	255
 10563  1701  05CA               	andwf	___ftdiv@f1,f
 10564  1702  30FF               	movlw	255
 10565  1703  05CB               	andwf	___ftdiv@f1+1,f
 10566  1704  3000               	movlw	0
 10567  1705  05CC               	andwf	___ftdiv@f1+2,f
 10568  1706  17C8               	bsf	___ftdiv@f2+1,7
 10569  1707  30FF               	movlw	255
 10570  1708  05C7               	andwf	___ftdiv@f2,f
 10571  1709  30FF               	movlw	255
 10572  170A  05C8               	andwf	___ftdiv@f2+1,f
 10573  170B  3000               	movlw	0
 10574  170C  05C9               	andwf	___ftdiv@f2+2,f
 10575  170D  3018               	movlw	24
 10576  170E  00CD               	movwf	??___ftdiv
 10577  170F  084D               	movf	??___ftdiv,w
 10578  1710  00D1               	movwf	___ftdiv@cntr
 10579  1711                     l5232:	
 10580  1711  3001               	movlw	1
 10581  1712                     u5505:	
 10582  1712  35D2               	lslf	___ftdiv@f3,f
 10583  1713  0DD3               	rlf	___ftdiv@f3+1,f
 10584  1714  0DD4               	rlf	___ftdiv@f3+2,f
 10585  1715  0B89               	decfsz	9,f
 10586  1716  2F12               	goto	u5505
 10587  1717  0849               	movf	___ftdiv@f2+2,w
 10588  1718  024C               	subwf	___ftdiv@f1+2,w
 10589  1719  1D03               	skipz
 10590  171A  2F21               	goto	u5515
 10591  171B  0848               	movf	___ftdiv@f2+1,w
 10592  171C  024B               	subwf	___ftdiv@f1+1,w
 10593  171D  1D03               	skipz
 10594  171E  2F21               	goto	u5515
 10595  171F  0847               	movf	___ftdiv@f2,w
 10596  1720  024A               	subwf	___ftdiv@f1,w
 10597  1721                     u5515:	
 10598  1721  1C03               	skipc
 10599  1722  2F2A               	goto	l5240
 10600  1723  0847               	movf	___ftdiv@f2,w
 10601  1724  02CA               	subwf	___ftdiv@f1,f
 10602  1725  0848               	movf	___ftdiv@f2+1,w
 10603  1726  3BCB               	subwfb	___ftdiv@f1+1,f
 10604  1727  0849               	movf	___ftdiv@f2+2,w
 10605  1728  3BCC               	subwfb	___ftdiv@f1+2,f
 10606  1729  1452               	bsf	___ftdiv@f3,0
 10607  172A                     l5240:	
 10608  172A  3001               	movlw	1
 10609  172B                     u5525:	
 10610  172B  35CA               	lslf	___ftdiv@f1,f
 10611  172C  0DCB               	rlf	___ftdiv@f1+1,f
 10612  172D  0DCC               	rlf	___ftdiv@f1+2,f
 10613  172E  0B89               	decfsz	9,f
 10614  172F  2F2B               	goto	u5525
 10615  1730  3001               	movlw	1
 10616  1731  02D1               	subwf	___ftdiv@cntr,f
 10617  1732  1D03               	btfss	3,2
 10618  1733  2F11               	goto	l5232
 10619  1734  0852               	movf	___ftdiv@f3,w
 10620  1735  00A2               	movwf	___ftpack@arg
 10621  1736  0853               	movf	___ftdiv@f3+1,w
 10622  1737  00A3               	movwf	___ftpack@arg+1
 10623  1738  0854               	movf	___ftdiv@f3+2,w
 10624  1739  00A4               	movwf	___ftpack@arg+2
 10625  173A  0855               	movf	___ftdiv@exp,w
 10626  173B  00CD               	movwf	??___ftdiv
 10627  173C  084D               	movf	??___ftdiv,w
 10628  173D  00A5               	movwf	___ftpack@exp
 10629  173E  0856               	movf	___ftdiv@sign,w
 10630  173F  00CE               	movwf	??___ftdiv+1
 10631  1740  084E               	movf	??___ftdiv+1,w
 10632  1741  00A6               	movwf	___ftpack@sign
 10633  1742  3194  244A         	fcall	___ftpack
 10634  1744  0020               	movlb	0	; select bank0
 10635  1745  0822               	movf	?___ftpack,w
 10636  1746  00C7               	movwf	?___ftdiv
 10637  1747  0823               	movf	?___ftpack+1,w
 10638  1748  00C8               	movwf	?___ftdiv+1
 10639  1749  0824               	movf	?___ftpack+2,w
 10640  174A  00C9               	movwf	?___ftdiv+2
 10641  174B  0008               	return
 10642  174C                     __end_of___ftdiv:	
 10643                           
 10644                           	psect	text23
 10645  094A                     __ptext23:	
 10646 ;; *************** function ___ftadd *****************
 10647 ;; Defined at:
 10648 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;  f1              3   10[BANK0 ] float 
 10651 ;;  f2              3   13[BANK0 ] float 
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;  exp1            1   22[BANK0 ] unsigned char 
 10654 ;;  exp2            1   21[BANK0 ] unsigned char 
 10655 ;;  sign            1   20[BANK0 ] unsigned char 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  3   10[BANK0 ] float 
 10658 ;; Registers used:
 10659 ;;		wreg, status,2, status,0, pclath, cstack
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10665 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10666 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10667 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10668 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10669 ;;Total ram usage:       13 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    3
 10672 ;; This function calls:
 10673 ;;		___ftpack
 10674 ;; This function is called by:
 10675 ;;		_map
 10676 ;;		_scalePotValue
 10677 ;; This function uses a non-reentrant model
 10678 ;;
 10679                           
 10680                           
 10681                           ;psect for function ___ftadd
 10682  094A                     ___ftadd:	
 10683                           
 10684                           ;incstack = 0
 10685                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10686  094A  0020               	movlb	0	; select bank0
 10687  094B  082A               	movf	___ftadd@f1,w
 10688  094C  00B0               	movwf	??___ftadd
 10689  094D  082B               	movf	___ftadd@f1+1,w
 10690  094E  00B1               	movwf	??___ftadd+1
 10691  094F  082C               	movf	___ftadd@f1+2,w
 10692  0950  00B2               	movwf	??___ftadd+2
 10693  0951  1003               	clrc
 10694  0952  0D31               	rlf	??___ftadd+1,w
 10695  0953  0D32               	rlf	??___ftadd+2,w
 10696  0954  00B3               	movwf	??___ftadd+3
 10697  0955  0833               	movf	??___ftadd+3,w
 10698  0956  00B6               	movwf	___ftadd@exp1
 10699  0957  082D               	movf	___ftadd@f2,w
 10700  0958  00B0               	movwf	??___ftadd
 10701  0959  082E               	movf	___ftadd@f2+1,w
 10702  095A  00B1               	movwf	??___ftadd+1
 10703  095B  082F               	movf	___ftadd@f2+2,w
 10704  095C  00B2               	movwf	??___ftadd+2
 10705  095D  1003               	clrc
 10706  095E  0D31               	rlf	??___ftadd+1,w
 10707  095F  0D32               	rlf	??___ftadd+2,w
 10708  0960  00B3               	movwf	??___ftadd+3
 10709  0961  0833               	movf	??___ftadd+3,w
 10710  0962  00B5               	movwf	___ftadd@exp2
 10711  0963  0836               	movf	___ftadd@exp1,w
 10712  0964  1903               	btfsc	3,2
 10713  0965  2972               	goto	l5142
 10714  0966  0835               	movf	___ftadd@exp2,w
 10715  0967  0236               	subwf	___ftadd@exp1,w
 10716  0968  1803               	skipnc
 10717  0969  2979               	goto	l5146
 10718  096A  0336               	decf	___ftadd@exp1,w
 10719  096B  3AFF               	xorlw	255
 10720  096C  0735               	addwf	___ftadd@exp2,w
 10721  096D  00B0               	movwf	??___ftadd
 10722  096E  3019               	movlw	25
 10723  096F  0230               	subwf	??___ftadd,w
 10724  0970  1C03               	skipc
 10725  0971  2979               	goto	l5146
 10726  0972                     l5142:	
 10727  0972  082D               	movf	___ftadd@f2,w
 10728  0973  00AA               	movwf	?___ftadd
 10729  0974  082E               	movf	___ftadd@f2+1,w
 10730  0975  00AB               	movwf	?___ftadd+1
 10731  0976  082F               	movf	___ftadd@f2+2,w
 10732  0977  00AC               	movwf	?___ftadd+2
 10733  0978  0008               	return
 10734  0979                     l5146:	
 10735  0979  0835               	movf	___ftadd@exp2,w
 10736  097A  1903               	btfsc	3,2
 10737  097B  0008               	return
 10738  097C  0836               	movf	___ftadd@exp1,w
 10739  097D  0235               	subwf	___ftadd@exp2,w
 10740  097E  1803               	skipnc
 10741  097F  2988               	goto	l5152
 10742  0980  0335               	decf	___ftadd@exp2,w
 10743  0981  3AFF               	xorlw	255
 10744  0982  0736               	addwf	___ftadd@exp1,w
 10745  0983  00B0               	movwf	??___ftadd
 10746  0984  3019               	movlw	25
 10747  0985  0230               	subwf	??___ftadd,w
 10748  0986  1803               	btfsc	3,0
 10749  0987  0008               	return
 10750  0988                     l5152:	
 10751  0988  3006               	movlw	6
 10752  0989  00B0               	movwf	??___ftadd
 10753  098A  0830               	movf	??___ftadd,w
 10754  098B  00B4               	movwf	___ftadd@sign
 10755  098C  1BAC               	btfsc	___ftadd@f1+2,7
 10756  098D  17B4               	bsf	___ftadd@sign,7
 10757  098E  1BAF               	btfsc	___ftadd@f2+2,7
 10758  098F  1734               	bsf	___ftadd@sign,6
 10759  0990  17AB               	bsf	___ftadd@f1+1,7
 10760  0991  30FF               	movlw	255
 10761  0992  05AA               	andwf	___ftadd@f1,f
 10762  0993  30FF               	movlw	255
 10763  0994  05AB               	andwf	___ftadd@f1+1,f
 10764  0995  3000               	movlw	0
 10765  0996  05AC               	andwf	___ftadd@f1+2,f
 10766  0997  17AE               	bsf	___ftadd@f2+1,7
 10767  0998  30FF               	movlw	255
 10768  0999  05AD               	andwf	___ftadd@f2,f
 10769  099A  30FF               	movlw	255
 10770  099B  05AE               	andwf	___ftadd@f2+1,f
 10771  099C  3000               	movlw	0
 10772  099D  05AF               	andwf	___ftadd@f2+2,f
 10773  099E  0835               	movf	___ftadd@exp2,w
 10774  099F  0236               	subwf	___ftadd@exp1,w
 10775  09A0  1803               	skipnc
 10776  09A1  29C4               	goto	l5174
 10777  09A2                     l5164:	
 10778  09A2  3001               	movlw	1
 10779  09A3                     u5325:	
 10780  09A3  35AD               	lslf	___ftadd@f2,f
 10781  09A4  0DAE               	rlf	___ftadd@f2+1,f
 10782  09A5  0DAF               	rlf	___ftadd@f2+2,f
 10783  09A6  0B89               	decfsz	9,f
 10784  09A7  29A3               	goto	u5325
 10785  09A8  3001               	movlw	1
 10786  09A9  02B5               	subwf	___ftadd@exp2,f
 10787  09AA  0835               	movf	___ftadd@exp2,w
 10788  09AB  0636               	xorwf	___ftadd@exp1,w
 10789  09AC  1903               	skipnz
 10790  09AD  29BF               	goto	l5172
 10791  09AE  3001               	movlw	1
 10792  09AF  02B4               	subwf	___ftadd@sign,f
 10793  09B0  0834               	movf	___ftadd@sign,w
 10794  09B1  3907               	andlw	7
 10795  09B2  1903               	btfsc	3,2
 10796  09B3  29BF               	goto	l5172
 10797  09B4  29A2               	goto	l5164
 10798  09B5                     l5170:	
 10799  09B5  3001               	movlw	1
 10800  09B6                     u5355:	
 10801  09B6  36AC               	lsrf	___ftadd@f1+2,f
 10802  09B7  0CAB               	rrf	___ftadd@f1+1,f
 10803  09B8  0CAA               	rrf	___ftadd@f1,f
 10804  09B9  0B89               	decfsz	9,f
 10805  09BA  29B6               	goto	u5355
 10806  09BB  3001               	movlw	1
 10807  09BC  00B0               	movwf	??___ftadd
 10808  09BD  0830               	movf	??___ftadd,w
 10809  09BE  07B6               	addwf	___ftadd@exp1,f
 10810  09BF                     l5172:	
 10811  09BF  0836               	movf	___ftadd@exp1,w
 10812  09C0  0635               	xorwf	___ftadd@exp2,w
 10813  09C1  1903               	btfsc	3,2
 10814  09C2  29E9               	goto	l1520
 10815  09C3  29B5               	goto	l5170
 10816  09C4                     l5174:	
 10817  09C4  0836               	movf	___ftadd@exp1,w
 10818  09C5  0235               	subwf	___ftadd@exp2,w
 10819  09C6  1803               	skipnc
 10820  09C7  29E9               	goto	l1520
 10821  09C8                     l5176:	
 10822  09C8  3001               	movlw	1
 10823  09C9                     u5385:	
 10824  09C9  35AA               	lslf	___ftadd@f1,f
 10825  09CA  0DAB               	rlf	___ftadd@f1+1,f
 10826  09CB  0DAC               	rlf	___ftadd@f1+2,f
 10827  09CC  0B89               	decfsz	9,f
 10828  09CD  29C9               	goto	u5385
 10829  09CE  3001               	movlw	1
 10830  09CF  02B6               	subwf	___ftadd@exp1,f
 10831  09D0  0835               	movf	___ftadd@exp2,w
 10832  09D1  0636               	xorwf	___ftadd@exp1,w
 10833  09D2  1903               	skipnz
 10834  09D3  29E5               	goto	l5184
 10835  09D4  3001               	movlw	1
 10836  09D5  02B4               	subwf	___ftadd@sign,f
 10837  09D6  0834               	movf	___ftadd@sign,w
 10838  09D7  3907               	andlw	7
 10839  09D8  1903               	btfsc	3,2
 10840  09D9  29E5               	goto	l5184
 10841  09DA  29C8               	goto	l5176
 10842  09DB                     l5182:	
 10843  09DB  3001               	movlw	1
 10844  09DC                     u5415:	
 10845  09DC  36AF               	lsrf	___ftadd@f2+2,f
 10846  09DD  0CAE               	rrf	___ftadd@f2+1,f
 10847  09DE  0CAD               	rrf	___ftadd@f2,f
 10848  09DF  0B89               	decfsz	9,f
 10849  09E0  29DC               	goto	u5415
 10850  09E1  3001               	movlw	1
 10851  09E2  00B0               	movwf	??___ftadd
 10852  09E3  0830               	movf	??___ftadd,w
 10853  09E4  07B5               	addwf	___ftadd@exp2,f
 10854  09E5                     l5184:	
 10855  09E5  0836               	movf	___ftadd@exp1,w
 10856  09E6  0635               	xorwf	___ftadd@exp2,w
 10857  09E7  1D03               	skipz
 10858  09E8  29DB               	goto	l5182
 10859  09E9                     l1520:	
 10860  09E9  1FB4               	btfss	___ftadd@sign,7
 10861  09EA  29FB               	goto	l5188
 10862  09EB  30FF               	movlw	255
 10863  09EC  06AA               	xorwf	___ftadd@f1,f
 10864  09ED  30FF               	movlw	255
 10865  09EE  06AB               	xorwf	___ftadd@f1+1,f
 10866  09EF  30FF               	movlw	255
 10867  09F0  06AC               	xorwf	___ftadd@f1+2,f
 10868  09F1  3001               	movlw	1
 10869  09F2  07AA               	addwf	___ftadd@f1,f
 10870  09F3  3000               	movlw	0
 10871  09F4  1803               	skipnc
 10872  09F5  3001               	movlw	1
 10873  09F6  07AB               	addwf	___ftadd@f1+1,f
 10874  09F7  3000               	movlw	0
 10875  09F8  1803               	skipnc
 10876  09F9  3001               	movlw	1
 10877  09FA  07AC               	addwf	___ftadd@f1+2,f
 10878  09FB                     l5188:	
 10879  09FB  1F34               	btfss	___ftadd@sign,6
 10880  09FC  2A0D               	goto	l5192
 10881  09FD  30FF               	movlw	255
 10882  09FE  06AD               	xorwf	___ftadd@f2,f
 10883  09FF  30FF               	movlw	255
 10884  0A00  06AE               	xorwf	___ftadd@f2+1,f
 10885  0A01  30FF               	movlw	255
 10886  0A02  06AF               	xorwf	___ftadd@f2+2,f
 10887  0A03  3001               	movlw	1
 10888  0A04  07AD               	addwf	___ftadd@f2,f
 10889  0A05  3000               	movlw	0
 10890  0A06  1803               	skipnc
 10891  0A07  3001               	movlw	1
 10892  0A08  07AE               	addwf	___ftadd@f2+1,f
 10893  0A09  3000               	movlw	0
 10894  0A0A  1803               	skipnc
 10895  0A0B  3001               	movlw	1
 10896  0A0C  07AF               	addwf	___ftadd@f2+2,f
 10897  0A0D                     l5192:	
 10898  0A0D  01B4               	clrf	___ftadd@sign
 10899  0A0E  082A               	movf	___ftadd@f1,w
 10900  0A0F  07AD               	addwf	___ftadd@f2,f
 10901  0A10  082B               	movf	___ftadd@f1+1,w
 10902  0A11  3DAE               	addwfc	___ftadd@f2+1,f
 10903  0A12  082C               	movf	___ftadd@f1+2,w
 10904  0A13  3DAF               	addwfc	___ftadd@f2+2,f
 10905  0A14  1FAF               	btfss	___ftadd@f2+2,7
 10906  0A15  2A28               	goto	l5202
 10907  0A16  30FF               	movlw	255
 10908  0A17  06AD               	xorwf	___ftadd@f2,f
 10909  0A18  30FF               	movlw	255
 10910  0A19  06AE               	xorwf	___ftadd@f2+1,f
 10911  0A1A  30FF               	movlw	255
 10912  0A1B  06AF               	xorwf	___ftadd@f2+2,f
 10913  0A1C  3001               	movlw	1
 10914  0A1D  07AD               	addwf	___ftadd@f2,f
 10915  0A1E  3000               	movlw	0
 10916  0A1F  1803               	skipnc
 10917  0A20  3001               	movlw	1
 10918  0A21  07AE               	addwf	___ftadd@f2+1,f
 10919  0A22  3000               	movlw	0
 10920  0A23  1803               	skipnc
 10921  0A24  3001               	movlw	1
 10922  0A25  07AF               	addwf	___ftadd@f2+2,f
 10923  0A26  01B4               	clrf	___ftadd@sign
 10924  0A27  0AB4               	incf	___ftadd@sign,f
 10925  0A28                     l5202:	
 10926  0A28  082D               	movf	___ftadd@f2,w
 10927  0A29  00A2               	movwf	___ftpack@arg
 10928  0A2A  082E               	movf	___ftadd@f2+1,w
 10929  0A2B  00A3               	movwf	___ftpack@arg+1
 10930  0A2C  082F               	movf	___ftadd@f2+2,w
 10931  0A2D  00A4               	movwf	___ftpack@arg+2
 10932  0A2E  0836               	movf	___ftadd@exp1,w
 10933  0A2F  00B0               	movwf	??___ftadd
 10934  0A30  0830               	movf	??___ftadd,w
 10935  0A31  00A5               	movwf	___ftpack@exp
 10936  0A32  0834               	movf	___ftadd@sign,w
 10937  0A33  00B1               	movwf	??___ftadd+1
 10938  0A34  0831               	movf	??___ftadd+1,w
 10939  0A35  00A6               	movwf	___ftpack@sign
 10940  0A36  3194  244A         	fcall	___ftpack
 10941  0A38  0020               	movlb	0	; select bank0
 10942  0A39  0822               	movf	?___ftpack,w
 10943  0A3A  00AA               	movwf	?___ftadd
 10944  0A3B  0823               	movf	?___ftpack+1,w
 10945  0A3C  00AB               	movwf	?___ftadd+1
 10946  0A3D  0824               	movf	?___ftpack+2,w
 10947  0A3E  00AC               	movwf	?___ftadd+2
 10948  0A3F  0008               	return
 10949  0A40                     __end_of___ftadd:	
 10950                           
 10951                           	psect	text24
 10952  1D75                     __ptext24:	
 10953 ;; *************** function _initSwitchBypass *****************
 10954 ;; Defined at:
 10955 ;;		line 29 in file "SwitchBypass.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;		None
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  initState       2   24[BANK0 ] int 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  1    wreg      void 
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0, pclath, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10973 ;;Total ram usage:        2 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    5
 10976 ;; This function calls:
 10977 ;;		_getSwitchBypassState
 10978 ;;		_setSwitchBypassState
 10979 ;; This function is called by:
 10980 ;;		_main
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           
 10985                           ;psect for function _initSwitchBypass
 10986  1D75                     _initSwitchBypass:	
 10987                           
 10988                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10989                           
 10990                           ;incstack = 0
 10991                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10992  1D75  319D  253D  319D   	fcall	_getSwitchBypassState
 10993  1D78  0020               	movlb	0	; select bank0
 10994  1D79  0823               	movf	?_getSwitchBypassState+1,w
 10995  1D7A  00B9               	movwf	initSwitchBypass@initState+1
 10996  1D7B  0822               	movf	?_getSwitchBypassState,w
 10997  1D7C  00B8               	movwf	initSwitchBypass@initState
 10998                           
 10999                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 11000  1D7D  0839               	movf	initSwitchBypass@initState+1,w
 11001  1D7E  00B5               	movwf	setSwitchBypassState@f_state+1
 11002  1D7F  0838               	movf	initSwitchBypass@initState,w
 11003  1D80  00B4               	movwf	setSwitchBypassState@f_state
 11004  1D81  3191  21E1         	fcall	_setSwitchBypassState
 11005  1D83  0008               	return
 11006  1D84                     __end_of_initSwitchBypass:	
 11007                           
 11008                           	psect	text25
 11009  11E1                     __ptext25:	
 11010 ;; *************** function _setSwitchBypassState *****************
 11011 ;; Defined at:
 11012 ;;		line 134 in file "SwitchBypass.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  f_state         2   20[BANK0 ] int 
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;		None
 11017 ;; Return value:  Size  Location     Type
 11018 ;;                  1    wreg      void 
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0, pclath, cstack
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11029 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11030 ;;Total ram usage:        4 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    4
 11033 ;; This function calls:
 11034 ;;		_updateSwitchBypassState
 11035 ;;		_wait_ms
 11036 ;; This function is called by:
 11037 ;;		_initSwitchBypass
 11038 ;;		_updateSwitchBypass
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           
 11043                           ;psect for function _setSwitchBypassState
 11044  11E1                     _setSwitchBypassState:	
 11045                           
 11046                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 11047                           
 11048                           ;incstack = 0
 11049                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 11050  11E1  087D               	movf	_switchBypass_state,w
 11051  11E2  0020               	movlb	0	; select bank0
 11052  11E3  00B6               	movwf	??_setSwitchBypassState
 11053  11E4  01B7               	clrf	??_setSwitchBypassState+1
 11054  11E5  0835               	movf	setSwitchBypassState@f_state+1,w
 11055  11E6  0637               	xorwf	??_setSwitchBypassState+1,w
 11056  11E7  1D03               	skipz
 11057  11E8  29EB               	goto	u5055
 11058  11E9  0834               	movf	setSwitchBypassState@f_state,w
 11059  11EA  0636               	xorwf	??_setSwitchBypassState,w
 11060  11EB                     u5055:	
 11061  11EB  1903               	btfsc	3,2
 11062  11EC  0008               	return
 11063                           
 11064                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 11065  11ED  0834               	movf	setSwitchBypassState@f_state,w
 11066  11EE  00B6               	movwf	??_setSwitchBypassState
 11067  11EF  0836               	movf	??_setSwitchBypassState,w
 11068  11F0  00FD               	movwf	_switchBypass_state
 11069                           
 11070                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 11071  11F1  0C34               	rrf	setSwitchBypassState@f_state,w
 11072  11F2  0022               	movlb	2	; select bank2
 11073  11F3  1C03               	skipc
 11074  11F4  110D               	bcf	13,2	;volatile
 11075  11F5  1803               	skipnc
 11076  11F6  150D               	bsf	13,2	;volatile
 11077                           
 11078                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 11079  11F7  118D               	bcf	13,3	;volatile
 11080                           
 11081                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 11082  11F8  0020               	movlb	0	; select bank0
 11083  11F9  0C34               	rrf	setSwitchBypassState@f_state,w
 11084  11FA  0027               	movlb	7	; select bank7
 11085  11FB  1C03               	skipc
 11086  11FC  110D               	bcf	13,2	;volatile
 11087  11FD  1803               	skipnc
 11088  11FE  150D               	bsf	13,2	;volatile
 11089                           
 11090                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 11091  11FF  0020               	movlb	0	; select bank0
 11092  1200  0834               	movf	setSwitchBypassState@f_state,w
 11093  1201  0435               	iorwf	setSwitchBypassState@f_state+1,w
 11094  1202  1D03               	btfss	3,2
 11095  1203  2A07               	goto	u5060
 11096  1204  0027               	movlb	7	; select bank7
 11097  1205  148D               	bsf	13,1	;volatile
 11098  1206  2A09               	goto	l5044
 11099  1207                     u5060:	
 11100  1207  0027               	movlb	7	; select bank7
 11101  1208  108D               	bcf	13,1	;volatile
 11102  1209                     l5044:	
 11103                           
 11104                           ;SwitchBypass.c: 142: wait_ms(20);
 11105  1209  3014               	movlw	20
 11106  120A  0020               	movlb	0	; select bank0
 11107  120B  00AE               	movwf	wait_ms@timeSec
 11108  120C  3000               	movlw	0
 11109  120D  00AF               	movwf	wait_ms@timeSec+1
 11110  120E  319F  2718  3191   	fcall	_wait_ms
 11111                           
 11112                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11113  1211  0027               	movlb	7	; select bank7
 11114  1212  110D               	bcf	13,2	;volatile
 11115                           
 11116                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11117  1213  108D               	bcf	13,1	;volatile
 11118                           
 11119                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11120  1214  087D               	movf	_switchBypass_state,w
 11121  1215  0020               	movlb	0	; select bank0
 11122  1216  00B6               	movwf	??_setSwitchBypassState
 11123  1217  01B7               	clrf	??_setSwitchBypassState+1
 11124  1218  0836               	movf	??_setSwitchBypassState,w
 11125  1219  00A2               	movwf	updateSwitchBypassState@state
 11126  121A  0837               	movf	??_setSwitchBypassState+1,w
 11127  121B  00A3               	movwf	updateSwitchBypassState@state+1
 11128  121C  3190  2001  3191   	fcall	_updateSwitchBypassState
 11129                           
 11130                           ;SwitchBypass.c: 148: wait_ms(20);
 11131  121F  3014               	movlw	20
 11132  1220  0020               	movlb	0	; select bank0
 11133  1221  00AE               	movwf	wait_ms@timeSec
 11134  1222  3000               	movlw	0
 11135  1223  00AF               	movwf	wait_ms@timeSec+1
 11136  1224  319F  2718         	fcall	_wait_ms
 11137  1226  0008               	return
 11138  1227                     __end_of_setSwitchBypassState:	
 11139                           
 11140                           	psect	text26
 11141  1F18                     __ptext26:	
 11142 ;; *************** function _wait_ms *****************
 11143 ;; Defined at:
 11144 ;;		line 23 in file "system.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  timeSec         2   14[BANK0 ] unsigned int 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  timemsl         4   16[BANK0 ] long 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2, status,0, pclath, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11158 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11159 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11162 ;;Total ram usage:        6 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    3
 11165 ;; This function calls:
 11166 ;;		___lmul
 11167 ;; This function is called by:
 11168 ;;		_star_tactiles
 11169 ;;		_solidring_tactiles
 11170 ;;		_read_bottom_tactile
 11171 ;;		_read_top_tactile
 11172 ;;		_setSwitchBypassState
 11173 ;;		_setDoublePressState
 11174 ;;		_showError_Alternating
 11175 ;;		_show_error
 11176 ;;		_show_cancel
 11177 ;;		_ring_tactiles
 11178 ;; This function uses a non-reentrant model
 11179 ;;
 11180                           
 11181                           
 11182                           ;psect for function _wait_ms
 11183  1F18                     _wait_ms:	
 11184                           
 11185                           ;system.c: 25: long timemsl = 0;
 11186                           
 11187                           ;incstack = 0
 11188                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11189  1F18  3000               	movlw	0
 11190  1F19  0020               	movlb	0	; select bank0
 11191  1F1A  00B3               	movwf	wait_ms@timemsl+3
 11192  1F1B  3000               	movlw	0
 11193  1F1C  00B2               	movwf	wait_ms@timemsl+2
 11194  1F1D  3000               	movlw	0
 11195  1F1E  00B1               	movwf	wait_ms@timemsl+1
 11196  1F1F  3000               	movlw	0
 11197  1F20  00B0               	movwf	wait_ms@timemsl
 11198                           
 11199                           ;system.c: 26: timemsl = timeSec * 1000l;
 11200  1F21  082E               	movf	wait_ms@timeSec,w
 11201  1F22  00A2               	movwf	___lmul@multiplier
 11202  1F23  082F               	movf	wait_ms@timeSec+1,w
 11203  1F24  00A3               	movwf	___lmul@multiplier+1
 11204  1F25  01A4               	clrf	___lmul@multiplier+2
 11205  1F26  01A5               	clrf	___lmul@multiplier+3
 11206  1F27  3000               	movlw	0
 11207  1F28  00A9               	movwf	___lmul@multiplicand+3
 11208  1F29  3000               	movlw	0
 11209  1F2A  00A8               	movwf	___lmul@multiplicand+2
 11210  1F2B  3003               	movlw	3
 11211  1F2C  00A7               	movwf	___lmul@multiplicand+1
 11212  1F2D  30E8               	movlw	232
 11213  1F2E  00A6               	movwf	___lmul@multiplicand
 11214  1F2F  319E  26E8  319F   	fcall	___lmul
 11215  1F32  0020               	movlb	0	; select bank0
 11216  1F33  0825               	movf	?___lmul+3,w
 11217  1F34  00B3               	movwf	wait_ms@timemsl+3
 11218  1F35  0824               	movf	?___lmul+2,w
 11219  1F36  00B2               	movwf	wait_ms@timemsl+2
 11220  1F37  0823               	movf	?___lmul+1,w
 11221  1F38  00B1               	movwf	wait_ms@timemsl+1
 11222  1F39  0822               	movf	?___lmul,w
 11223  1F3A  00B0               	movwf	wait_ms@timemsl
 11224  1F3B                     l354:	
 11225                           ;system.c: 27: for( ; timemsl; timemsl--);
 11226                           
 11227  1F3B  0833               	movf	wait_ms@timemsl+3,w
 11228  1F3C  0432               	iorwf	wait_ms@timemsl+2,w
 11229  1F3D  0431               	iorwf	wait_ms@timemsl+1,w
 11230  1F3E  0430               	iorwf	wait_ms@timemsl,w
 11231  1F3F  1903               	btfsc	3,2
 11232  1F40  0008               	return
 11233  1F41  30FF               	movlw	255
 11234  1F42  07B0               	addwf	wait_ms@timemsl,f
 11235  1F43  30FF               	movlw	255
 11236  1F44  3DB1               	addwfc	wait_ms@timemsl+1,f
 11237  1F45  30FF               	movlw	255
 11238  1F46  3DB2               	addwfc	wait_ms@timemsl+2,f
 11239  1F47  30FF               	movlw	255
 11240  1F48  3DB3               	addwfc	wait_ms@timemsl+3,f
 11241  1F49  2F3B               	goto	l354
 11242  1F4A                     __end_of_wait_ms:	
 11243                           
 11244                           	psect	text27
 11245  1EE8                     __ptext27:	
 11246 ;; *************** function ___lmul *****************
 11247 ;; Defined at:
 11248 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;  multiplier      4    2[BANK0 ] unsigned long 
 11251 ;;  multiplicand    4    6[BANK0 ] unsigned long 
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;  product         4   10[BANK0 ] unsigned long 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  4    2[BANK0 ] unsigned long 
 11256 ;; Registers used:
 11257 ;;		wreg, status,2, status,0
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11263 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11264 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11266 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11267 ;;Total ram usage:       12 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    2
 11270 ;; This function calls:
 11271 ;;		Nothing
 11272 ;; This function is called by:
 11273 ;;		_wait_ms
 11274 ;;		_modulation
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           
 11279                           ;psect for function ___lmul
 11280  1EE8                     ___lmul:	
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11284  1EE8  3000               	movlw	0
 11285  1EE9  0020               	movlb	0	; select bank0
 11286  1EEA  00AD               	movwf	___lmul@product+3
 11287  1EEB  3000               	movlw	0
 11288  1EEC  00AC               	movwf	___lmul@product+2
 11289  1EED  3000               	movlw	0
 11290  1EEE  00AB               	movwf	___lmul@product+1
 11291  1EEF  3000               	movlw	0
 11292  1EF0  00AA               	movwf	___lmul@product
 11293  1EF1                     l4842:	
 11294  1EF1  1C22               	btfss	___lmul@multiplier,0
 11295  1EF2  2EFB               	goto	l4846
 11296  1EF3  0826               	movf	___lmul@multiplicand,w
 11297  1EF4  07AA               	addwf	___lmul@product,f
 11298  1EF5  0827               	movf	___lmul@multiplicand+1,w
 11299  1EF6  3DAB               	addwfc	___lmul@product+1,f
 11300  1EF7  0828               	movf	___lmul@multiplicand+2,w
 11301  1EF8  3DAC               	addwfc	___lmul@product+2,f
 11302  1EF9  0829               	movf	___lmul@multiplicand+3,w
 11303  1EFA  3DAD               	addwfc	___lmul@product+3,f
 11304  1EFB                     l4846:	
 11305  1EFB  3001               	movlw	1
 11306  1EFC                     u4845:	
 11307  1EFC  35A6               	lslf	___lmul@multiplicand,f
 11308  1EFD  0DA7               	rlf	___lmul@multiplicand+1,f
 11309  1EFE  0DA8               	rlf	___lmul@multiplicand+2,f
 11310  1EFF  0DA9               	rlf	___lmul@multiplicand+3,f
 11311  1F00  0B89               	decfsz	9,f
 11312  1F01  2EFC               	goto	u4845
 11313  1F02  3001               	movlw	1
 11314  1F03                     u4855:	
 11315  1F03  36A5               	lsrf	___lmul@multiplier+3,f
 11316  1F04  0CA4               	rrf	___lmul@multiplier+2,f
 11317  1F05  0CA3               	rrf	___lmul@multiplier+1,f
 11318  1F06  0CA2               	rrf	___lmul@multiplier,f
 11319  1F07  0B89               	decfsz	9,f
 11320  1F08  2F03               	goto	u4855
 11321  1F09  0825               	movf	___lmul@multiplier+3,w
 11322  1F0A  0424               	iorwf	___lmul@multiplier+2,w
 11323  1F0B  0423               	iorwf	___lmul@multiplier+1,w
 11324  1F0C  0422               	iorwf	___lmul@multiplier,w
 11325  1F0D  1D03               	skipz
 11326  1F0E  2EF1               	goto	l4842
 11327  1F0F  082D               	movf	___lmul@product+3,w
 11328  1F10  00A5               	movwf	?___lmul+3
 11329  1F11  082C               	movf	___lmul@product+2,w
 11330  1F12  00A4               	movwf	?___lmul+2
 11331  1F13  082B               	movf	___lmul@product+1,w
 11332  1F14  00A3               	movwf	?___lmul+1
 11333  1F15  082A               	movf	___lmul@product,w
 11334  1F16  00A2               	movwf	?___lmul
 11335  1F17  0008               	return
 11336  1F18                     __end_of___lmul:	
 11337                           
 11338                           	psect	text28
 11339  1001                     __ptext28:	
 11340 ;; *************** function _updateSwitchBypassState *****************
 11341 ;; Defined at:
 11342 ;;		line 96 in file "state_manager.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;  state           2    2[BANK0 ] int 
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      void 
 11349 ;; Registers used:
 11350 ;;		None
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11356 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11360 ;;Total ram usage:        2 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    2
 11363 ;; This function calls:
 11364 ;;		Nothing
 11365 ;; This function is called by:
 11366 ;;		_setSwitchBypassState
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           
 11371                           ;psect for function _updateSwitchBypassState
 11372  1001                     _updateSwitchBypassState:	
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _updateSwitchBypassState: []
 11376  1001  0008               	return
 11377  1002                     __end_of_updateSwitchBypassState:	
 11378                           
 11379                           	psect	text29
 11380  1D3D                     __ptext29:	
 11381 ;; *************** function _getSwitchBypassState *****************
 11382 ;; Defined at:
 11383 ;;		line 103 in file "state_manager.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;		None
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;		None
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  2    2[BANK0 ] int 
 11390 ;; Registers used:
 11391 ;;		status,2
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11397 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11401 ;;Total ram usage:        2 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; Hardware stack levels required when called:    2
 11404 ;; This function calls:
 11405 ;;		Nothing
 11406 ;; This function is called by:
 11407 ;;		_initSwitchBypass
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           
 11412                           ;psect for function _getSwitchBypassState
 11413  1D3D                     _getSwitchBypassState:	
 11414                           
 11415                           ;state_manager.c: 108: return 0;
 11416                           
 11417                           ;incstack = 0
 11418                           ; Regs used in _getSwitchBypassState: [status,2]
 11419  1D3D  0020               	movlb	0	; select bank0
 11420  1D3E  01A2               	clrf	?_getSwitchBypassState
 11421  1D3F  01A3               	clrf	?_getSwitchBypassState+1
 11422  1D40  0008               	return
 11423  1D41                     __end_of_getSwitchBypassState:	
 11424                           
 11425                           	psect	text30
 11426  1E01                     __ptext30:	
 11427 ;; *************** function _adc_convert *****************
 11428 ;; Defined at:
 11429 ;;		line 116 in file "user.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;  channel         1    wreg     unsigned char 
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  channel         1    5[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  2    2[BANK0 ] unsigned int 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2, status,0
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11443 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11447 ;;Total ram usage:        4 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    2
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _adc_convert
 11459  1E01                     _adc_convert:	
 11460                           
 11461                           ;incstack = 0
 11462                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11463                           ;adc_convert@channel stored from wreg
 11464  1E01  0020               	movlb	0	; select bank0
 11465  1E02  00A5               	movwf	adc_convert@channel
 11466                           
 11467                           ;user.c: 117: ADCON0bits.CHS = channel;
 11468  1E03  0825               	movf	adc_convert@channel,w
 11469  1E04  00A4               	movwf	??_adc_convert
 11470  1E05  0DA4               	rlf	??_adc_convert,f
 11471  1E06  0DA4               	rlf	??_adc_convert,f
 11472  1E07  0021               	movlb	1	; select bank1
 11473  1E08  081D               	movf	29,w	;volatile
 11474  1E09  0020               	movlb	0	; select bank0
 11475  1E0A  0624               	xorwf	??_adc_convert,w
 11476  1E0B  3983               	andlw	-125
 11477  1E0C  0624               	xorwf	??_adc_convert,w
 11478  1E0D  0021               	movlb	1	; select bank1
 11479  1E0E  009D               	movwf	29	;volatile
 11480                           
 11481                           ;user.c: 118: ADCON0bits.GO = 0b1;
 11482  1E0F  149D               	bsf	29,1	;volatile
 11483  1E10                     l536:	
 11484                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 11485                           
 11486  1E10  189D               	btfsc	29,1	;volatile
 11487  1E11  2E10               	goto	l536
 11488                           
 11489                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 11490  1E12  081C               	movf	28,w	;volatile
 11491  1E13  0020               	movlb	0	; select bank0
 11492  1E14  00A3               	movwf	?_adc_convert+1
 11493  1E15  0021               	movlb	1	; select bank1
 11494  1E16  081B               	movf	27,w	;volatile
 11495  1E17  0020               	movlb	0	; select bank0
 11496  1E18  00A2               	movwf	?_adc_convert
 11497  1E19  0008               	return
 11498  1E1A                     __end_of_adc_convert:	
 11499                           
 11500                           	psect	text31
 11501  13A4                     __ptext31:	
 11502 ;; *************** function ___awdiv *****************
 11503 ;; Defined at:
 11504 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  divisor         2    2[BANK0 ] int 
 11507 ;;  dividend        2    4[BANK0 ] int 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  quotient        2    9[BANK0 ] int 
 11510 ;;  sign            1    8[BANK0 ] unsigned char 
 11511 ;;  counter         1    7[BANK0 ] unsigned char 
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  2    2[BANK0 ] int 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2, status,0
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11521 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11522 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11524 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11525 ;;Total ram usage:        9 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    2
 11528 ;; This function calls:
 11529 ;;		Nothing
 11530 ;; This function is called by:
 11531 ;;		_main
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           
 11536                           ;psect for function ___awdiv
 11537  13A4                     ___awdiv:	
 11538                           
 11539                           ;incstack = 0
 11540                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11541  13A4  0020               	movlb	0	; select bank0
 11542  13A5  01A8               	clrf	___awdiv@sign
 11543  13A6  1FA3               	btfss	___awdiv@divisor+1,7
 11544  13A7  2BAF               	goto	l5756
 11545  13A8  09A2               	comf	___awdiv@divisor,f
 11546  13A9  09A3               	comf	___awdiv@divisor+1,f
 11547  13AA  0AA2               	incf	___awdiv@divisor,f
 11548  13AB  1903               	skipnz
 11549  13AC  0AA3               	incf	___awdiv@divisor+1,f
 11550  13AD  01A8               	clrf	___awdiv@sign
 11551  13AE  0AA8               	incf	___awdiv@sign,f
 11552  13AF                     l5756:	
 11553  13AF  1FA5               	btfss	___awdiv@dividend+1,7
 11554  13B0  2BBA               	goto	l5762
 11555  13B1  09A4               	comf	___awdiv@dividend,f
 11556  13B2  09A5               	comf	___awdiv@dividend+1,f
 11557  13B3  0AA4               	incf	___awdiv@dividend,f
 11558  13B4  1903               	skipnz
 11559  13B5  0AA5               	incf	___awdiv@dividend+1,f
 11560  13B6  3001               	movlw	1
 11561  13B7  00A6               	movwf	??___awdiv
 11562  13B8  0826               	movf	??___awdiv,w
 11563  13B9  06A8               	xorwf	___awdiv@sign,f
 11564  13BA                     l5762:	
 11565  13BA  01A9               	clrf	___awdiv@quotient
 11566  13BB  01AA               	clrf	___awdiv@quotient+1
 11567  13BC  0822               	movf	___awdiv@divisor,w
 11568  13BD  0423               	iorwf	___awdiv@divisor+1,w
 11569  13BE  1903               	btfsc	3,2
 11570  13BF  2BE9               	goto	l5784
 11571  13C0  01A7               	clrf	___awdiv@counter
 11572  13C1  0AA7               	incf	___awdiv@counter,f
 11573  13C2                     l5772:	
 11574  13C2  1BA3               	btfsc	___awdiv@divisor+1,7
 11575  13C3  2BCE               	goto	l5774
 11576  13C4  3001               	movlw	1
 11577  13C5                     u6535:	
 11578  13C5  35A2               	lslf	___awdiv@divisor,f
 11579  13C6  0DA3               	rlf	___awdiv@divisor+1,f
 11580  13C7  0B89               	decfsz	9,f
 11581  13C8  2BC5               	goto	u6535
 11582  13C9  3001               	movlw	1
 11583  13CA  00A6               	movwf	??___awdiv
 11584  13CB  0826               	movf	??___awdiv,w
 11585  13CC  07A7               	addwf	___awdiv@counter,f
 11586  13CD  2BC2               	goto	l5772
 11587  13CE                     l5774:	
 11588  13CE  3001               	movlw	1
 11589  13CF                     u6555:	
 11590  13CF  35A9               	lslf	___awdiv@quotient,f
 11591  13D0  0DAA               	rlf	___awdiv@quotient+1,f
 11592  13D1  0B89               	decfsz	9,f
 11593  13D2  2BCF               	goto	u6555
 11594  13D3  0823               	movf	___awdiv@divisor+1,w
 11595  13D4  0225               	subwf	___awdiv@dividend+1,w
 11596  13D5  1D03               	skipz
 11597  13D6  2BD9               	goto	u6565
 11598  13D7  0822               	movf	___awdiv@divisor,w
 11599  13D8  0224               	subwf	___awdiv@dividend,w
 11600  13D9                     u6565:	
 11601  13D9  1C03               	skipc
 11602  13DA  2BE0               	goto	l5780
 11603  13DB  0822               	movf	___awdiv@divisor,w
 11604  13DC  02A4               	subwf	___awdiv@dividend,f
 11605  13DD  0823               	movf	___awdiv@divisor+1,w
 11606  13DE  3BA5               	subwfb	___awdiv@dividend+1,f
 11607  13DF  1429               	bsf	___awdiv@quotient,0
 11608  13E0                     l5780:	
 11609  13E0  3001               	movlw	1
 11610  13E1                     u6575:	
 11611  13E1  36A3               	lsrf	___awdiv@divisor+1,f
 11612  13E2  0CA2               	rrf	___awdiv@divisor,f
 11613  13E3  0B89               	decfsz	9,f
 11614  13E4  2BE1               	goto	u6575
 11615  13E5  3001               	movlw	1
 11616  13E6  02A7               	subwf	___awdiv@counter,f
 11617  13E7  1D03               	btfss	3,2
 11618  13E8  2BCE               	goto	l5774
 11619  13E9                     l5784:	
 11620  13E9  0828               	movf	___awdiv@sign,w
 11621  13EA  1903               	btfsc	3,2
 11622  13EB  2BF1               	goto	l5788
 11623  13EC  09A9               	comf	___awdiv@quotient,f
 11624  13ED  09AA               	comf	___awdiv@quotient+1,f
 11625  13EE  0AA9               	incf	___awdiv@quotient,f
 11626  13EF  1903               	skipnz
 11627  13F0  0AAA               	incf	___awdiv@quotient+1,f
 11628  13F1                     l5788:	
 11629  13F1  082A               	movf	___awdiv@quotient+1,w
 11630  13F2  00A3               	movwf	?___awdiv+1
 11631  13F3  0829               	movf	___awdiv@quotient,w
 11632  13F4  00A2               	movwf	?___awdiv
 11633  13F5  0008               	return
 11634  13F6                     __end_of___awdiv:	
 11635                           
 11636                           	psect	text32
 11637  1F85                     __ptext32:	
 11638 ;; *************** function ___altoft *****************
 11639 ;; Defined at:
 11640 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  c               4   10[BANK0 ] long 
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;  sign            1   17[BANK0 ] unsigned char 
 11645 ;;  exp             1   16[BANK0 ] unsigned char 
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  3   10[BANK0 ] float 
 11648 ;; Registers used:
 11649 ;;		wreg, status,2, status,0, pclath, cstack
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11655 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11659 ;;Total ram usage:        8 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    3
 11662 ;; This function calls:
 11663 ;;		___ftpack
 11664 ;; This function is called by:
 11665 ;;		_main
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           
 11670                           ;psect for function ___altoft
 11671  1F85                     ___altoft:	
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11675  1F85  0020               	movlb	0	; select bank0
 11676  1F86  01B1               	clrf	___altoft@sign
 11677  1F87  308E               	movlw	142
 11678  1F88  00AE               	movwf	??___altoft
 11679  1F89  082E               	movf	??___altoft,w
 11680  1F8A  00B0               	movwf	___altoft@exp
 11681  1F8B  1FAD               	btfss	___altoft@c+3,7
 11682  1F8C  2F9A               	goto	l5742
 11683  1F8D  09AA               	comf	___altoft@c,f
 11684  1F8E  09AB               	comf	___altoft@c+1,f
 11685  1F8F  09AC               	comf	___altoft@c+2,f
 11686  1F90  09AD               	comf	___altoft@c+3,f
 11687  1F91  0AAA               	incf	___altoft@c,f
 11688  1F92  1903               	skipnz
 11689  1F93  0AAB               	incf	___altoft@c+1,f
 11690  1F94  1903               	skipnz
 11691  1F95  0AAC               	incf	___altoft@c+2,f
 11692  1F96  1903               	skipnz
 11693  1F97  0AAD               	incf	___altoft@c+3,f
 11694  1F98  01B1               	clrf	___altoft@sign
 11695  1F99  0AB1               	incf	___altoft@sign,f
 11696  1F9A                     l5742:	
 11697  1F9A  30FF               	movlw	255
 11698  1F9B  052D               	andwf	___altoft@c+3,w
 11699  1F9C  1903               	btfsc	3,2
 11700  1F9D  2FAA               	goto	l5744
 11701  1F9E  3001               	movlw	1
 11702  1F9F                     u6485:	
 11703  1F9F  36AD               	lsrf	___altoft@c+3,f
 11704  1FA0  0CAC               	rrf	___altoft@c+2,f
 11705  1FA1  0CAB               	rrf	___altoft@c+1,f
 11706  1FA2  0CAA               	rrf	___altoft@c,f
 11707  1FA3  0B89               	decfsz	9,f
 11708  1FA4  2F9F               	goto	u6485
 11709  1FA5  3001               	movlw	1
 11710  1FA6  00AE               	movwf	??___altoft
 11711  1FA7  082E               	movf	??___altoft,w
 11712  1FA8  07B0               	addwf	___altoft@exp,f
 11713  1FA9  2F9A               	goto	l5742
 11714  1FAA                     l5744:	
 11715  1FAA  082A               	movf	___altoft@c,w
 11716  1FAB  00A2               	movwf	___ftpack@arg
 11717  1FAC  082B               	movf	___altoft@c+1,w
 11718  1FAD  00A3               	movwf	___ftpack@arg+1
 11719  1FAE  082C               	movf	___altoft@c+2,w
 11720  1FAF  00A4               	movwf	___ftpack@arg+2
 11721  1FB0  0830               	movf	___altoft@exp,w
 11722  1FB1  00AE               	movwf	??___altoft
 11723  1FB2  082E               	movf	??___altoft,w
 11724  1FB3  00A5               	movwf	___ftpack@exp
 11725  1FB4  0831               	movf	___altoft@sign,w
 11726  1FB5  00AF               	movwf	??___altoft+1
 11727  1FB6  082F               	movf	??___altoft+1,w
 11728  1FB7  00A6               	movwf	___ftpack@sign
 11729  1FB8  3194  244A         	fcall	___ftpack
 11730  1FBA  0020               	movlb	0	; select bank0
 11731  1FBB  0822               	movf	?___ftpack,w
 11732  1FBC  00AA               	movwf	?___altoft
 11733  1FBD  0823               	movf	?___ftpack+1,w
 11734  1FBE  00AB               	movwf	?___altoft+1
 11735  1FBF  0824               	movf	?___ftpack+2,w
 11736  1FC0  00AC               	movwf	?___altoft+2
 11737  1FC1  0008               	return
 11738  1FC2                     __end_of___altoft:	
 11739                           
 11740                           	psect	text33
 11741  144A                     __ptext33:	
 11742 ;; *************** function ___ftpack *****************
 11743 ;; Defined at:
 11744 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  arg             3    2[BANK0 ] unsigned um
 11747 ;;  exp             1    5[BANK0 ] unsigned char 
 11748 ;;  sign            1    6[BANK0 ] unsigned char 
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;		None
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  3    2[BANK0 ] float 
 11753 ;; Registers used:
 11754 ;;		wreg, status,2, status,0
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11760 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11762 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11763 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11764 ;;Total ram usage:        8 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    2
 11767 ;; This function calls:
 11768 ;;		Nothing
 11769 ;; This function is called by:
 11770 ;;		___altoft
 11771 ;;		___awtoft
 11772 ;;		___ftadd
 11773 ;;		___ftdiv
 11774 ;;		___ftmul
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function ___ftpack
 11780  144A                     ___ftpack:	
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11784  144A  0020               	movlb	0	; select bank0
 11785  144B  0825               	movf	___ftpack@exp,w
 11786  144C  1903               	btfsc	3,2
 11787  144D  2C53               	goto	l4902
 11788  144E  0824               	movf	___ftpack@arg+2,w
 11789  144F  0423               	iorwf	___ftpack@arg+1,w
 11790  1450  0422               	iorwf	___ftpack@arg,w
 11791  1451  1D03               	skipz
 11792  1452  2C64               	goto	l4908
 11793  1453                     l4902:	
 11794  1453  3000               	movlw	0
 11795  1454  00A2               	movwf	?___ftpack
 11796  1455  3000               	movlw	0
 11797  1456  00A3               	movwf	?___ftpack+1
 11798  1457  3000               	movlw	0
 11799  1458  00A4               	movwf	?___ftpack+2
 11800  1459  0008               	return
 11801  145A                     l4906:	
 11802  145A  3001               	movlw	1
 11803  145B  00A7               	movwf	??___ftpack
 11804  145C  0827               	movf	??___ftpack,w
 11805  145D  07A5               	addwf	___ftpack@exp,f
 11806  145E  3001               	movlw	1
 11807  145F                     u4905:	
 11808  145F  36A4               	lsrf	___ftpack@arg+2,f
 11809  1460  0CA3               	rrf	___ftpack@arg+1,f
 11810  1461  0CA2               	rrf	___ftpack@arg,f
 11811  1462  0B89               	decfsz	9,f
 11812  1463  2C5F               	goto	u4905
 11813  1464                     l4908:	
 11814  1464  30FE               	movlw	254
 11815  1465  0524               	andwf	___ftpack@arg+2,w
 11816  1466  1903               	btfsc	3,2
 11817  1467  2C7D               	goto	l1489
 11818  1468  2C5A               	goto	l4906
 11819  1469                     l4910:	
 11820  1469  3001               	movlw	1
 11821  146A  00A7               	movwf	??___ftpack
 11822  146B  0827               	movf	??___ftpack,w
 11823  146C  07A5               	addwf	___ftpack@exp,f
 11824  146D  3001               	movlw	1
 11825  146E  07A2               	addwf	___ftpack@arg,f
 11826  146F  3000               	movlw	0
 11827  1470  1803               	skipnc
 11828  1471  3001               	movlw	1
 11829  1472  07A3               	addwf	___ftpack@arg+1,f
 11830  1473  3000               	movlw	0
 11831  1474  1803               	skipnc
 11832  1475  3001               	movlw	1
 11833  1476  07A4               	addwf	___ftpack@arg+2,f
 11834  1477  3001               	movlw	1
 11835  1478                     u4925:	
 11836  1478  36A4               	lsrf	___ftpack@arg+2,f
 11837  1479  0CA3               	rrf	___ftpack@arg+1,f
 11838  147A  0CA2               	rrf	___ftpack@arg,f
 11839  147B  0B89               	decfsz	9,f
 11840  147C  2C78               	goto	u4925
 11841  147D                     l1489:	
 11842  147D  30FF               	movlw	255
 11843  147E  0524               	andwf	___ftpack@arg+2,w
 11844  147F  1903               	btfsc	3,2
 11845  1480  2C8A               	goto	l4918
 11846  1481  2C69               	goto	l4910
 11847  1482                     l4916:	
 11848  1482  3001               	movlw	1
 11849  1483  02A5               	subwf	___ftpack@exp,f
 11850  1484  3001               	movlw	1
 11851  1485                     u4945:	
 11852  1485  35A2               	lslf	___ftpack@arg,f
 11853  1486  0DA3               	rlf	___ftpack@arg+1,f
 11854  1487  0DA4               	rlf	___ftpack@arg+2,f
 11855  1488  0B89               	decfsz	9,f
 11856  1489  2C85               	goto	u4945
 11857  148A                     l4918:	
 11858  148A  1BA3               	btfsc	___ftpack@arg+1,7
 11859  148B  2C90               	goto	l1496
 11860  148C  3002               	movlw	2
 11861  148D  0225               	subwf	___ftpack@exp,w
 11862  148E  1803               	skipnc
 11863  148F  2C82               	goto	l4916
 11864  1490                     l1496:	
 11865  1490  1825               	btfsc	___ftpack@exp,0
 11866  1491  2C98               	goto	l1497
 11867  1492  30FF               	movlw	255
 11868  1493  05A2               	andwf	___ftpack@arg,f
 11869  1494  307F               	movlw	127
 11870  1495  05A3               	andwf	___ftpack@arg+1,f
 11871  1496  30FF               	movlw	255
 11872  1497  05A4               	andwf	___ftpack@arg+2,f
 11873  1498                     l1497:	
 11874  1498  1003               	clrc
 11875  1499  0CA5               	rrf	___ftpack@exp,f
 11876  149A  0825               	movf	___ftpack@exp,w
 11877  149B  00A7               	movwf	??___ftpack
 11878  149C  01A8               	clrf	??___ftpack+1
 11879  149D  01A9               	clrf	??___ftpack+2
 11880  149E  3010               	movlw	16
 11881  149F                     u4985:	
 11882  149F  35A7               	lslf	??___ftpack,f
 11883  14A0  0DA8               	rlf	??___ftpack+1,f
 11884  14A1  0DA9               	rlf	??___ftpack+2,f
 11885  14A2  0B89               	decfsz	9,f
 11886  14A3  2C9F               	goto	u4985
 11887  14A4  0827               	movf	??___ftpack,w
 11888  14A5  04A2               	iorwf	___ftpack@arg,f
 11889  14A6  0828               	movf	??___ftpack+1,w
 11890  14A7  04A3               	iorwf	___ftpack@arg+1,f
 11891  14A8  0829               	movf	??___ftpack+2,w
 11892  14A9  04A4               	iorwf	___ftpack@arg+2,f
 11893  14AA  0826               	movf	___ftpack@sign,w
 11894  14AB  1903               	btfsc	3,2
 11895  14AC  0008               	return
 11896  14AD  17A4               	bsf	___ftpack@arg+2,7
 11897  14AE  0008               	return
 11898  14AF                     __end_of___ftpack:	
 11899                           
 11900                           	psect	text34
 11901  151E                     __ptext34:	
 11902 ;; *************** function _ReadSavedSettings *****************
 11903 ;; Defined at:
 11904 ;;		line 193 in file "user.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;		None
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;		None
 11909 ;; Return value:  Size  Location     Type
 11910 ;;                  1    wreg      void 
 11911 ;; Registers used:
 11912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11913 ;; Tracked objects:
 11914 ;;		On entry : 0/0
 11915 ;;		On exit  : 0/0
 11916 ;;		Unchanged: 0/0
 11917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11922 ;;Total ram usage:        1 bytes
 11923 ;; Hardware stack levels used:    1
 11924 ;; Hardware stack levels required when called:    3
 11925 ;; This function calls:
 11926 ;;		_FLASH_ReadWord
 11927 ;;		_set_leds_bottom
 11928 ;;		_set_leds_top
 11929 ;; This function is called by:
 11930 ;;		_main
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           
 11935                           ;psect for function _ReadSavedSettings
 11936  151E                     _ReadSavedSettings:	
 11937                           
 11938                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11939                           
 11940                           ;incstack = 0
 11941                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11942  151E  3081               	movlw	129
 11943  151F  0020               	movlb	0	; select bank0
 11944  1520  00A2               	movwf	FLASH_ReadWord@flashAddr
 11945  1521  301F               	movlw	31
 11946  1522  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11947  1523  319E  261A  3195   	fcall	_FLASH_ReadWord
 11948  1526  0020               	movlb	0	; select bank0
 11949  1527  0823               	movf	?_FLASH_ReadWord+1,w
 11950  1528  0021               	movlb	1	; select bank1
 11951  1529  00E7               	movwf	(_top_push_state+1)^(0+128)
 11952  152A  0020               	movlb	0	; select bank0
 11953  152B  0822               	movf	?_FLASH_ReadWord,w
 11954  152C  0021               	movlb	1	; select bank1
 11955  152D  00E6               	movwf	_top_push_state^(0+128)
 11956                           
 11957                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 11958  152E  3082               	movlw	130
 11959  152F  0020               	movlb	0	; select bank0
 11960  1530  00A2               	movwf	FLASH_ReadWord@flashAddr
 11961  1531  301F               	movlw	31
 11962  1532  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11963  1533  319E  261A  3195   	fcall	_FLASH_ReadWord
 11964  1536  0020               	movlb	0	; select bank0
 11965  1537  0823               	movf	?_FLASH_ReadWord+1,w
 11966  1538  0021               	movlb	1	; select bank1
 11967  1539  00E3               	movwf	(_bottom_push_state+1)^(0+128)
 11968  153A  0020               	movlb	0	; select bank0
 11969  153B  0822               	movf	?_FLASH_ReadWord,w
 11970  153C  0021               	movlb	1	; select bank1
 11971  153D  00E2               	movwf	_bottom_push_state^(0+128)
 11972                           
 11973                           ;user.c: 198: if (top_push_state > 6) {
 11974  153E  0867               	movf	(_top_push_state+1)^(0+128),w
 11975  153F  3A80               	xorlw	128
 11976  1540  0020               	movlb	0	; select bank0
 11977  1541  00A6               	movwf	??_ReadSavedSettings
 11978  1542  3080               	movlw	128
 11979  1543  0226               	subwf	??_ReadSavedSettings,w
 11980  1544  1D03               	skipz
 11981  1545  2D49               	goto	u5805
 11982  1546  3007               	movlw	7
 11983  1547  0021               	movlb	1	; select bank1
 11984  1548  0266               	subwf	_top_push_state^(0+128),w
 11985  1549                     u5805:	
 11986  1549  1C03               	skipc
 11987  154A  2D50               	goto	l565
 11988                           
 11989                           ;user.c: 200: top_push_state = 6;
 11990  154B  3006               	movlw	6
 11991  154C  0021               	movlb	1	; select bank1
 11992  154D  00E6               	movwf	_top_push_state^(0+128)
 11993  154E  3000               	movlw	0
 11994  154F  00E7               	movwf	(_top_push_state^(0+128)+1)
 11995  1550                     l565:	
 11996                           
 11997                           ;user.c: 201: }
 11998                           ;user.c: 202: if (bottom_push_state > 6) {
 11999  1550  0021               	movlb	1	; select bank1
 12000  1551  0863               	movf	(_bottom_push_state+1)^(0+128),w
 12001  1552  3A80               	xorlw	128
 12002  1553  0020               	movlb	0	; select bank0
 12003  1554  00A6               	movwf	??_ReadSavedSettings
 12004  1555  3080               	movlw	128
 12005  1556  0226               	subwf	??_ReadSavedSettings,w
 12006  1557  1D03               	skipz
 12007  1558  2D5C               	goto	u5815
 12008  1559  3007               	movlw	7
 12009  155A  0021               	movlb	1	; select bank1
 12010  155B  0262               	subwf	_bottom_push_state^(0+128),w
 12011  155C                     u5815:	
 12012  155C  1C03               	skipc
 12013  155D  2D63               	goto	l5388
 12014                           
 12015                           ;user.c: 204: bottom_push_state = 6;
 12016  155E  3006               	movlw	6
 12017  155F  0021               	movlb	1	; select bank1
 12018  1560  00E2               	movwf	_bottom_push_state^(0+128)
 12019  1561  3000               	movlw	0
 12020  1562  00E3               	movwf	(_bottom_push_state^(0+128)+1)
 12021  1563                     l5388:	
 12022                           
 12023                           ;user.c: 205: }
 12024                           ;user.c: 208: LATGbits.LATG1 = !switchBypass_state;
 12025  1563  087D               	movf	_switchBypass_state,w
 12026  1564  1D03               	btfss	3,2
 12027  1565  2D69               	goto	u5820
 12028  1566  0027               	movlb	7	; select bank7
 12029  1567  148D               	bsf	13,1	;volatile
 12030  1568  2D6B               	goto	l5390
 12031  1569                     u5820:	
 12032  1569  0027               	movlb	7	; select bank7
 12033  156A  108D               	bcf	13,1	;volatile
 12034  156B                     l5390:	
 12035                           
 12036                           ;user.c: 209: LATGbits.LATG2 = switchBypass_state;
 12037  156B  0C7D               	rrf	_switchBypass_state,w
 12038  156C  1C03               	skipc
 12039  156D  110D               	bcf	13,2	;volatile
 12040  156E  1803               	skipnc
 12041  156F  150D               	bsf	13,2	;volatile
 12042                           
 12043                           ;user.c: 210: LATBbits.LATB2 = 0;
 12044  1570  0022               	movlb	2	; select bank2
 12045  1571  110D               	bcf	13,2	;volatile
 12046                           
 12047                           ;user.c: 211: LATBbits.LATB3 = 0;
 12048  1572  118D               	bcf	13,3	;volatile
 12049                           
 12050                           ;user.c: 213: LATBbits.LATB4 = 0;
 12051  1573  120D               	bcf	13,4	;volatile
 12052                           
 12053                           ;user.c: 214: LATBbits.LATB5 = 0;
 12054  1574  128D               	bcf	13,5	;volatile
 12055                           
 12056                           ;user.c: 216: LATBbits.LATB1 = 0;
 12057  1575  108D               	bcf	13,1	;volatile
 12058                           
 12059                           ;user.c: 217: LATBbits.LATB0 = 0;
 12060  1576  100D               	bcf	13,0	;volatile
 12061                           
 12062                           ;user.c: 220: set_leds_top(top_push_state, 1);
 12063  1577  0021               	movlb	1	; select bank1
 12064  1578  0867               	movf	(_top_push_state+1)^(0+128),w
 12065  1579  0020               	movlb	0	; select bank0
 12066  157A  00A3               	movwf	set_leds_top@x+1
 12067  157B  0021               	movlb	1	; select bank1
 12068  157C  0866               	movf	_top_push_state^(0+128),w
 12069  157D  0020               	movlb	0	; select bank0
 12070  157E  00A2               	movwf	set_leds_top@x
 12071  157F  3001               	movlw	1
 12072  1580  00A4               	movwf	set_leds_top@ledState
 12073  1581  3000               	movlw	0
 12074  1582  00A5               	movwf	set_leds_top@ledState+1
 12075  1583  3193  23F6  3195   	fcall	_set_leds_top
 12076                           
 12077                           ;user.c: 221: set_leds_bottom(bottom_push_state);
 12078  1586  0021               	movlb	1	; select bank1
 12079  1587  0863               	movf	(_bottom_push_state+1)^(0+128),w
 12080  1588  0020               	movlb	0	; select bank0
 12081  1589  00A3               	movwf	set_leds_bottom@x+1
 12082  158A  0021               	movlb	1	; select bank1
 12083  158B  0862               	movf	_bottom_push_state^(0+128),w
 12084  158C  0020               	movlb	0	; select bank0
 12085  158D  00A2               	movwf	set_leds_bottom@x
 12086  158E  319F  274A         	fcall	_set_leds_bottom
 12087  1590  0008               	return
 12088  1591                     __end_of_ReadSavedSettings:	
 12089                           
 12090                           	psect	text35
 12091  13F6                     __ptext35:	
 12092 ;; *************** function _set_leds_top *****************
 12093 ;; Defined at:
 12094 ;;		line 16 in file "LEDs.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  x               2    2[BANK0 ] int 
 12097 ;;  ledState        2    4[BANK0 ] int 
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;		None
 12100 ;; Return value:  Size  Location     Type
 12101 ;;                  1    wreg      void 
 12102 ;; Registers used:
 12103 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12109 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12112 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12113 ;;Total ram usage:        4 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    2
 12116 ;; This function calls:
 12117 ;;		Nothing
 12118 ;; This function is called by:
 12119 ;;		_ReadSavedSettings
 12120 ;;		_star_tactiles
 12121 ;;		_solidring_tactiles
 12122 ;;		_read_top_tactile
 12123 ;;		_ring_tactiles
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           
 12128                           ;psect for function _set_leds_top
 12129  13F6                     _set_leds_top:	
 12130                           
 12131                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 12132                           
 12133                           ;incstack = 0
 12134                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 12135  13F6  0027               	movlb	7	; select bank7
 12136  13F7  100C               	bcf	12,0	;volatile
 12137                           
 12138                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 12139  13F8  108C               	bcf	12,1	;volatile
 12140                           
 12141                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 12142  13F9  110C               	bcf	12,2	;volatile
 12143                           
 12144                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 12145  13FA  118C               	bcf	12,3	;volatile
 12146                           
 12147                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 12148  13FB  120C               	bcf	12,4	;volatile
 12149                           
 12150                           ;LEDs.c: 22: switch (x) {
 12151  13FC  2C2C               	goto	l4868
 12152  13FD                     l4856:	
 12153                           ;LEDs.c: 23: case 1:
 12154                           
 12155                           
 12156                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 12157  13FD  0020               	movlb	0	; select bank0
 12158  13FE  0C24               	rrf	set_leds_top@ledState,w
 12159  13FF  0027               	movlb	7	; select bank7
 12160  1400  1C03               	skipc
 12161  1401  100C               	bcf	12,0	;volatile
 12162  1402  1803               	skipnc
 12163  1403  140C               	bsf	12,0	;volatile
 12164                           
 12165                           ;LEDs.c: 25: break;
 12166  1404  0008               	return
 12167  1405                     l4858:	
 12168                           ;LEDs.c: 26: case 2:
 12169                           
 12170                           
 12171                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 12172  1405  0020               	movlb	0	; select bank0
 12173  1406  0C24               	rrf	set_leds_top@ledState,w
 12174  1407  0027               	movlb	7	; select bank7
 12175  1408  1C03               	skipc
 12176  1409  108C               	bcf	12,1	;volatile
 12177  140A  1803               	skipnc
 12178  140B  148C               	bsf	12,1	;volatile
 12179                           
 12180                           ;LEDs.c: 28: break;
 12181  140C  0008               	return
 12182  140D                     l4860:	
 12183                           ;LEDs.c: 29: case 3:
 12184                           
 12185                           
 12186                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 12187  140D  0020               	movlb	0	; select bank0
 12188  140E  0C24               	rrf	set_leds_top@ledState,w
 12189  140F  0027               	movlb	7	; select bank7
 12190  1410  1C03               	skipc
 12191  1411  110C               	bcf	12,2	;volatile
 12192  1412  1803               	skipnc
 12193  1413  150C               	bsf	12,2	;volatile
 12194                           
 12195                           ;LEDs.c: 31: break;
 12196  1414  0008               	return
 12197  1415                     l4862:	
 12198                           ;LEDs.c: 32: case 4:
 12199                           
 12200                           
 12201                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12202  1415  0020               	movlb	0	; select bank0
 12203  1416  0C24               	rrf	set_leds_top@ledState,w
 12204  1417  0027               	movlb	7	; select bank7
 12205  1418  1C03               	skipc
 12206  1419  118C               	bcf	12,3	;volatile
 12207  141A  1803               	skipnc
 12208  141B  158C               	bsf	12,3	;volatile
 12209                           
 12210                           ;LEDs.c: 34: break;
 12211  141C  0008               	return
 12212  141D                     l4864:	
 12213                           ;LEDs.c: 35: case 5:
 12214                           
 12215                           
 12216                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12217  141D  0020               	movlb	0	; select bank0
 12218  141E  0C24               	rrf	set_leds_top@ledState,w
 12219  141F  0027               	movlb	7	; select bank7
 12220  1420  1C03               	skipc
 12221  1421  120C               	bcf	12,4	;volatile
 12222  1422  1803               	skipnc
 12223  1423  160C               	bsf	12,4	;volatile
 12224                           
 12225                           ;LEDs.c: 39: break;
 12226                           
 12227                           ;LEDs.c: 38: case 6:
 12228                           
 12229                           ;LEDs.c: 37: break;
 12230  1424  0008               	return
 12231  1425                     l706:	
 12232                           ;LEDs.c: 40: case 100:
 12233                           
 12234                           
 12235                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12236  1425  0027               	movlb	7	; select bank7
 12237  1426  140C               	bsf	12,0	;volatile
 12238                           
 12239                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12240  1427  148C               	bsf	12,1	;volatile
 12241                           
 12242                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12243  1428  150C               	bsf	12,2	;volatile
 12244                           
 12245                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12246  1429  158C               	bsf	12,3	;volatile
 12247                           
 12248                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12249  142A  160C               	bsf	12,4	;volatile
 12250                           
 12251                           ;LEDs.c: 47: }
 12252                           
 12253                           ;LEDs.c: 46: break;
 12254  142B  0008               	return
 12255  142C                     l4868:	
 12256                           
 12257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12258                           ; Switch size 1, requested type "space"
 12259                           ; Number of cases is 1, Range of values is 0 to 0
 12260                           ; switch strategies available:
 12261                           ; Name         Instructions Cycles
 12262                           ; simple_byte            4     3 (average)
 12263                           ; direct_byte            8     6 (fixed)
 12264                           ; jumptable            260     6 (fixed)
 12265                           ;	Chosen strategy is simple_byte
 12266  142C  0020               	movlb	0	; select bank0
 12267  142D  0823               	movf	set_leds_top@x+1,w
 12268  142E  3A00               	xorlw	0	; case 0
 12269  142F  1903               	skipnz
 12270  1430  2C32               	goto	l6262
 12271  1431  2C49               	goto	l707
 12272  1432                     l6262:	
 12273                           
 12274                           ; Switch size 1, requested type "space"
 12275                           ; Number of cases is 7, Range of values is 1 to 100
 12276                           ; switch strategies available:
 12277                           ; Name         Instructions Cycles
 12278                           ; simple_byte           22    12 (average)
 12279                           ; direct_byte          209     9 (fixed)
 12280                           ; jumptable            263     9 (fixed)
 12281                           ;	Chosen strategy is simple_byte
 12282  1432  0822               	movf	set_leds_top@x,w
 12283  1433  3A01               	xorlw	1	; case 1
 12284  1434  1903               	skipnz
 12285  1435  2BFD               	goto	l4856
 12286  1436  3A03               	xorlw	3	; case 2
 12287  1437  1903               	skipnz
 12288  1438  2C05               	goto	l4858
 12289  1439  3A01               	xorlw	1	; case 3
 12290  143A  1903               	skipnz
 12291  143B  2C0D               	goto	l4860
 12292  143C  3A07               	xorlw	7	; case 4
 12293  143D  1903               	skipnz
 12294  143E  2C15               	goto	l4862
 12295  143F  3A01               	xorlw	1	; case 5
 12296  1440  1903               	skipnz
 12297  1441  2C1D               	goto	l4864
 12298  1442  3A03               	xorlw	3	; case 6
 12299  1443  1903               	skipnz
 12300  1444  2C49               	goto	l707
 12301  1445  3A62               	xorlw	98	; case 100
 12302  1446  1903               	skipnz
 12303  1447  2C25               	goto	l706
 12304  1448  2C49               	goto	l707
 12305  1449                     l707:	
 12306  1449  0008               	return
 12307  144A                     __end_of_set_leds_top:	
 12308                           
 12309                           	psect	text36
 12310  1F4A                     __ptext36:	
 12311 ;; *************** function _set_leds_bottom *****************
 12312 ;; Defined at:
 12313 ;;		line 51 in file "LEDs.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;  x               2    2[BANK0 ] int 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  1    wreg      void 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12331 ;;Total ram usage:        2 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    2
 12334 ;; This function calls:
 12335 ;;		Nothing
 12336 ;; This function is called by:
 12337 ;;		_ReadSavedSettings
 12338 ;;		_star_tactiles
 12339 ;;		_solidring_tactiles
 12340 ;;		_read_bottom_tactile
 12341 ;;		_ring_tactiles
 12342 ;; This function uses a non-reentrant model
 12343 ;;
 12344                           
 12345                           
 12346                           ;psect for function _set_leds_bottom
 12347  1F4A                     _set_leds_bottom:	
 12348                           
 12349                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12350                           
 12351                           ;incstack = 0
 12352                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12353  1F4A  0022               	movlb	2	; select bank2
 12354  1F4B  100F               	bcf	15,0	;volatile
 12355                           
 12356                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12357  1F4C  108F               	bcf	15,1	;volatile
 12358                           
 12359                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12360  1F4D  110F               	bcf	15,2	;volatile
 12361                           
 12362                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12363  1F4E  118F               	bcf	15,3	;volatile
 12364                           
 12365                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12366  1F4F  120F               	bcf	15,4	;volatile
 12367                           
 12368                           ;LEDs.c: 57: switch (x) {
 12369  1F50  2F67               	goto	l4892
 12370  1F51                     l711:	
 12371                           ;LEDs.c: 58: case 1:
 12372                           
 12373                           
 12374                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12375  1F51  0022               	movlb	2	; select bank2
 12376  1F52  140F               	bsf	15,0	;volatile
 12377                           
 12378                           ;LEDs.c: 60: break;
 12379  1F53  0008               	return
 12380  1F54                     l713:	
 12381                           ;LEDs.c: 61: case 2:
 12382                           
 12383                           
 12384                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12385  1F54  0022               	movlb	2	; select bank2
 12386  1F55  148F               	bsf	15,1	;volatile
 12387                           
 12388                           ;LEDs.c: 63: break;
 12389  1F56  0008               	return
 12390  1F57                     l714:	
 12391                           ;LEDs.c: 64: case 3:
 12392                           
 12393                           
 12394                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12395  1F57  0022               	movlb	2	; select bank2
 12396  1F58  150F               	bsf	15,2	;volatile
 12397                           
 12398                           ;LEDs.c: 66: break;
 12399  1F59  0008               	return
 12400  1F5A                     l715:	
 12401                           ;LEDs.c: 67: case 4:
 12402                           
 12403                           
 12404                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12405  1F5A  0022               	movlb	2	; select bank2
 12406  1F5B  158F               	bsf	15,3	;volatile
 12407                           
 12408                           ;LEDs.c: 69: break;
 12409  1F5C  0008               	return
 12410  1F5D                     l716:	
 12411                           ;LEDs.c: 70: case 5:
 12412                           
 12413                           
 12414                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12415  1F5D  0022               	movlb	2	; select bank2
 12416  1F5E  160F               	bsf	15,4	;volatile
 12417                           
 12418                           ;LEDs.c: 74: break;
 12419                           
 12420                           ;LEDs.c: 73: case 6:
 12421                           
 12422                           ;LEDs.c: 72: break;
 12423  1F5F  0008               	return
 12424  1F60                     l718:	
 12425                           ;LEDs.c: 75: case 100:
 12426                           
 12427                           
 12428                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12429  1F60  0022               	movlb	2	; select bank2
 12430  1F61  140F               	bsf	15,0	;volatile
 12431                           
 12432                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12433  1F62  148F               	bsf	15,1	;volatile
 12434                           
 12435                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12436  1F63  150F               	bsf	15,2	;volatile
 12437                           
 12438                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12439  1F64  158F               	bsf	15,3	;volatile
 12440                           
 12441                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12442  1F65  160F               	bsf	15,4	;volatile
 12443                           
 12444                           ;LEDs.c: 82: }
 12445                           
 12446                           ;LEDs.c: 81: break;
 12447  1F66  0008               	return
 12448  1F67                     l4892:	
 12449                           
 12450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12451                           ; Switch size 1, requested type "space"
 12452                           ; Number of cases is 1, Range of values is 0 to 0
 12453                           ; switch strategies available:
 12454                           ; Name         Instructions Cycles
 12455                           ; simple_byte            4     3 (average)
 12456                           ; direct_byte            8     6 (fixed)
 12457                           ; jumptable            260     6 (fixed)
 12458                           ;	Chosen strategy is simple_byte
 12459  1F67  0020               	movlb	0	; select bank0
 12460  1F68  0823               	movf	set_leds_bottom@x+1,w
 12461  1F69  3A00               	xorlw	0	; case 0
 12462  1F6A  1903               	skipnz
 12463  1F6B  2F6D               	goto	l6264
 12464  1F6C  2F84               	goto	l719
 12465  1F6D                     l6264:	
 12466                           
 12467                           ; Switch size 1, requested type "space"
 12468                           ; Number of cases is 7, Range of values is 1 to 100
 12469                           ; switch strategies available:
 12470                           ; Name         Instructions Cycles
 12471                           ; simple_byte           22    12 (average)
 12472                           ; direct_byte          209     9 (fixed)
 12473                           ; jumptable            263     9 (fixed)
 12474                           ;	Chosen strategy is simple_byte
 12475  1F6D  0822               	movf	set_leds_bottom@x,w
 12476  1F6E  3A01               	xorlw	1	; case 1
 12477  1F6F  1903               	skipnz
 12478  1F70  2F51               	goto	l711
 12479  1F71  3A03               	xorlw	3	; case 2
 12480  1F72  1903               	skipnz
 12481  1F73  2F54               	goto	l713
 12482  1F74  3A01               	xorlw	1	; case 3
 12483  1F75  1903               	skipnz
 12484  1F76  2F57               	goto	l714
 12485  1F77  3A07               	xorlw	7	; case 4
 12486  1F78  1903               	skipnz
 12487  1F79  2F5A               	goto	l715
 12488  1F7A  3A01               	xorlw	1	; case 5
 12489  1F7B  1903               	skipnz
 12490  1F7C  2F5D               	goto	l716
 12491  1F7D  3A03               	xorlw	3	; case 6
 12492  1F7E  1903               	skipnz
 12493  1F7F  2F84               	goto	l719
 12494  1F80  3A62               	xorlw	98	; case 100
 12495  1F81  1903               	skipnz
 12496  1F82  2F60               	goto	l718
 12497  1F83  2F84               	goto	l719
 12498  1F84                     l719:	
 12499  1F84  0008               	return
 12500  1F85                     __end_of_set_leds_bottom:	
 12501                           
 12502                           	psect	text37
 12503  1E1A                     __ptext37:	
 12504 ;; *************** function _FLASH_ReadWord *****************
 12505 ;; Defined at:
 12506 ;;		line 58 in file "memory.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  flashAddr       2    2[BANK0 ] unsigned int 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  2    2[BANK0 ] unsigned int 
 12513 ;; Registers used:
 12514 ;;		wreg, status,2, status,0
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12520 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12524 ;;Total ram usage:        3 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    2
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_ReadSavedSettings
 12531 ;;		_FLASH_WriteWord
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535                           
 12536                           ;psect for function _FLASH_ReadWord
 12537  1E1A                     _FLASH_ReadWord:	
 12538                           
 12539                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12543  1E1A  3000               	movlw	0
 12544  1E1B  1B8B               	btfsc	11,7	;volatile
 12545  1E1C  3001               	movlw	1
 12546  1E1D  0020               	movlb	0	; select bank0
 12547  1E1E  00A4               	movwf	FLASH_ReadWord@GIEBitValue
 12548                           
 12549                           ;memory.c: 61: INTCONbits.GIE = 0;
 12550  1E1F  138B               	bcf	11,7	;volatile
 12551                           
 12552                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12553  1E20  0822               	movf	FLASH_ReadWord@flashAddr,w
 12554  1E21  0023               	movlb	3	; select bank3
 12555  1E22  0091               	movwf	17	;volatile
 12556                           
 12557                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12558  1E23  0020               	movlb	0	; select bank0
 12559  1E24  0823               	movf	FLASH_ReadWord@flashAddr+1,w
 12560  1E25  0023               	movlb	3	; select bank3
 12561  1E26  0092               	movwf	18	;volatile
 12562                           
 12563                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12564  1E27  1315               	bcf	21,6	;volatile
 12565                           
 12566                           ;memory.c: 66: PMCON1bits.RD = 1;
 12567  1E28  1415               	bsf	21,0	;volatile
 12568                           
 12569                           ;memory.c: 67: __nop();
 12570  1E29  0000               	nop
 12571                           
 12572                           ;memory.c: 68: __nop();
 12573  1E2A  0000               	nop
 12574                           
 12575                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12576  1E2B  0020               	movlb	0	; select bank0
 12577  1E2C  0C24               	rrf	FLASH_ReadWord@GIEBitValue,w
 12578  1E2D  1C03               	skipc
 12579  1E2E  138B               	bcf	11,7	;volatile
 12580  1E2F  1803               	skipnc
 12581  1E30  178B               	bsf	11,7	;volatile
 12582                           
 12583                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12584  1E31  0023               	movlb	3	; select bank3
 12585  1E32  0814               	movf	20,w	;volatile
 12586  1E33  0020               	movlb	0	; select bank0
 12587  1E34  00A3               	movwf	?_FLASH_ReadWord+1
 12588  1E35  0023               	movlb	3	; select bank3
 12589  1E36  0813               	movf	19,w	;volatile
 12590  1E37  0020               	movlb	0	; select bank0
 12591  1E38  00A2               	movwf	?_FLASH_ReadWord
 12592  1E39  0008               	return
 12593  1E3A                     __end_of_FLASH_ReadWord:	
 12594                           
 12595                           	psect	text38
 12596  1E3A                     __ptext38:	
 12597 ;; *************** function _InitializeTaps *****************
 12598 ;; Defined at:
 12599 ;;		line 187 in file "user.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;		None
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;  itap            2    3[BANK0 ] int 
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12614 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12616 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12617 ;;Total ram usage:        3 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    2
 12620 ;; This function calls:
 12621 ;;		Nothing
 12622 ;; This function is called by:
 12623 ;;		_main
 12624 ;; This function uses a non-reentrant model
 12625 ;;
 12626                           
 12627                           
 12628                           ;psect for function _InitializeTaps
 12629  1E3A                     _InitializeTaps:	
 12630                           
 12631                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 12632                           
 12633                           ;incstack = 0
 12634                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12635  1E3A  0020               	movlb	0	; select bank0
 12636  1E3B  01A3               	clrf	InitializeTaps@itap
 12637  1E3C  01A4               	clrf	InitializeTaps@itap+1
 12638  1E3D                     L15:	
 12639  1E3D  0824               	movf	InitializeTaps@itap+1,w
 12640  1E3E  3A80               	xorlw	128
 12641  1E3F  00A2               	movwf	??_InitializeTaps
 12642  1E40  3080               	movlw	128
 12643  1E41  0222               	subwf	??_InitializeTaps,w
 12644  1E42  1D03               	skipz
 12645  1E43  2E46               	goto	u5775
 12646  1E44  300C               	movlw	12
 12647  1E45  0223               	subwf	InitializeTaps@itap,w
 12648  1E46                     u5775:	
 12649  1E46  1803               	btfsc	3,0
 12650  1E47  0008               	return
 12651                           
 12652                           ;user.c: 189: tap[itap] = 0;
 12653  1E48  0020               	movlb	0	; select bank0
 12654  1E49  0823               	movf	InitializeTaps@itap,w
 12655  1E4A  00A2               	movwf	??_InitializeTaps
 12656  1E4B  3001               	movlw	1
 12657  1E4C                     u5785:	
 12658  1E4C  35A2               	lslf	??_InitializeTaps,f
 12659  1E4D  3EFF               	addlw	-1
 12660  1E4E  1D03               	skipz
 12661  1E4F  2E4C               	goto	u5785
 12662  1E50  3522               	lslf	??_InitializeTaps,w
 12663  1E51  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12664  1E52  0086               	movwf	6
 12665  1E53  3001               	movlw	1	; select bank3/4
 12666  1E54  0087               	movwf	7
 12667  1E55  3000               	movlw	0
 12668  1E56  3FC0               	movwi [0]fsr1
 12669  1E57  3000               	movlw	0
 12670  1E58  3FC1               	movwi [1]fsr1
 12671  1E59  3FC2               	movwi [2]fsr1
 12672  1E5A  3FC3               	movwi [3]fsr1
 12673  1E5B  3001               	movlw	1
 12674  1E5C  07A3               	addwf	InitializeTaps@itap,f
 12675  1E5D  3000               	movlw	0
 12676  1E5E  3DA4               	addwfc	InitializeTaps@itap+1,f
 12677  1E5F  2E3D               	goto	L15
 12678  1E60                     __end_of_InitializeTaps:	
 12679                           
 12680                           	psect	text39
 12681  1EB8                     __ptext39:	
 12682 ;; *************** function _InitApp *****************
 12683 ;; Defined at:
 12684 ;;		line 23 in file "user.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;		None
 12687 ;; Auto vars:     Size  Location     Type
 12688 ;;		None
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      void 
 12691 ;; Registers used:
 12692 ;;		wreg, status,2, status,0, pclath, cstack
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12702 ;;Total ram usage:        0 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    4
 12705 ;; This function calls:
 12706 ;;		_init_adc
 12707 ;;		_init_pwm
 12708 ;; This function is called by:
 12709 ;;		_main
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _InitApp
 12715  1EB8                     _InitApp:	
 12716                           
 12717                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12721  1EB8  0021               	movlb	1	; select bank1
 12722  1EB9  100D               	bcf	13,0	;volatile
 12723                           
 12724                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12725  1EBA  108D               	bcf	13,1	;volatile
 12726                           
 12727                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12728  1EBB  110D               	bcf	13,2	;volatile
 12729                           
 12730                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12731  1EBC  118D               	bcf	13,3	;volatile
 12732                           
 12733                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12734  1EBD  120D               	bcf	13,4	;volatile
 12735                           
 12736                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12737  1EBE  128D               	bcf	13,5	;volatile
 12738                           
 12739                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12740  1EBF  140E               	bsf	14,0	;volatile
 12741                           
 12742                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12743  1EC0  120E               	bcf	14,4	;volatile
 12744                           
 12745                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12746  1EC1  128E               	bcf	14,5	;volatile
 12747                           
 12748                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12749  1EC2  100F               	bcf	15,0	;volatile
 12750                           
 12751                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12752  1EC3  108F               	bcf	15,1	;volatile
 12753                           
 12754                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12755  1EC4  110F               	bcf	15,2	;volatile
 12756                           
 12757                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12758  1EC5  118F               	bcf	15,3	;volatile
 12759                           
 12760                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12761  1EC6  120F               	bcf	15,4	;volatile
 12762                           
 12763                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12764  1EC7  168F               	bsf	15,5	;volatile
 12765                           
 12766                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12767  1EC8  170F               	bsf	15,6	;volatile
 12768                           
 12769                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12770  1EC9  178F               	bsf	15,7	;volatile
 12771                           
 12772                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12773  1ECA  1410               	bsf	16,0	;volatile
 12774                           
 12775                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12776  1ECB  1490               	bsf	16,1	;volatile
 12777                           
 12778                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12779  1ECC  0023               	movlb	3	; select bank3
 12780  1ECD  1010               	bcf	16,0	;volatile
 12781                           
 12782                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12783  1ECE  1090               	bcf	16,1	;volatile
 12784                           
 12785                           ;user.c: 53: PORTEbits.RE0 = 0;
 12786  1ECF  0020               	movlb	0	; select bank0
 12787  1ED0  1010               	bcf	16,0	;volatile
 12788                           
 12789                           ;user.c: 54: PORTEbits.RE1 = 0;
 12790  1ED1  1090               	bcf	16,1	;volatile
 12791                           
 12792                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12793  1ED2  0026               	movlb	6	; select bank6
 12794  1ED3  100C               	bcf	12,0	;volatile
 12795                           
 12796                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12797  1ED4  108C               	bcf	12,1	;volatile
 12798                           
 12799                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12800  1ED5  110C               	bcf	12,2	;volatile
 12801                           
 12802                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12803  1ED6  118C               	bcf	12,3	;volatile
 12804                           
 12805                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12806  1ED7  120C               	bcf	12,4	;volatile
 12807                           
 12808                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12809  1ED8  128C               	bcf	12,5	;volatile
 12810                           
 12811                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12812  1ED9  170C               	bsf	12,6	;volatile
 12813                           
 12814                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12815  1EDA  0028               	movlb	8	; select bank8
 12816  1EDB  130C               	bcf	12,6	;volatile
 12817                           
 12818                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12819  1EDC  0026               	movlb	6	; select bank6
 12820  1EDD  108D               	bcf	13,1	;volatile
 12821                           
 12822                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12823  1EDE  110D               	bcf	13,2	;volatile
 12824                           
 12825                           ;user.c: 68: init_adc();
 12826  1EDF  319D  2553  319E   	fcall	_init_adc
 12827                           
 12828                           ;user.c: 69: init_pwm();
 12829  1EE2  3191  211E         	fcall	_init_pwm
 12830                           
 12831                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12832  1EE4  178B               	bsf	11,7	;volatile
 12833                           
 12834                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12835  1EE5  168B               	bsf	11,5	;volatile
 12836                           
 12837                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12838  1EE6  110B               	bcf	11,2	;volatile
 12839  1EE7  0008               	return
 12840  1EE8                     __end_of_InitApp:	
 12841                           
 12842                           	psect	text40
 12843  111E                     __ptext40:	
 12844 ;; *************** function _init_pwm *****************
 12845 ;; Defined at:
 12846 ;;		line 123 in file "user.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;		None
 12849 ;; Auto vars:     Size  Location     Type
 12850 ;;		None
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  1    wreg      void 
 12853 ;; Registers used:
 12854 ;;		wreg, status,2, status,0, pclath, cstack
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12864 ;;Total ram usage:        0 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    3
 12867 ;; This function calls:
 12868 ;;		_init_timer0
 12869 ;;		_init_timer2
 12870 ;; This function is called by:
 12871 ;;		_InitApp
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           
 12876                           ;psect for function _init_pwm
 12877  111E                     _init_pwm:	
 12878                           
 12879                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12880                           
 12881                           ;incstack = 0
 12882                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12883  111E  0022               	movlb	2	; select bank2
 12884  111F  101D               	bcf	29,0	;volatile
 12885                           
 12886                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12887  1120  0021               	movlb	1	; select bank1
 12888  1121  110E               	bcf	14,2	;volatile
 12889                           
 12890                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12891  1122  108E               	bcf	14,1	;volatile
 12892                           
 12893                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12894  1123  0026               	movlb	6	; select bank6
 12895  1124  100D               	bcf	13,0	;volatile
 12896                           
 12897                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12898  1125  118D               	bcf	13,3	;volatile
 12899                           
 12900                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12901  1126  120D               	bcf	13,4	;volatile
 12902                           
 12903                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12904  1127  0021               	movlb	1	; select bank1
 12905  1128  1310               	bcf	16,6	;volatile
 12906                           
 12907                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12908  1129  1290               	bcf	16,5	;volatile
 12909                           
 12910                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12911  112A  1210               	bcf	16,4	;volatile
 12912                           
 12913                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12914  112B  1190               	bcf	16,3	;volatile
 12915                           
 12916                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12917  112C  1110               	bcf	16,2	;volatile
 12918                           
 12919                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12920  112D  300F               	movlw	15
 12921  112E  0025               	movlb	5	; select bank5
 12922  112F  0493               	iorwf	19,f	;volatile
 12923                           
 12924                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12925  1130  300F               	movlw	15
 12926  1131  049A               	iorwf	26,f	;volatile
 12927                           
 12928                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12929  1132  300F               	movlw	15
 12930  1133  0026               	movlb	6	; select bank6
 12931  1134  0493               	iorwf	19,f	;volatile
 12932                           
 12933                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12934  1135  300F               	movlw	15
 12935  1136  049A               	iorwf	26,f	;volatile
 12936                           
 12937                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12938  1137  300F               	movlw	15
 12939  1138  049E               	iorwf	30,f	;volatile
 12940                           
 12941                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12942  1139  300F               	movlw	15
 12943  113A  002C               	movlb	12	; select bank12
 12944  113B  0493               	iorwf	19,f	;volatile
 12945                           
 12946                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12947  113C  300F               	movlw	15
 12948  113D  0496               	iorwf	22,f	;volatile
 12949                           
 12950                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12951  113E  300F               	movlw	15
 12952  113F  0499               	iorwf	25,f	;volatile
 12953                           
 12954                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12955  1140  300F               	movlw	15
 12956  1141  049C               	iorwf	28,f	;volatile
 12957                           
 12958                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12959  1142  300F               	movlw	15
 12960  1143  049F               	iorwf	31,f	;volatile
 12961                           
 12962                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12963  1144  0025               	movlb	5	; select bank5
 12964  1145  019D               	clrf	29	;volatile
 12965                           
 12966                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12967  1146  019E               	clrf	30	;volatile
 12968                           
 12969                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12970  1147  019F               	clrf	31	;volatile
 12971                           
 12972                           ;user.c: 148: CCPR1 = 50;
 12973  1148  3000               	movlw	0
 12974  1149  0092               	movwf	18	;volatile
 12975  114A  3032               	movlw	50
 12976  114B  0091               	movwf	17	;volatile
 12977                           
 12978                           ;user.c: 149: CCPR2 = 100;
 12979  114C  3000               	movlw	0
 12980  114D  0099               	movwf	25	;volatile
 12981  114E  3064               	movlw	100
 12982  114F  0098               	movwf	24	;volatile
 12983                           
 12984                           ;user.c: 150: CCPR3 = 150;
 12985  1150  3000               	movlw	0
 12986  1151  0026               	movlb	6	; select bank6
 12987  1152  0092               	movwf	18	;volatile
 12988  1153  3096               	movlw	150
 12989  1154  0091               	movwf	17	;volatile
 12990                           
 12991                           ;user.c: 151: CCPR4 = 200;
 12992  1155  3000               	movlw	0
 12993  1156  0099               	movwf	25	;volatile
 12994  1157  30C8               	movlw	200
 12995  1158  0098               	movwf	24	;volatile
 12996                           
 12997                           ;user.c: 152: init_timer2();
 12998  1159  319D  2541  3191   	fcall	_init_timer2
 12999                           
 13000                           ;user.c: 153: init_timer0();
 13001  115C  3187  27F8         	fcall	_init_timer0
 13002  115E  0008               	return
 13003  115F                     __end_of_init_pwm:	
 13004                           
 13005                           	psect	text41
 13006  1D41                     __ptext41:	
 13007 ;; *************** function _init_timer2 *****************
 13008 ;; Defined at:
 13009 ;;		line 156 in file "user.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;		None
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;		None
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  1    wreg      void 
 13016 ;; Registers used:
 13017 ;;		wreg, status,2, status,0
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13027 ;;Total ram usage:        0 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; Hardware stack levels required when called:    2
 13030 ;; This function calls:
 13031 ;;		Nothing
 13032 ;; This function is called by:
 13033 ;;		_init_pwm
 13034 ;; This function uses a non-reentrant model
 13035 ;;
 13036                           
 13037                           
 13038                           ;psect for function _init_timer2
 13039  1D41                     _init_timer2:	
 13040                           
 13041                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 13045  1D41  3087               	movlw	-121
 13046  1D42  0020               	movlb	0	; select bank0
 13047  1D43  059C               	andwf	28,f	;volatile
 13048                           
 13049                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 13050  1D44  30FC               	movlw	-4
 13051  1D45  059C               	andwf	28,f	;volatile
 13052                           
 13053                           ;user.c: 159: PR2 = 0xFF;
 13054  1D46  30FF               	movlw	255
 13055  1D47  009B               	movwf	27	;volatile
 13056                           
 13057                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 13058  1D48  151C               	bsf	28,2	;volatile
 13059  1D49  0008               	return
 13060  1D4A                     __end_of_init_timer2:	
 13061                           
 13062                           	psect	text42
 13063  07F8                     __ptext42:	
 13064 ;; *************** function _init_timer0 *****************
 13065 ;; Defined at:
 13066 ;;		line 163 in file "user.c"
 13067 ;; Parameters:    Size  Location     Type
 13068 ;;		None
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;		None
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  1    wreg      void 
 13073 ;; Registers used:
 13074 ;;		None
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13084 ;;Total ram usage:        0 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    2
 13087 ;; This function calls:
 13088 ;;		Nothing
 13089 ;; This function is called by:
 13090 ;;		_init_pwm
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           
 13095                           ;psect for function _init_timer0
 13096  07F8                     _init_timer0:	
 13097                           
 13098                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 13099                           
 13100                           ;incstack = 0
 13101                           ; Regs used in _init_timer0: []
 13102  07F8  0021               	movlb	1	; select bank1
 13103  07F9  1295               	bcf	21,5	;volatile
 13104                           
 13105                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 13106  07FA  1195               	bcf	21,3	;volatile
 13107                           
 13108                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 13109  07FB  1015               	bcf	21,0	;volatile
 13110                           
 13111                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 13112  07FC  1495               	bsf	21,1	;volatile
 13113                           
 13114                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 13115  07FD  1115               	bcf	21,2	;volatile
 13116  07FE  0008               	return
 13117  07FF                     __end_of_init_timer0:	
 13118                           
 13119                           	psect	text43
 13120  1D53                     __ptext43:	
 13121 ;; *************** function _init_adc *****************
 13122 ;; Defined at:
 13123 ;;		line 109 in file "user.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;		None
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;		None
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		wreg, status,2, status,0
 13132 ;; Tracked objects:
 13133 ;;		On entry : 0/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13141 ;;Total ram usage:        0 bytes
 13142 ;; Hardware stack levels used:    1
 13143 ;; Hardware stack levels required when called:    2
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_InitApp
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           
 13152                           ;psect for function _init_adc
 13153  1D53                     _init_adc:	
 13154                           
 13155                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 13159  1D53  0021               	movlb	1	; select bank1
 13160  1D54  179E               	bsf	30,7	;volatile
 13161                           
 13162                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 13163  1D55  081E               	movf	30,w	;volatile
 13164  1D56  398F               	andlw	-113
 13165  1D57  3860               	iorlw	96
 13166  1D58  009E               	movwf	30	;volatile
 13167                           
 13168                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 13169  1D59  30FC               	movlw	-4
 13170  1D5A  059E               	andwf	30,f	;volatile
 13171                           
 13172                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 13173  1D5B  141D               	bsf	29,0	;volatile
 13174  1D5C  0008               	return
 13175  1D5D                     __end_of_init_adc:	
 13176                           
 13177                           	psect	text44
 13178  1D39                     __ptext44:	
 13179 ;; *************** function _ConfigureOscillator *****************
 13180 ;; Defined at:
 13181 ;;		line 18 in file "system.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;		None
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;		None
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  1    wreg      void 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2, status,0
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13199 ;;Total ram usage:        0 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    2
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		_main
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           
 13210                           ;psect for function _ConfigureOscillator
 13211  1D39                     _ConfigureOscillator:	
 13212                           
 13213                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13217  1D39  30FC               	movlw	-4
 13218  1D3A  0021               	movlb	1	; select bank1
 13219  1D3B  0599               	andwf	25,f	;volatile
 13220  1D3C  0008               	return
 13221  1D3D                     __end_of_ConfigureOscillator:	
 13222                           
 13223                           	psect	intentry
 13224  0004                     __pintentry:	
 13225 ;; *************** function _isr *****************
 13226 ;; Defined at:
 13227 ;;		line 23 in file "interrupts.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;		None
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;  tmpSubDelay     2    0[BANK0 ] int 
 13232 ;; Return value:  Size  Location     Type
 13233 ;;                  1    wreg      void 
 13234 ;; Registers used:
 13235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13242 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13243 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13244 ;;      Totals:         9       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13245 ;;Total ram usage:       11 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    1
 13248 ;; This function calls:
 13249 ;;		i1_set_leds_top
 13250 ;; This function is called by:
 13251 ;;		Interrupt level 1
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255  0004                     _isr:	
 13256                           
 13257                           ;incstack = 0
 13258                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13259  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13260  0005  3180               	pagesel	$
 13261  0006  0020               	movlb	0	; select bank0
 13262  0007  087F               	movf	127,w
 13263  0008  00FC               	movwf	??_isr+8
 13264                           
 13265                           ;interrupts.c: 24: int tmpSubDelay;
 13266                           ;interrupts.c: 25: extern volatile long timer;
 13267                           ;interrupts.c: 26: extern volatile long sub_timer;
 13268                           ;interrupts.c: 27: extern volatile long tap_timer;
 13269                           ;interrupts.c: 29: extern volatile long baseline_delay_time;
 13270                           ;interrupts.c: 31: extern int top_push_state;
 13271                           ;interrupts.c: 32: extern uint8_t feedback_start;
 13272                           ;interrupts.c: 33: extern volatile long mod_timer;
 13273                           ;interrupts.c: 34: extern volatile long delay_time;
 13274                           ;interrupts.c: 35: if (INTCONbits.TMR0IF == 1) {
 13275  0009  1D0B               	btfss	11,2	;volatile
 13276  000A  2912               	goto	i1l97
 13277                           
 13278                           ;interrupts.c: 36: tmpSubDelay = delay_time;
 13279  000B  0021               	movlb	1	; select bank1
 13280  000C  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
 13281  000D  0020               	movlb	0	; select bank0
 13282  000E  00A1               	movwf	isr@tmpSubDelay+1
 13283  000F  0021               	movlb	1	; select bank1
 13284  0010  085E               	movf	_delay_time^(0+128),w	;volatile
 13285  0011  0020               	movlb	0	; select bank0
 13286  0012  00A0               	movwf	isr@tmpSubDelay
 13287                           
 13288                           ;interrupts.c: 37: timer = timer + 1;
 13289  0013  3001               	movlw	1
 13290  0014  00F4               	movwf	??_isr
 13291  0015  3000               	movlw	0
 13292  0016  00F5               	movwf	??_isr+1
 13293  0017  3000               	movlw	0
 13294  0018  00F6               	movwf	??_isr+2
 13295  0019  3000               	movlw	0
 13296  001A  00F7               	movwf	??_isr+3
 13297  001B  0021               	movlb	1	; select bank1
 13298  001C  0851               	movf	_timer^(0+128),w	;volatile
 13299  001D  07F4               	addwf	??_isr,f
 13300  001E  0852               	movf	(_timer+1)^(0+128),w	;volatile
 13301  001F  3DF5               	addwfc	??_isr+1,f
 13302  0020  0853               	movf	(_timer+2)^(0+128),w	;volatile
 13303  0021  3DF6               	addwfc	??_isr+2,f
 13304  0022  0854               	movf	(_timer+3)^(0+128),w	;volatile
 13305  0023  3DF7               	addwfc	??_isr+3,f
 13306  0024  0877               	movf	??_isr+3,w
 13307  0025  00D4               	movwf	(_timer+3)^(0+128)	;volatile
 13308  0026  0876               	movf	??_isr+2,w
 13309  0027  00D3               	movwf	(_timer+2)^(0+128)	;volatile
 13310  0028  0875               	movf	??_isr+1,w
 13311  0029  00D2               	movwf	(_timer+1)^(0+128)	;volatile
 13312  002A  0874               	movf	??_isr,w
 13313  002B  00D1               	movwf	_timer^(0+128)	;volatile
 13314                           
 13315                           ;interrupts.c: 38: sub_timer = sub_timer + 1;
 13316  002C  3001               	movlw	1
 13317  002D  00F4               	movwf	??_isr
 13318  002E  3000               	movlw	0
 13319  002F  00F5               	movwf	??_isr+1
 13320  0030  3000               	movlw	0
 13321  0031  00F6               	movwf	??_isr+2
 13322  0032  3000               	movlw	0
 13323  0033  00F7               	movwf	??_isr+3
 13324  0034  0849               	movf	_sub_timer^(0+128),w	;volatile
 13325  0035  07F4               	addwf	??_isr,f
 13326  0036  084A               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13327  0037  3DF5               	addwfc	??_isr+1,f
 13328  0038  084B               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13329  0039  3DF6               	addwfc	??_isr+2,f
 13330  003A  084C               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13331  003B  3DF7               	addwfc	??_isr+3,f
 13332  003C  0877               	movf	??_isr+3,w
 13333  003D  00CC               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13334  003E  0876               	movf	??_isr+2,w
 13335  003F  00CB               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13336  0040  0875               	movf	??_isr+1,w
 13337  0041  00CA               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13338  0042  0874               	movf	??_isr,w
 13339  0043  00C9               	movwf	_sub_timer^(0+128)	;volatile
 13340                           
 13341                           ;interrupts.c: 39: tap_timer = tap_timer + 1;
 13342  0044  3001               	movlw	1
 13343  0045  00F4               	movwf	??_isr
 13344  0046  3000               	movlw	0
 13345  0047  00F5               	movwf	??_isr+1
 13346  0048  3000               	movlw	0
 13347  0049  00F6               	movwf	??_isr+2
 13348  004A  3000               	movlw	0
 13349  004B  00F7               	movwf	??_isr+3
 13350  004C  084D               	movf	_tap_timer^(0+128),w	;volatile
 13351  004D  07F4               	addwf	??_isr,f
 13352  004E  084E               	movf	(_tap_timer+1)^(0+128),w	;volatile
 13353  004F  3DF5               	addwfc	??_isr+1,f
 13354  0050  084F               	movf	(_tap_timer+2)^(0+128),w	;volatile
 13355  0051  3DF6               	addwfc	??_isr+2,f
 13356  0052  0850               	movf	(_tap_timer+3)^(0+128),w	;volatile
 13357  0053  3DF7               	addwfc	??_isr+3,f
 13358  0054  0877               	movf	??_isr+3,w
 13359  0055  00D0               	movwf	(_tap_timer+3)^(0+128)	;volatile
 13360  0056  0876               	movf	??_isr+2,w
 13361  0057  00CF               	movwf	(_tap_timer+2)^(0+128)	;volatile
 13362  0058  0875               	movf	??_isr+1,w
 13363  0059  00CE               	movwf	(_tap_timer+1)^(0+128)	;volatile
 13364  005A  0874               	movf	??_isr,w
 13365  005B  00CD               	movwf	_tap_timer^(0+128)	;volatile
 13366                           
 13367                           ;interrupts.c: 40: mod_timer = mod_timer + 1;
 13368  005C  3001               	movlw	1
 13369  005D  00F4               	movwf	??_isr
 13370  005E  3000               	movlw	0
 13371  005F  00F5               	movwf	??_isr+1
 13372  0060  3000               	movlw	0
 13373  0061  00F6               	movwf	??_isr+2
 13374  0062  3000               	movlw	0
 13375  0063  00F7               	movwf	??_isr+3
 13376  0064  0022               	movlb	2	; select bank2
 13377  0065  0824               	movf	_mod_timer^(0+256),w	;volatile
 13378  0066  07F4               	addwf	??_isr,f
 13379  0067  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 13380  0068  3DF5               	addwfc	??_isr+1,f
 13381  0069  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 13382  006A  3DF6               	addwfc	??_isr+2,f
 13383  006B  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13384  006C  3DF7               	addwfc	??_isr+3,f
 13385  006D  0877               	movf	??_isr+3,w
 13386  006E  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13387  006F  0876               	movf	??_isr+2,w
 13388  0070  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13389  0071  0875               	movf	??_isr+1,w
 13390  0072  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13391  0073  0874               	movf	??_isr,w
 13392  0074  00A4               	movwf	_mod_timer^(0+256)	;volatile
 13393                           
 13394                           ;interrupts.c: 41: test_timer++;
 13395  0075  3001               	movlw	1
 13396  0076  0023               	movlb	3	; select bank3
 13397  0077  07E4               	addwf	_test_timer^(0+384),f	;volatile
 13398  0078  3000               	movlw	0
 13399  0079  3DE5               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13400  007A  3000               	movlw	0
 13401  007B  3DE6               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13402  007C  3000               	movlw	0
 13403  007D  3DE7               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13404                           
 13405                           ;interrupts.c: 42: if (feedback_start == 1) {
 13406  007E  0021               	movlb	1	; select bank1
 13407  007F  0357               	decf	_feedback_start^(0+128),w
 13408  0080  1D03               	btfss	3,2
 13409  0081  2899               	goto	i1l4296
 13410                           
 13411                           ;interrupts.c: 43: feedback_timer++;
 13412  0082  3001               	movlw	1
 13413  0083  0022               	movlb	2	; select bank2
 13414  0084  07B8               	addwf	_feedback_timer^(0+256),f	;volatile
 13415  0085  3000               	movlw	0
 13416  0086  3DB9               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13417                           
 13418                           ;interrupts.c: 44: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13419  0087  0839               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13420  0088  0021               	movlb	1	; select bank1
 13421  0089  0265               	subwf	(_long_press_limit+1)^(0+128),w
 13422  008A  1D03               	skipz
 13423  008B  2890               	goto	u423_25
 13424  008C  0022               	movlb	2	; select bank2
 13425  008D  0838               	movf	_feedback_timer^(0+256),w	;volatile
 13426  008E  0021               	movlb	1	; select bank1
 13427  008F  0264               	subwf	_long_press_limit^(0+128),w
 13428  0090                     u423_25:	
 13429  0090  1803               	skipnc
 13430  0091  2899               	goto	i1l4296
 13431  0092  0865               	movf	(_long_press_limit+1)^(0+128),w
 13432  0093  0022               	movlb	2	; select bank2
 13433  0094  00B9               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13434  0095  0021               	movlb	1	; select bank1
 13435  0096  0864               	movf	_long_press_limit^(0+128),w
 13436  0097  0022               	movlb	2	; select bank2
 13437  0098  00B8               	movwf	_feedback_timer^(0+256)	;volatile
 13438  0099                     i1l4296:	
 13439                           
 13440                           ;interrupts.c: 45: }
 13441                           ;interrupts.c: 46: if (longTap_start == 1) {
 13442  0099  0022               	movlb	2	; select bank2
 13443  009A  0351               	decf	_longTap_start^(0+256),w
 13444  009B  1D03               	btfss	3,2
 13445  009C  28B3               	goto	i1l4302
 13446                           
 13447                           ;interrupts.c: 47: longTap_timer++;
 13448  009D  3001               	movlw	1
 13449  009E  07C4               	addwf	_longTap_timer^(0+256),f	;volatile
 13450  009F  3000               	movlw	0
 13451  00A0  3DC5               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13452                           
 13453                           ;interrupts.c: 48: if (longTap_timer > long_press_limit) {
 13454  00A1  0845               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13455  00A2  0021               	movlb	1	; select bank1
 13456  00A3  0265               	subwf	(_long_press_limit+1)^(0+128),w
 13457  00A4  1D03               	skipz
 13458  00A5  28AA               	goto	u425_25
 13459  00A6  0022               	movlb	2	; select bank2
 13460  00A7  0844               	movf	_longTap_timer^(0+256),w	;volatile
 13461  00A8  0021               	movlb	1	; select bank1
 13462  00A9  0264               	subwf	_long_press_limit^(0+128),w
 13463  00AA                     u425_25:	
 13464  00AA  1803               	skipnc
 13465  00AB  28B3               	goto	i1l4302
 13466                           
 13467                           ;interrupts.c: 49: longTap_timer = long_press_limit;
 13468  00AC  0865               	movf	(_long_press_limit+1)^(0+128),w
 13469  00AD  0022               	movlb	2	; select bank2
 13470  00AE  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13471  00AF  0021               	movlb	1	; select bank1
 13472  00B0  0864               	movf	_long_press_limit^(0+128),w
 13473  00B1  0022               	movlb	2	; select bank2
 13474  00B2  00C4               	movwf	_longTap_timer^(0+256)	;volatile
 13475  00B3                     i1l4302:	
 13476                           
 13477                           ;interrupts.c: 50: }
 13478                           ;interrupts.c: 51: }
 13479                           ;interrupts.c: 52: INTCONbits.TMR0IF = 0;
 13480  00B3  110B               	bcf	11,2	;volatile
 13481                           
 13482                           ;interrupts.c: 54: if (adjust_sub_delay == 1) {
 13483  00B4  0022               	movlb	2	; select bank2
 13484  00B5  0328               	decf	_adjust_sub_delay^(0+256),w
 13485  00B6  0429               	iorwf	(_adjust_sub_delay+1)^(0+256),w
 13486  00B7  1D03               	btfss	3,2
 13487  00B8  2912               	goto	i1l97
 13488                           
 13489                           ;interrupts.c: 55: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13490  00B9  0021               	movlb	1	; select bank1
 13491  00BA  084C               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13492  00BB  3A80               	xorlw	128
 13493  00BC  00F4               	movwf	??_isr
 13494  00BD  0861               	movf	(_delay_time+3)^(0+128),w	;volatile
 13495  00BE  3A80               	xorlw	128
 13496  00BF  0274               	subwf	??_isr,w
 13497  00C0  1D03               	skipz
 13498  00C1  28CC               	goto	u427_23
 13499  00C2  0860               	movf	(_delay_time+2)^(0+128),w	;volatile
 13500  00C3  024B               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13501  00C4  1D03               	skipz
 13502  00C5  28CC               	goto	u427_23
 13503  00C6  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
 13504  00C7  024A               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13505  00C8  1D03               	skipz
 13506  00C9  28CC               	goto	u427_23
 13507  00CA  085E               	movf	_delay_time^(0+128),w	;volatile
 13508  00CB  0249               	subwf	_sub_timer^(0+128),w	;volatile
 13509  00CC                     u427_23:	
 13510  00CC  1C03               	skipc
 13511  00CD  2912               	goto	i1l97
 13512  00CE  085A               	movf	_baseline_delay_time^(0+128),w	;volatile
 13513  00CF  00F4               	movwf	??_isr
 13514  00D0  085B               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13515  00D1  00F5               	movwf	??_isr+1
 13516  00D2  085C               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13517  00D3  00F6               	movwf	??_isr+2
 13518  00D4  085D               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13519  00D5  00F7               	movwf	??_isr+3
 13520  00D6  0951               	comf	_timer^(0+128),w	;volatile
 13521  00D7  00F8               	movwf	??_isr+4
 13522  00D8  0952               	comf	(_timer+1)^(0+128),w	;volatile
 13523  00D9  00F9               	movwf	??_isr+5
 13524  00DA  0953               	comf	(_timer+2)^(0+128),w	;volatile
 13525  00DB  00FA               	movwf	??_isr+6
 13526  00DC  0954               	comf	(_timer+3)^(0+128),w	;volatile
 13527  00DD  00FB               	movwf	??_isr+7
 13528  00DE  0AF8               	incf	??_isr+4,f
 13529  00DF  1903               	skipnz
 13530  00E0  0AF9               	incf	??_isr+5,f
 13531  00E1  1903               	skipnz
 13532  00E2  0AFA               	incf	??_isr+6,f
 13533  00E3  1903               	skipnz
 13534  00E4  0AFB               	incf	??_isr+7,f
 13535  00E5  0878               	movf	??_isr+4,w
 13536  00E6  07F4               	addwf	??_isr,f
 13537  00E7  0879               	movf	??_isr+5,w
 13538  00E8  3DF5               	addwfc	??_isr+1,f
 13539  00E9  087A               	movf	??_isr+6,w
 13540  00EA  3DF6               	addwfc	??_isr+2,f
 13541  00EB  087B               	movf	??_isr+7,w
 13542  00EC  3DF7               	addwfc	??_isr+3,f
 13543  00ED  1BF7               	btfsc	??_isr+3,7
 13544  00EE  28FC               	goto	i1l4310
 13545  00EF  0877               	movf	??_isr+3,w
 13546  00F0  1D03               	btfss	3,2
 13547  00F1  2912               	goto	i1l97
 13548  00F2  0876               	movf	??_isr+2,w
 13549  00F3  1D03               	btfss	3,2
 13550  00F4  2912               	goto	i1l97
 13551  00F5  0875               	movf	??_isr+1,w
 13552  00F6  1D03               	btfss	3,2
 13553  00F7  2912               	goto	i1l97
 13554  00F8  3004               	movlw	4
 13555  00F9  0274               	subwf	??_isr,w
 13556  00FA  1803               	btfsc	3,0
 13557  00FB  2912               	goto	i1l97
 13558  00FC                     i1l4310:	
 13559                           
 13560                           ;interrupts.c: 56: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13561  00FC  0951               	comf	_timer^(0+128),w	;volatile
 13562  00FD  00F4               	movwf	??_isr
 13563  00FE  0952               	comf	(_timer+1)^(0+128),w	;volatile
 13564  00FF  00F5               	movwf	??_isr+1
 13565  0100  0AF4               	incf	??_isr,f
 13566  0101  1903               	skipnz
 13567  0102  0AF5               	incf	??_isr+1,f
 13568  0103  085A               	movf	_baseline_delay_time^(0+128),w	;volatile
 13569  0104  0774               	addwf	??_isr,w
 13570  0105  00F6               	movwf	??_isr+2
 13571  0106  085B               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13572  0107  3D75               	addwfc	??_isr+1,w
 13573  0108  00F7               	movwf	??_isr+3
 13574  0109  0849               	movf	_sub_timer^(0+128),w	;volatile
 13575  010A  0776               	addwf	??_isr+2,w
 13576  010B  0020               	movlb	0	; select bank0
 13577  010C  00A0               	movwf	isr@tmpSubDelay
 13578  010D  0021               	movlb	1	; select bank1
 13579  010E  084A               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13580  010F  3D77               	addwfc	??_isr+3,w
 13581  0110  0020               	movlb	0	; select bank0
 13582  0111  00A1               	movwf	isr@tmpSubDelay+1
 13583  0112                     i1l97:	
 13584                           
 13585                           ;interrupts.c: 57: }
 13586                           ;interrupts.c: 58: }
 13587                           ;interrupts.c: 59: }
 13588                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1) {
 13589  0112  0020               	movlb	0	; select bank0
 13590  0113  086A               	movf	_longTap_state,w	;volatile
 13591  0114  1D03               	btfss	3,2
 13592  0115  2963               	goto	i1l4332
 13593  0116  086B               	movf	_doubleTap_state,w	;volatile
 13594  0117  1D03               	btfss	3,2
 13595  0118  2963               	goto	i1l4332
 13596                           
 13597                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 13598  0119  0021               	movlb	1	; select bank1
 13599  011A  0854               	movf	(_timer+3)^(0+128),w	;volatile
 13600  011B  3A80               	xorlw	128
 13601  011C  00F4               	movwf	??_isr
 13602  011D  085D               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13603  011E  3A80               	xorlw	128
 13604  011F  0274               	subwf	??_isr,w
 13605  0120  1D03               	skipz
 13606  0121  292C               	goto	u431_23
 13607  0122  085C               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13608  0123  0253               	subwf	(_timer+2)^(0+128),w	;volatile
 13609  0124  1D03               	skipz
 13610  0125  292C               	goto	u431_23
 13611  0126  085B               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13612  0127  0252               	subwf	(_timer+1)^(0+128),w	;volatile
 13613  0128  1D03               	skipz
 13614  0129  292C               	goto	u431_23
 13615  012A  085A               	movf	_baseline_delay_time^(0+128),w	;volatile
 13616  012B  0251               	subwf	_timer^(0+128),w	;volatile
 13617  012C                     u431_23:	
 13618  012C  1C03               	skipc
 13619  012D  2951               	goto	i1l4328
 13620                           
 13621                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 13622  012E  0022               	movlb	2	; select bank2
 13623  012F  160D               	bsf	13,4	;volatile
 13624                           
 13625                           ;interrupts.c: 80: timer = 0;
 13626  0130  3000               	movlw	0
 13627  0131  0021               	movlb	1	; select bank1
 13628  0132  00D4               	movwf	(_timer+3)^(0+128)	;volatile
 13629  0133  3000               	movlw	0
 13630  0134  00D3               	movwf	(_timer+2)^(0+128)	;volatile
 13631  0135  3000               	movlw	0
 13632  0136  00D2               	movwf	(_timer+1)^(0+128)	;volatile
 13633  0137  3000               	movlw	0
 13634  0138  00D1               	movwf	_timer^(0+128)	;volatile
 13635                           
 13636                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 13637  0139  0022               	movlb	2	; select bank2
 13638  013A  0348               	decf	_reset_sub_delay^(0+256),w
 13639  013B  0449               	iorwf	(_reset_sub_delay+1)^(0+256),w
 13640  013C  1D03               	btfss	3,2
 13641  013D  2951               	goto	i1l4328
 13642                           
 13643                           ;interrupts.c: 82: CCPR1 = delay_counter;
 13644  013E  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13645  013F  0025               	movlb	5	; select bank5
 13646  0140  0092               	movwf	18	;volatile
 13647  0141  0022               	movlb	2	; select bank2
 13648  0142  0834               	movf	_delay_counter^(0+256),w	;volatile
 13649  0143  0025               	movlb	5	; select bank5
 13650  0144  0091               	movwf	17	;volatile
 13651                           
 13652                           ;interrupts.c: 83: reset_sub_delay = 0;
 13653  0145  0022               	movlb	2	; select bank2
 13654  0146  01C8               	clrf	_reset_sub_delay^(0+256)
 13655  0147  01C9               	clrf	(_reset_sub_delay+1)^(0+256)
 13656                           
 13657                           ;interrupts.c: 84: sub_timer = delay_time;
 13658  0148  0021               	movlb	1	; select bank1
 13659  0149  0861               	movf	(_delay_time+3)^(0+128),w	;volatile
 13660  014A  00CC               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13661  014B  0860               	movf	(_delay_time+2)^(0+128),w	;volatile
 13662  014C  00CB               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13663  014D  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
 13664  014E  00CA               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13665  014F  085E               	movf	_delay_time^(0+128),w	;volatile
 13666  0150  00C9               	movwf	_sub_timer^(0+128)	;volatile
 13667  0151                     i1l4328:	
 13668                           
 13669                           ;interrupts.c: 85: }
 13670                           ;interrupts.c: 86: }
 13671                           ;interrupts.c: 88: if (timer >= 30) {
 13672  0151  0021               	movlb	1	; select bank1
 13673  0152  1BD4               	btfsc	(_timer+3)^(0+128),7	;volatile
 13674  0153  2963               	goto	i1l4332
 13675  0154  0854               	movf	(_timer+3)^(0+128),w	;volatile
 13676  0155  1D03               	btfss	3,2
 13677  0156  2961               	goto	i1l4330
 13678  0157  0853               	movf	(_timer+2)^(0+128),w	;volatile
 13679  0158  1D03               	btfss	3,2
 13680  0159  2961               	goto	i1l4330
 13681  015A  0852               	movf	(_timer+1)^(0+128),w	;volatile
 13682  015B  1D03               	btfss	3,2
 13683  015C  2961               	goto	i1l4330
 13684  015D  301E               	movlw	30
 13685  015E  0251               	subwf	_timer^(0+128),w	;volatile
 13686  015F  1C03               	btfss	3,0
 13687  0160  2963               	goto	i1l4332
 13688  0161                     i1l4330:	
 13689                           
 13690                           ;interrupts.c: 90: LATBbits.LATB4 = 0;
 13691  0161  0022               	movlb	2	; select bank2
 13692  0162  120D               	bcf	13,4	;volatile
 13693  0163                     i1l4332:	
 13694                           
 13695                           ;interrupts.c: 92: }
 13696                           ;interrupts.c: 93: }
 13697                           ;interrupts.c: 96: if (sub_timer >= tmpSubDelay) {
 13698  0163  0020               	movlb	0	; select bank0
 13699  0164  0820               	movf	isr@tmpSubDelay,w
 13700  0165  00F4               	movwf	??_isr
 13701  0166  0821               	movf	isr@tmpSubDelay+1,w
 13702  0167  00F5               	movwf	??_isr+1
 13703  0168  3000               	movlw	0
 13704  0169  1BF5               	btfsc	??_isr+1,7
 13705  016A  30FF               	movlw	255
 13706  016B  00F6               	movwf	??_isr+2
 13707  016C  00F7               	movwf	??_isr+3
 13708  016D  0021               	movlb	1	; select bank1
 13709  016E  084C               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13710  016F  3A80               	xorlw	128
 13711  0170  00F8               	movwf	??_isr+4
 13712  0171  0877               	movf	??_isr+3,w
 13713  0172  3A80               	xorlw	128
 13714  0173  0278               	subwf	??_isr+4,w
 13715  0174  1D03               	skipz
 13716  0175  2980               	goto	u434_23
 13717  0176  0876               	movf	??_isr+2,w
 13718  0177  024B               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13719  0178  1D03               	skipz
 13720  0179  2980               	goto	u434_23
 13721  017A  0875               	movf	??_isr+1,w
 13722  017B  024A               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13723  017C  1D03               	skipz
 13724  017D  2980               	goto	u434_23
 13725  017E  0874               	movf	??_isr,w
 13726  017F  0249               	subwf	_sub_timer^(0+128),w	;volatile
 13727  0180                     u434_23:	
 13728  0180  1C03               	skipc
 13729  0181  29A1               	goto	i1l4342
 13730                           
 13731                           ;interrupts.c: 97: if (suspend_blink == 0) {
 13732  0182  0858               	movf	_suspend_blink^(0+128),w	;volatile
 13733  0183  1D03               	btfss	3,2
 13734  0184  2990               	goto	i1l4338
 13735                           
 13736                           ;interrupts.c: 98: set_leds_top(top_push_state, 1);
 13737  0185  0867               	movf	(_top_push_state+1)^(0+128),w
 13738  0186  00F1               	movwf	i1set_leds_top@x+1
 13739  0187  0866               	movf	_top_push_state^(0+128),w
 13740  0188  00F0               	movwf	i1set_leds_top@x
 13741  0189  3001               	movlw	1
 13742  018A  00F2               	movwf	i1set_leds_top@ledState
 13743  018B  3000               	movlw	0
 13744  018C  00F3               	movwf	i1set_leds_top@ledState+1
 13745  018D  3192  226D  3180   	fcall	i1_set_leds_top
 13746  0190                     i1l4338:	
 13747                           
 13748                           ;interrupts.c: 99: }
 13749                           ;interrupts.c: 100: tmpSubDelay = delay_time;
 13750  0190  0021               	movlb	1	; select bank1
 13751  0191  085F               	movf	(_delay_time+1)^(0+128),w	;volatile
 13752  0192  0020               	movlb	0	; select bank0
 13753  0193  00A1               	movwf	isr@tmpSubDelay+1
 13754  0194  0021               	movlb	1	; select bank1
 13755  0195  085E               	movf	_delay_time^(0+128),w	;volatile
 13756  0196  0020               	movlb	0	; select bank0
 13757  0197  00A0               	movwf	isr@tmpSubDelay
 13758                           
 13759                           ;interrupts.c: 101: sub_timer = 0;
 13760  0198  3000               	movlw	0
 13761  0199  0021               	movlb	1	; select bank1
 13762  019A  00CC               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13763  019B  3000               	movlw	0
 13764  019C  00CB               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13765  019D  3000               	movlw	0
 13766  019E  00CA               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13767  019F  3000               	movlw	0
 13768  01A0  00C9               	movwf	_sub_timer^(0+128)	;volatile
 13769  01A1                     i1l4342:	
 13770                           
 13771                           ;interrupts.c: 102: }
 13772                           ;interrupts.c: 104: if (sub_timer >= 20) {
 13773  01A1  1BCC               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 13774  01A2  29BD               	goto	i1l4348
 13775  01A3  084C               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13776  01A4  1D03               	btfss	3,2
 13777  01A5  29B0               	goto	i1l4344
 13778  01A6  084B               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13779  01A7  1D03               	btfss	3,2
 13780  01A8  29B0               	goto	i1l4344
 13781  01A9  084A               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13782  01AA  1D03               	btfss	3,2
 13783  01AB  29B0               	goto	i1l4344
 13784  01AC  3014               	movlw	20
 13785  01AD  0249               	subwf	_sub_timer^(0+128),w	;volatile
 13786  01AE  1C03               	btfss	3,0
 13787  01AF  29BD               	goto	i1l4348
 13788  01B0                     i1l4344:	
 13789                           
 13790                           ;interrupts.c: 105: if (suspend_blink == 0) {
 13791  01B0  0858               	movf	_suspend_blink^(0+128),w	;volatile
 13792  01B1  1D03               	btfss	3,2
 13793  01B2  29BD               	goto	i1l4348
 13794                           
 13795                           ;interrupts.c: 106: set_leds_top(top_push_state, 0);
 13796  01B3  0867               	movf	(_top_push_state+1)^(0+128),w
 13797  01B4  00F1               	movwf	i1set_leds_top@x+1
 13798  01B5  0866               	movf	_top_push_state^(0+128),w
 13799  01B6  00F0               	movwf	i1set_leds_top@x
 13800  01B7  3000               	movlw	0
 13801  01B8  00F2               	movwf	i1set_leds_top@ledState
 13802  01B9  00F3               	movwf	i1set_leds_top@ledState+1
 13803  01BA  3192  226D  3180   	fcall	i1_set_leds_top
 13804  01BD                     i1l4348:	
 13805                           
 13806                           ;interrupts.c: 107: }
 13807                           ;interrupts.c: 108: }
 13808                           ;interrupts.c: 111: if (preset_programmning_on == 1) {
 13809  01BD  0022               	movlb	2	; select bank2
 13810  01BE  0355               	decf	_preset_programmning_on^(0+256),w
 13811  01BF  1D03               	btfss	3,2
 13812  01C0  29E6               	goto	i1l4360
 13813                           
 13814                           ;interrupts.c: 112: preset_blink++;
 13815  01C1  3001               	movlw	1
 13816  01C2  00F4               	movwf	??_isr
 13817  01C3  0874               	movf	??_isr,w
 13818  01C4  07D4               	addwf	_preset_blink^(0+256),f
 13819                           
 13820                           ;interrupts.c: 114: if (preset_blink >= blink_delay) {
 13821  01C5  0859               	movf	(_blink_delay+1)^(0+256),w
 13822  01C6  3A80               	xorlw	128
 13823  01C7  3C80               	sublw	128
 13824  01C8  1D03               	skipz
 13825  01C9  29CC               	goto	u439_25
 13826  01CA  0858               	movf	_blink_delay^(0+256),w
 13827  01CB  0254               	subwf	_preset_blink^(0+256),w
 13828  01CC                     u439_25:	
 13829  01CC  1C03               	skipc
 13830  01CD  29E4               	goto	i1l113
 13831                           
 13832                           ;interrupts.c: 115: LATBbits.LATB1 = 1;
 13833  01CE  0022               	movlb	2	; select bank2
 13834  01CF  148D               	bsf	13,1	;volatile
 13835                           
 13836                           ;interrupts.c: 116: if (preset_blink > blink_delay*2) {
 13837  01D0  0859               	movf	(_blink_delay+1)^(0+256),w
 13838  01D1  00F5               	movwf	??_isr+1
 13839  01D2  0858               	movf	_blink_delay^(0+256),w
 13840  01D3  00F4               	movwf	??_isr
 13841  01D4  35F4               	lslf	??_isr,f
 13842  01D5  0DF5               	rlf	??_isr+1,f
 13843  01D6  0875               	movf	??_isr+1,w
 13844  01D7  3A80               	xorlw	128
 13845  01D8  00F6               	movwf	??_isr+2
 13846  01D9  3080               	movlw	128
 13847  01DA  0276               	subwf	??_isr+2,w
 13848  01DB  1D03               	skipz
 13849  01DC  29DF               	goto	u440_25
 13850  01DD  0854               	movf	_preset_blink^(0+256),w
 13851  01DE  0274               	subwf	??_isr,w
 13852  01DF                     u440_25:	
 13853  01DF  1803               	skipnc
 13854  01E0  29EB               	goto	i1l118
 13855                           
 13856                           ;interrupts.c: 117: preset_blink = 0;
 13857  01E1  0022               	movlb	2	; select bank2
 13858  01E2  01D4               	clrf	_preset_blink^(0+256)
 13859                           
 13860                           ;interrupts.c: 118: }
 13861                           ;interrupts.c: 120: } else {
 13862  01E3  29EB               	goto	i1l118
 13863  01E4                     i1l113:	
 13864                           
 13865                           ;interrupts.c: 121: LATBbits.LATB1 = 0;
 13866  01E4  0022               	movlb	2	; select bank2
 13867  01E5  29EA               	goto	i1l4364
 13868  01E6                     i1l4360:	
 13869                           ;interrupts.c: 122: }
 13870                           ;interrupts.c: 124: } else {
 13871                           
 13872                           
 13873                           ;interrupts.c: 125: if (preset_blink > 0) {
 13874  01E6  0854               	movf	_preset_blink^(0+256),w
 13875  01E7  1903               	btfsc	3,2
 13876  01E8  29EB               	goto	i1l118
 13877                           
 13878                           ;interrupts.c: 126: preset_blink = 0;
 13879  01E9  01D4               	clrf	_preset_blink^(0+256)
 13880  01EA                     i1l4364:	
 13881                           
 13882                           ;interrupts.c: 127: LATBbits.LATB1 = 0;
 13883  01EA  108D               	bcf	13,1	;volatile
 13884  01EB                     i1l118:	
 13885  01EB  087C               	movf	??_isr+8,w
 13886  01EC  0020               	movlb	0	; select bank0
 13887  01ED  00FF               	movwf	127
 13888  01EE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13889  01EF  0009               	retfie
 13890  01F0                     __end_of_isr:	
 13891                           
 13892                           	psect	text46
 13893  126D                     __ptext46:	
 13894 ;; *************** function i1_set_leds_top *****************
 13895 ;; Defined at:
 13896 ;;		line 16 in file "LEDs.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;  x               2    0[COMMON] int 
 13899 ;;  ledState        2    2[COMMON] int 
 13900 ;; Auto vars:     Size  Location     Type
 13901 ;;		None
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  1    wreg      void 
 13904 ;; Registers used:
 13905 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 0/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13914 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13915 ;;Total ram usage:        4 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; This function calls:
 13918 ;;		Nothing
 13919 ;; This function is called by:
 13920 ;;		_isr
 13921 ;; This function uses a non-reentrant model
 13922 ;;
 13923                           
 13924                           
 13925                           ;psect for function i1_set_leds_top
 13926  126D                     i1_set_leds_top:	
 13927                           
 13928                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13929                           
 13930                           ;incstack = 0
 13931                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13932  126D  0027               	movlb	7	; select bank7
 13933  126E  100C               	bcf	12,0	;volatile
 13934                           
 13935                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13936  126F  108C               	bcf	12,1	;volatile
 13937                           
 13938                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13939  1270  110C               	bcf	12,2	;volatile
 13940                           
 13941                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13942  1271  118C               	bcf	12,3	;volatile
 13943                           
 13944                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13945  1272  120C               	bcf	12,4	;volatile
 13946                           
 13947                           ;LEDs.c: 22: switch (x) {
 13948  1273  2A98               	goto	i1l4280
 13949  1274                     i1l4268:	
 13950                           ;LEDs.c: 23: case 1:
 13951                           
 13952                           
 13953                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13954  1274  0C72               	rrf	i1set_leds_top@ledState,w
 13955  1275  1C03               	skipc
 13956  1276  100C               	bcf	12,0	;volatile
 13957  1277  1803               	skipnc
 13958  1278  140C               	bsf	12,0	;volatile
 13959                           
 13960                           ;LEDs.c: 25: break;
 13961  1279  0008               	return
 13962  127A                     i1l4270:	
 13963                           ;LEDs.c: 26: case 2:
 13964                           
 13965                           
 13966                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13967  127A  0C72               	rrf	i1set_leds_top@ledState,w
 13968  127B  1C03               	skipc
 13969  127C  108C               	bcf	12,1	;volatile
 13970  127D  1803               	skipnc
 13971  127E  148C               	bsf	12,1	;volatile
 13972                           
 13973                           ;LEDs.c: 28: break;
 13974  127F  0008               	return
 13975  1280                     i1l4272:	
 13976                           ;LEDs.c: 29: case 3:
 13977                           
 13978                           
 13979                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13980  1280  0C72               	rrf	i1set_leds_top@ledState,w
 13981  1281  1C03               	skipc
 13982  1282  110C               	bcf	12,2	;volatile
 13983  1283  1803               	skipnc
 13984  1284  150C               	bsf	12,2	;volatile
 13985                           
 13986                           ;LEDs.c: 31: break;
 13987  1285  0008               	return
 13988  1286                     i1l4274:	
 13989                           ;LEDs.c: 32: case 4:
 13990                           
 13991                           
 13992                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13993  1286  0C72               	rrf	i1set_leds_top@ledState,w
 13994  1287  1C03               	skipc
 13995  1288  118C               	bcf	12,3	;volatile
 13996  1289  1803               	skipnc
 13997  128A  158C               	bsf	12,3	;volatile
 13998                           
 13999                           ;LEDs.c: 34: break;
 14000  128B  0008               	return
 14001  128C                     i1l4276:	
 14002                           ;LEDs.c: 35: case 5:
 14003                           
 14004                           
 14005                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14006  128C  0C72               	rrf	i1set_leds_top@ledState,w
 14007  128D  1C03               	skipc
 14008  128E  120C               	bcf	12,4	;volatile
 14009  128F  1803               	skipnc
 14010  1290  160C               	bsf	12,4	;volatile
 14011                           
 14012                           ;LEDs.c: 39: break;
 14013                           
 14014                           ;LEDs.c: 38: case 6:
 14015                           
 14016                           ;LEDs.c: 37: break;
 14017  1291  0008               	return
 14018  1292                     i1l706:	
 14019                           ;LEDs.c: 40: case 100:
 14020                           
 14021                           
 14022                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14023  1292  140C               	bsf	12,0	;volatile
 14024                           
 14025                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14026  1293  148C               	bsf	12,1	;volatile
 14027                           
 14028                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14029  1294  150C               	bsf	12,2	;volatile
 14030                           
 14031                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14032  1295  158C               	bsf	12,3	;volatile
 14033                           
 14034                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14035  1296  160C               	bsf	12,4	;volatile
 14036                           
 14037                           ;LEDs.c: 47: }
 14038                           
 14039                           ;LEDs.c: 46: break;
 14040  1297  0008               	return
 14041  1298                     i1l4280:	
 14042                           
 14043                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14044                           ; Switch size 1, requested type "space"
 14045                           ; Number of cases is 1, Range of values is 0 to 0
 14046                           ; switch strategies available:
 14047                           ; Name         Instructions Cycles
 14048                           ; simple_byte            4     3 (average)
 14049                           ; direct_byte            8     6 (fixed)
 14050                           ; jumptable            260     6 (fixed)
 14051                           ;	Chosen strategy is simple_byte
 14052  1298  0871               	movf	i1set_leds_top@x+1,w
 14053  1299  3A00               	xorlw	0	; case 0
 14054  129A  1903               	skipnz
 14055  129B  2A9D               	goto	i1l6266
 14056  129C  2AB4               	goto	i1l707
 14057  129D                     i1l6266:	
 14058                           
 14059                           ; Switch size 1, requested type "space"
 14060                           ; Number of cases is 7, Range of values is 1 to 100
 14061                           ; switch strategies available:
 14062                           ; Name         Instructions Cycles
 14063                           ; simple_byte           22    12 (average)
 14064                           ; direct_byte          209     9 (fixed)
 14065                           ; jumptable            263     9 (fixed)
 14066                           ;	Chosen strategy is simple_byte
 14067  129D  0870               	movf	i1set_leds_top@x,w
 14068  129E  3A01               	xorlw	1	; case 1
 14069  129F  1903               	skipnz
 14070  12A0  2A74               	goto	i1l4268
 14071  12A1  3A03               	xorlw	3	; case 2
 14072  12A2  1903               	skipnz
 14073  12A3  2A7A               	goto	i1l4270
 14074  12A4  3A01               	xorlw	1	; case 3
 14075  12A5  1903               	skipnz
 14076  12A6  2A80               	goto	i1l4272
 14077  12A7  3A07               	xorlw	7	; case 4
 14078  12A8  1903               	skipnz
 14079  12A9  2A86               	goto	i1l4274
 14080  12AA  3A01               	xorlw	1	; case 5
 14081  12AB  1903               	skipnz
 14082  12AC  2A8C               	goto	i1l4276
 14083  12AD  3A03               	xorlw	3	; case 6
 14084  12AE  1903               	skipnz
 14085  12AF  2AB4               	goto	i1l707
 14086  12B0  3A62               	xorlw	98	; case 100
 14087  12B1  1903               	skipnz
 14088  12B2  2A92               	goto	i1l706
 14089  12B3  2AB4               	goto	i1l707
 14090  12B4                     i1l707:	
 14091  12B4  0008               	return
 14092  12B5                     __end_ofi1_set_leds_top:	
 14093  007E                     btemp	set	126	;btemp
 14094  007E                     int$flags	set	126
 14095  007E                     wtemp	set	126
 14096  007E                     wtemp0	set	126
 14097  0080                     wtemp1	set	128
 14098  0082                     wtemp2	set	130
 14099  0084                     wtemp3	set	132
 14100  0086                     wtemp4	set	134
 14101  0088                     wtemp5	set	136
 14102  007F                     wtemp6	set	127
 14103  007E                     ttemp	set	126
 14104  007E                     ttemp0	set	126
 14105  0081                     ttemp1	set	129
 14106  0084                     ttemp2	set	132
 14107  0087                     ttemp3	set	135
 14108  007F                     ttemp4	set	127
 14109  007E                     ltemp	set	126
 14110  007E                     ltemp0	set	126
 14111  0082                     ltemp1	set	130
 14112  0086                     ltemp2	set	134
 14113  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1092
    BSS         214
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     73      76
    BANK1            80     41      74
    BANK2            80      0      79
    BANK3            80      0      76
    BANK4            80     10      72
    BANK5            80      0      62
    BANK6            80      0      62
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0      64
    BANK10           78      0      62
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->_map
    _updateSwitchTap->___aldiv
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___lmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   65647
                                             26 BANK1     15    15      0
                                              0 BANK4     10    10      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3448
                                             29 BANK0      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4821
                                             24 BANK0      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2210
                                             20 BANK0      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    8008
                                             27 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4117
                                             20 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3891
                                             20 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11643
                                             14 BANK1     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                              0 BANK1     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                             10 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3256
                                             20 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2394
                                             20 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     4      8    1567
                                             29 BANK0     12     4      8
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                             14 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14370
                                             55 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              2 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             23 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3560
                                             39 BANK0     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                             10 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2398
                                             24 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2364
                                             20 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1824
                                             14 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     444
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     599
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2805
                                             10 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              2 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              6 BANK0      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0     261
                                              4 COMMON     9     9      0
                                              0 BANK0      2     2      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___lmul (ARG)
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      A      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3E      15       77.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     321      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      50      20      100.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      3E      26       79.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     321      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 28 22:34:05 2016

                     _update_mode 11A0                      ___altoft@exp 0030                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0031                      ___awdiv@sign 0028                _topTactile_pressed 0157  
      setDoublePressState@f_state 0034                   _updateSwitchTap 052E                      ___ftadd@exp1 0036  
                    ___ftadd@exp2 0035                      ___ftadd@sign 0034                               l332 0EBE  
                             l334 0F23                               l336 0F43                               l354 1F3B  
                             l711 1F51                               l536 1E10                               l713 1F54  
                             l529 0944                               l714 1F57                               l706 1425  
                             l298 0AA1                               l715 1F5A                               l707 1449  
            __size_of_adc_convert 0019                               l716 1F5D                               l565 1550  
                             l718 1F60                               l719 1F84                               l850 123C  
                             l854 1263                               l862 12CA                               l880 11D9  
                             l866 12FA                               l876 11C6                               l878 11C8  
                             l879 11CB                               _PR2 001B      solidring_tactiles@ring_delay 0036  
                             _map 1618                               _isr 0004                               _tap 01A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 00B5           __end_of_set_leds_bottom 1F85  
                    __CFG_LVP$OFF 0000                      ___ftdiv@cntr 0051                      ___ftdiv@sign 0056  
                            _B25k 03A0                              l1215 0544                              l1229 05FE  
                            l1520 09E9                              l1089 0799                              l1383 0811  
                            l1580 15FE                              l5102 0832                              l1496 1490  
                            l5120 0879                              l5112 0860                              l5104 0840  
                            l1497 1498                              l1489 147D                              l5202 0A28  
                            l5044 1209                              l5212 16BA                              l5116 086B  
                            l5132 100D                              l5142 0972                              l5152 0988  
                            l5240 172A                              l5232 1711                              l5312 15AA  
                            l5072 1EA2                              l5170 09B5                              l5146 0979  
                            l5218 16D0                              l5330 15DA                              l5172 09BF  
                            l5164 09A2                              l5260 1779                              l5340 1601  
                            l5332 15E8                              l5182 09DB                              l5174 09C4  
                            l5254 1763                              l5094 0822                              l5414 1231  
                            l5510 073F                              ?_map 0057                              l5192 0A0D  
                            l5184 09E5                              l5176 09C8                              l5272 17B4  
                            l5424 1258                              l5344 160F                              l5600 0555  
                            l5434 12BF                              l5338 15F5                              l5530 076E  
                            l5506 072C                              l5188 09FB                              l5284 17D0  
                            l5276 17BC                              l5444 12E6                              l6260 08AF  
                            l5532 0776                              l6262 1432                              l5390 156B  
                            l4910 1469                              l4902 1453                              l5710 0895  
                            l5518 074D                              l5550 079D                              l6264 1F6D  
                            l5288 17D8                              l5712 0899                              l5720 08AA  
                            l5560 07BF                              l5544 078C                              l5640 05DD  
                            l5624 05A1                              l5616 0579                              l5464 11CE  
                            l4906 145A                              l4842 1EF1                              l5714 089F  
                            l5722 08C3                              l5562 07C4                              l5570 07D6  
                            l5618 0596                              l5466 11DD                              l6258 0E8B  
                            l4860 140D                              l5388 1563                              l4916 1482  
                            l4908 1464                              l5716 08A3                              l5708 0891  
                            l5556 07B7                              l5636 05C6                              l4862 1415  
                            l4918 148A                              l5742 1F9A                              l4846 1EFB  
                            l5670 06BD                              l5638 05CE                              l5902 0DCD  
                            l4864 141D                              l4856 13FD                              l5744 1FAA  
                            l5664 064D                              l5656 0641                              l5648 05F6  
                            l5920 0E1C                              l5832 0AA5                              l4858 1405  
                            l5762 13BA                              l5666 0697                              l5594 0539  
                            l5834 0AA8                              l5818 0A7B                              l4892 1F67  
                            l4868 142C                              l5780 13E0                              l5772 13C2  
                            l5756 13AF                              l5940 0E62                              l5932 0E4B  
                            l5924 0E2B                              l5916 0E13                              ?_isr 0070  
                            l5774 13CE                              l5678 06FD                              l5862 0B7B  
                            l5854 0B2A                              l5784 13E9                              l5960 0EC0  
                            l5936 0E56                              l5928 0E40                              l5952 0E85  
                            l5970 0F25                              l5946 0E7F                              l5954 0E9F  
                            l5890 0CF9                              l5874 0C1A                              l5866 0BBB  
                            l5788 13F1                              l5948 0E82                              l4998 14E4  
                            l5894 0D43                              l5886 0CB9                              l5878 0C5A  
                            l5992 0FBD                              l5976 0F45                              l5994 0F70  
                            l5898 0D83                              l5996 0FC3                              u5035 14F1  
                            u5115 1DDD                              u5060 1207                              u5055 11EB  
                            u6015 0725                              u6025 0738                              u5155 0835  
                            u5325 09A3                              u5085 1DC6                              u5415 09DC  
                            u5175 0841                              u5095 1E95                              u6055 0757  
                            u5505 1712                              u5185 0855                              u6145 07A8  
                            u6305 05AB                              u5355 09B6                              u5515 1721  
                            u5195 0861                              u5525 172B                              u5605 17C3  
                            u6405 066B                              u6415 067F                              u4905 145F  
                            u5385 09C9                              u5635 17D9                              u5715 15DB  
                            u6435 069C                              u6275 0582                              u5820 1569  
                            u5805 1549                              u4925 1478                              u4845 1EFC  
                            u5485 16E2                              u5645 17DF                              u5565 1785  
                            u5815 155C                              u6535 13C5                              u4855 1F03  
                            u5495 16F2                              u5575 1795                              u6375 060F  
                            u6615 0A97                              i1l97 0112                              u4945 1485  
                            u5745 15F6                              u6465 093D                              u6385 0626  
                            u6705 0CF7                              u6555 13CF                              u5595 17BD  
                            u6395 0656                              u6715 0D61                              u6635 0B08  
                            u6485 1F9F                              u6565 13D9                              u5685 15B1  
                            u6805 0F10                              u6733 0DF6                              u6725 0D81  
                            u6645 0B28                              u5775 1E46                              u6575 13E1  
                            u6815 0F1E                              u6655 0B99                              u5785 1E4C  
                            u4985 149F                              u5945 12DF                              u6825 0F30  
                            u6665 0BB9                              u6835 0F3E                              u6675 0C38  
                            u5885 1251                              u6685 0C58                              u5975 11B3  
                            u6863 0FB5                              u6855 0F9D                              u6775 0E25  
                            u6695 0CD7                              u6785 0EAB                              u6795 0EB9  
                   _star_tactiles 14AF                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 0150                              _mod1 0520                              _mod2 0220  
                            _mod3 02A0                              _mod4 0320                              _mod5 2576  
                            _main 0A40                      ___ftpack@arg 0022                      ___ftpack@exp 0025  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              fsr1l 0006                              map@x 0057  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
        __end_of_setFeedbackState 1DD3                              start 01F0                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 1D41      updateSwitchTap@tapCntDivisor 0043  
    __end_of_setSwitchBypassState 1227                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 0045                      ___ftmul@sign 0046                   __end_of_InitApp 1EE8  
               ??_restoreLEDState 0022                      ___fttol@exp1 00AD                             ??_map 0066  
                    ___fttol@lval 00A9                             ??_isr 0074                   _switchBypass_up 0168  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 0882                             ?_main 0070  
                 __end_of___awdiv 13F6                   __end_of___ftadd 0A40                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 174C                   __end_of___ftneg 1D53                   __end_of___ftmul 1800  
                 ___awdiv@divisor 0022                   __end_of___fttol 1618                             i1l113 01E4  
                           i1l118 01EB                             i1l706 1292                             i1l707 12B4  
                 ___awdiv@counter 0027                             _iB25k 0420               _ConfigureOscillator 1D39  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 0026  
                 _switchTap_state 016E                 ??_setLongTapState 0024                     ___awtoft@sign 002F  
                           _myBuf 04A0                     ___ftpack@sign 0026                             _timer 00D1  
                  ?_star_tactiles 0070                             main@i 0264                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 1F4A                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 126D                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
           set_subdivision@scalar 00B7              ?_ConfigureOscillator 0070                _getCurrentLEDState 1D94  
              _updateSwitchBypass 0716           __end_of_updateSwitchTap 0716                   __initialization 01F2  
         _updateSwitchBypassState 1001                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 0882                            ??_main 00BA                     ___fttol@sign1 00A8  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 111E                    _feedback_timer 0138  
                  _feedback_state 0069                    _feedback_start 00D7                  ?_set_leds_bottom 0022  
                __end_of___altoft 1FC2                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0024               _baseline_delay_time 00DA              ??_getCurrentLEDState 0022  
                __end_of___awtoft 1024                  __end_of___ftpack 14AF              ??_updateSwitchBypass 0038  
                          i1l4310 00FC                            i1l4302 00B3                            i1l4330 0161  
                          i1l4332 0163                            i1l4270 127A                            i1l4342 01A1  
                          i1l4272 1280                            i1l4280 1298                            i1l4360 01E6  
                          i1l4344 01B0                            i1l4328 0151                            i1l4274 1286  
                          i1l4338 0190                            i1l4276 128C                            i1l4268 1274  
                          i1l4364 01EA                            i1l4348 01BD                            i1l4296 0099  
                          i1l6266 129D                            u431_23 012C                            u423_25 0090  
                          _PMADRH 0192                            u440_25 01DF                            _PMADRL 0191  
                          u425_25 00AA                            u434_23 0180                            _PMDATH 0194  
                          _PMDATL 0193                            u427_23 00CC                            _PMCON2 0196  
                          u439_25 01CC                    _debounce_count 012E                    _debounce_mode1 0130  
                  _debounce_mode2 0132                         ??_InitApp 0022             ??_ConfigureOscillator 0022  
        __end_of_read_top_tactile 1304                    __CFG_PWRTE$OFF 0000                            ___lmul 1EE8  
                       ??___aldiv 0036                         ??___awdiv 0026                         ??___ftadd 0030  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 004D                         ??___ftneg 0025  
                       ??___ftmul 003D                         ??___fttol 00A4                  __end_of_init_adc 1D5D  
                __end_of_init_pwm 115F         __size_of_showBootSequence 002B                  ___awdiv@quotient 0029  
                    __pdataBANK10 0520             ___ftmul@f3_as_product 0042                      __pdataBIGRAM 236E  
         FLASH_ReadWord@flashAddr 0022                      __pdataCOMMON 007D              _getSwitchBypassState 1D3D  
                       ??_wait_ms 0030              _setSwitchBypassState 11E1                   ??_star_tactiles 0034  
          setLongTapState@f_state 0022           __end_of__initialization 02A8                        ___altoft@c 002A  
                      ___ftadd@f1 002A                        ___ftadd@f2 002D                 _bypass_turning_on 014F  
                      ___ftdiv@f1 004A                        ___ftdiv@f2 0047                        ___ftdiv@f3 0052  
                  _top_push_state 00E6         ??_updateSwitchBypassState 0024                        ___ftneg@f1 0022  
             _switchBypass_toggle 014C                        ___awtoft@c 002A           __end_of_set_subdivision 094A  
                      ___ftmul@f1 0037                        ___ftmul@f2 003A                        ___fttol@f1 00A0  
                ?_updateSwitchTap 0070                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK0 0002                      __pidataBANK1 1D84                      __pidataBANK2 1DEA  
                    __pidataBANK4 10A0                      __pidataBANK5 1062                      __pidataBANK6 1024  
                    __pidataBANK7 1354                      __pidataBANK8 1304                  _initSwitchBypass 1D75  
                 _doubleTap_state 006B                    _OPTION_REGbits 0095             ?_getSwitchBypassState 0022  
           ?_setSwitchBypassState 0034              __size_of_init_timer0 0007              __size_of_init_timer2 0009  
                      __pbssBANK0 006B                        __pbssBANK1 00C9                        __pbssBANK2 0120  
                      __pbssBANK3 01A0                        __pbssBANK9 04A0                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1DA6                   __CFG_VCAPEN$OFF 0000                        _delayArray 236E  
               ?_setFeedbackState 0022                        _delay_time 00DE                  _long_press_limit 00E4  
    __size_of_setDoublePressState 002D                        _delayfound 0136                        __pmaintext 0A40  
              ??_setFeedbackState 0024                    _InitializeTaps 1E3A                           ?___lmul 0022  
                      __pintentry 0004                        _blink_rate 00E8                     ??_adc_convert 0024  
                       ?___altoft 002A                    ___lmul@product 002A                   _setLongTapState 1DD3  
                       ?___awtoft 002A                         ?___ftpack 0022                    _FLASH_ReadWord 1E1A  
 __end_of_updateSwitchBypassState 1002                       modulation@x 003D                       modulation@y 0041  
                 _debounce_bypass 012C                     _suspend_blink 00D8                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 1EB8            __end_of_InitializeTaps 1E60  
                   ?_set_leds_top 0022                        _knob1_prev 015C                        _knob2_prev 015E  
                      _knob3_prev 0160                        _knob4_prev 0162                        _knob5_prev 0164  
                ?_set_subdivision 00AE                           ___aldiv 0800                           ___awdiv 13A4  
                 __size_of___lmul 0030                           ___ftadd 094A                           ___ftdiv 16A3  
                         ___ftneg 1D4A                        _knob_1_pos 013A                        _knob_2_pos 013C  
                         ___ftmul 174C                        _knob_3_pos 013E                           ___fttol 1591  
                      _knob_4_pos 0140                        _knob_5_pos 0142                 _switchTap_pressed 00D9  
                      ??___altoft 002E                  _showBootSequence 1E60            __end_of_FLASH_ReadWord 1E3A  
                      ??___awtoft 002D                        ??___ftpack 0027                InitializeTaps@itap 0023  
                         __ptext1 11A0                           __ptext2 052E                           __ptext3 1DD3  
                         __ptext4 0716                           __ptext5 1DBC                           __ptext6 1E8B  
                         __ptext7 1E60                           __ptext8 14AF                           __ptext9 10DE  
          ??_getSwitchBypassState 0024                         _T2CONbits 001C                  _adjust_sub_delay 0128  
                    __size_of_map 008B                      __size_of_isr 01EC            ??_setSwitchBypassState 0036  
             __end_of_adc_convert 1E1A                  ___aldiv@dividend 0032                           _wait_ms 1F18  
         __end_of_restoreLEDState 1DBC                           clrloop0 1D6A                           main@xxx 0262  
            end_of_initialization 02A8                        _modulation 115F                           init_ram 1D5D  
                      ??_init_adc 0022                           initloop 1D5E                        ??_init_pwm 0022  
    updateSwitchBypassState@state 0022                _solidring_tactiles 10DE                     _longTap_timer 0144  
                   _longTap_state 006A                     _longTap_start 0151                    ??_set_leds_top 0026  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070           __end_of_setLongTapState 1DEA  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 0034                  ___aldiv@quotient 0039  
    __size_of_read_bottom_tactile 0046               ?_solidring_tactiles 0070         FLASH_ReadWord@GIEBitValue 0024  
            __size_of_update_mode 0041                   ?_FLASH_ReadWord 0022                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010              star_tactiles@reverse 0036  
                      _test_timer 01E4                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         _SPI_Value 01E8           setFeedbackState@f_state 0022  
            ??_solidring_tactiles 0034       __end_of_ConfigureOscillator 1D3D       __size_of_getCurrentLEDState 0012  
                      map@out_max 0063                        map@out_min 0060       __size_of_updateSwitchBypass 00E2  
        __end_of_initSwitchBypass 1D84                       _CCP1CONbits 0293                       ___ftdiv@exp 0055  
        __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A              _switchBypass_pressed 014A  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                       _CCP7CONbits 0616                       ___ftmul@exp 0041  
              adc_convert@channel 0025                       _CCP8CONbits 0619                       _CCP9CONbits 061C  
            set_leds_top@ledState 0024                     __pidataBANK10 1FC2                    __end_of___lmul 1F18  
                   __pidataBIGRAM 02AC                       _adc_convert 1E01                     __pidataCOMMON 07FF  
                  _switchTap_down 0156               start_initialization 01F2             _bottomTactile_pressed 014E  
             _setDoublePressState 1E8B                       __end_of_map 16A3                       __end_of_isr 01F0  
                ?_restoreLEDState 0070                _mod_delay_time_bak 01EA             __end_of_star_tactiles 151E  
              _adjusted_pot_value 012A                       ?_modulation 003D              ?_setDoublePressState 0034  
                ?_setLongTapState 0022                          ??___lmul 002A                       __pdataBANK0 0069  
                     __pdataBANK1 00DA                       __pdataBANK2 0158                       __pdataBANK4 0220  
                     __pdataBANK5 02A0                       __pdataBANK6 0320                       __pdataBANK7 03A0  
                     __pdataBANK8 0420                     _tap_iteration 016A          __size_of_updateSwitchTap 01E8  
               __size_of___altoft 003D         __size_of_setFeedbackState 0017                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 0022                     ??_init_timer2 0022  
            __end_of_set_leds_top 144A                         ___latbits 0003                _switchBypass_state 007D  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK4 025E  
                   _delay_counter 0134          __end_of_showBootSequence 1E8B          ?_updateSwitchBypassState 0022  
                  isr@tmpSubDelay 0020                          ?_InitApp 0070             ??_setDoublePressState 0036  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 002E  
               ??_set_leds_bottom 0024                _currentBypassState 016D                          ?___awdiv 0022  
                        ?___ftadd 002A                          ?___ftdiv 0047                          ?___ftneg 0022  
                        ?___ftmul 0037                          ?___fttol 00A0                       _blink_delay 0158  
             __size_of_modulation 0041                       _blink_state 016C                          _CCPTMRS0 029D  
                        _CCPTMRS1 029E                          _CCPTMRS2 029F                          ?_wait_ms 002E  
             _read_bottom_tactile 1227               __end_of_init_timer0 07FF               __end_of_init_timer2 1D4A  
                       _mod_value 0146                         _mod_timer 0124                  ??_InitializeTaps 0022  
                 ___aldiv@divisor 002E                   ___aldiv@counter 0037                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 0166                         clear_ram0 1D69                         _tap_timer 00CD  
                       _tap_total 01E0                     set_leds_top@x 0022                  ??_FLASH_ReadWord 0024  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 0038  
                       map@in_max 005D                         map@in_min 005A                         _sub_timer 00C9  
                      _ADCON0bits 009D                        _ADCON1bits 009E                         main@i_407 0266  
        __size_of_set_subdivision 00C8                  set_subdivision@x 00AE                  set_subdivision@y 00B0  
       __size_of_read_top_tactile 004F     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0046  
               ??_updateSwitchTap 003D                 ___lmul@multiplier 0022                 _ReadSavedSettings 151E  
               ?_initSwitchBypass 0070                    wait_ms@timeSec 002E                ?_ReadSavedSettings 0070  
                  wait_ms@timemsl 0030       setSwitchBypassState@f_state 0034                ??_initSwitchBypass 0038  
                __size_of_InitApp 0030                       _mode1_state 0152                     ??_update_mode 0022  
                     _mode2_state 0153             ??_read_bottom_tactile 0034               updateSwitchTap@iCnt 0045  
             ??_ReadSavedSettings 0026                        _APFCONbits 011D                 star_tactiles@iLed 0037  
                __size_of___aldiv 0082                  __size_of___awdiv 0052                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 0022                  __size_of___ftneg 0009  
                        ___altoft 1F85                  __size_of___ftmul 00B4                  __size_of___fttol 0087  
                        ___awtoft 1002             __size_of_set_leds_top 0054                          ___ftpack 144A  
                        _map$2177 0066            _preset_programmning_on 0155            star_tactiles@iLed_1458 0039  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  set_leds_bottom@x 0022  
                _setFeedbackState 1DBC                       _init_timer0 07F8                       _init_timer2 1D41  
              _delay_time_changed 015A        __end_of_getCurrentLEDState 1DA6        __end_of_updateSwitchBypass 07F8  
                        __ptext10 1DA6                          __ptext11 1D94                          __ptext20 1D4A  
                        __ptext12 0882                          __ptext21 174C                          __ptext13 1591  
                        __ptext30 1E01                          __ptext22 16A3                          __ptext14 1002  
                        __ptext31 13A4                          __ptext23 094A                          __ptext15 12B5  
                        __ptext40 111E                          __ptext32 1F85                          __ptext24 1D75  
                        __ptext16 1227                          __ptext41 1D41                          __ptext33 144A  
                        __ptext25 11E1                          __ptext17 115F                          __ptext42 07F8  
                        __ptext34 151E                          __ptext26 1F18                          __ptext18 0800  
                        __ptext43 1D53                          __ptext35 13F6                          __ptext27 1EE8  
                        __ptext19 1618                          __ptext44 1D39                          __ptext36 1F4A  
                        __ptext28 1001                          __ptext37 1E1A                          __ptext29 1D3D  
                        __ptext46 126D                          __ptext38 1E3A                          __ptext39 1EB8  
       __end_of_ReadSavedSettings 1591                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 0120                      ??_modulation 0045                       _mod_counter 00D5  
                        _init_adc 1D53                     __size_of_main 05C0                          _init_pwm 111E  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 13F6                          _num_taps 00E9  
                        int$flags 007E                   i1set_leds_top@x 0070                          main@tmpX 025E  
             __end_of_update_mode 11E1                __end_of_modulation 11A0                        _INTCONbits 000B  
                     _tap_history 01CC                 ??_set_subdivision 00B2                          intlevel1 0000  
                 _set_leds_bottom 1F4A                        _PMCON1bits 0195                 ?_showBootSequence 0070  
               __CFG_CLKOUTEN$OFF 0000          __size_of_restoreLEDState 0016                ??_showBootSequence 003B  
                 _reset_sub_delay 0148                        _OSCCONbits 0099                      _preset_blink 0154  
                  i1_set_leds_top 126D  __size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F  
        __size_of_setLongTapState 0017                  _read_top_tactile 12B5                      ___aldiv@sign 0038  
      __size_of_ReadSavedSettings 0073       __end_of_setDoublePressState 1EB8                      _CCP10CONbits 061F  
               _bottom_push_state 00E2            __end_ofi1_set_leds_top 12B5  
